
IWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea8  08003ea8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  08003ebc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003ebc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001091f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298c  00000000  00000000  00030953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000332e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00034110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154f0  00000000  00000000  00034dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a53  00000000  00000000  0004a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dbcb  00000000  00000000  0005ed1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc8e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003184  00000000  00000000  000dc93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c14 	.word	0x08003c14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003c14 	.word	0x08003c14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <HAL_ADC_ConvCpltCallback>:

void systemHearbit();
void swEvntCheck(event * e);

void showMenu(uint8_t curPos);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	updateAdcValues = true;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_ADC_ConvCpltCallback+0x24>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2140      	movs	r1, #64	; 0x40
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fe3b 	bl	800212c <HAL_GPIO_TogglePin>
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000028 	.word	0x20000028

080004c4 <appSetup>:

void appSetup() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	lcd_init(&hi2c1);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <appSetup+0x28>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fa0a 	bl	80008e4 <lcd_init>
	OLED_ShowString(1, 1, "Welcome\nWashing Machine", 0);
 80004d0:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <appSetup+0x2c>)
 80004d2:	2300      	movs	r3, #0
 80004d4:	2101      	movs	r1, #1
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 faec 	bl	8000ab4 <OLED_ShowString>
	HAL_Delay(4000);
 80004dc:	23fa      	movs	r3, #250	; 0xfa
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 ff65 	bl	80013b0 <HAL_Delay>
	//HAL_ADC_Start_DMA(&hadc, adcValues, N_ADC_CHANNEL);
	//HAL_TIM_Base_Start(&htim6);
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000f8 	.word	0x200000f8
 80004f0:	08003c2c 	.word	0x08003c2c

080004f4 <appLoop>:
void appLoop() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	systemHearbit();
 80004fa:	f000 f943 	bl	8000784 <systemHearbit>
	static enum {
		INIT, MAIN, SEL_MOD, MANUAL, SEMI_ATUO
	} state = INIT;

	static event evt;
	event * e = &evt;
 80004fe:	4b41      	ldr	r3, [pc, #260]	; (8000604 <appLoop+0x110>)
 8000500:	607b      	str	r3, [r7, #4]
	static uint32_t last;


	/* buffering inputs*/

	evt.sig = SAMPLE_SIG;
 8000502:	4b40      	ldr	r3, [pc, #256]	; (8000604 <appLoop+0x110>)
 8000504:	2200      	movs	r2, #0
 8000506:	801a      	strh	r2, [r3, #0]
	evt.now = HAL_GetTick();
 8000508:	f000 ff48 	bl	800139c <HAL_GetTick>
 800050c:	0002      	movs	r2, r0
 800050e:	4b3d      	ldr	r3, [pc, #244]	; (8000604 <appLoop+0x110>)
 8000510:	605a      	str	r2, [r3, #4]
	swEvntCheck(e);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	0018      	movs	r0, r3
 8000516:	f000 f87b 	bl	8000610 <swEvntCheck>

	switch (state) {
 800051a:	4b3b      	ldr	r3, [pc, #236]	; (8000608 <appLoop+0x114>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d052      	beq.n	80005c8 <appLoop+0xd4>
 8000522:	dc65      	bgt.n	80005f0 <appLoop+0xfc>
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <appLoop+0x3a>
 8000528:	2b01      	cmp	r3, #1
 800052a:	d00b      	beq.n	8000544 <appLoop+0x50>
		}
		break;
	case MANUAL:
	case SEMI_ATUO:
	default:
		break;
 800052c:	e060      	b.n	80005f0 <appLoop+0xfc>
		e->mEntry = true;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2201      	movs	r2, #1
 8000532:	731a      	strb	r2, [r3, #12]
		e->mExit = false;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	735a      	strb	r2, [r3, #13]
		OLED_Clear();
 800053a:	f000 f99d 	bl	8000878 <OLED_Clear>
		state = MAIN;
 800053e:	4b32      	ldr	r3, [pc, #200]	; (8000608 <appLoop+0x114>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
		if (e->mEntry) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	7b1b      	ldrb	r3, [r3, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d008      	beq.n	800055e <appLoop+0x6a>
			e->mEntry = false;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	731a      	strb	r2, [r3, #12]
			e->curPos = 1;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2201      	movs	r2, #1
 8000556:	741a      	strb	r2, [r3, #16]
			showMenu(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f000 f931 	bl	80007c0 <showMenu>
		if (e->s4 && e->curPos == 2) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7adb      	ldrb	r3, [r3, #11]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d009      	beq.n	800057a <appLoop+0x86>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	7c1b      	ldrb	r3, [r3, #16]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d105      	bne.n	800057a <appLoop+0x86>
			e->curPos = 1;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2201      	movs	r2, #1
 8000572:	741a      	strb	r2, [r3, #16]
			showMenu(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 f923 	bl	80007c0 <showMenu>
		if (e->s2 && e->curPos == 1) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7a5b      	ldrb	r3, [r3, #9]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d009      	beq.n	8000596 <appLoop+0xa2>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7c1b      	ldrb	r3, [r3, #16]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d105      	bne.n	8000596 <appLoop+0xa2>
			e->curPos = 2;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2202      	movs	r2, #2
 800058e:	741a      	strb	r2, [r3, #16]
			showMenu(2);
 8000590:	2002      	movs	r0, #2
 8000592:	f000 f915 	bl	80007c0 <showMenu>
		if (e->s1) {
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	7a1b      	ldrb	r3, [r3, #8]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d002      	beq.n	80005a4 <appLoop+0xb0>
			e->mExit = true;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	735a      	strb	r2, [r3, #13]
		if (e->mExit) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	7b5b      	ldrb	r3, [r3, #13]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d023      	beq.n	80005f4 <appLoop+0x100>
			state = SEL_MOD;
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <appLoop+0x114>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	701a      	strb	r2, [r3, #0]
			e->mEntry = false;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	731a      	strb	r2, [r3, #12]
			e->sEntry = true;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2201      	movs	r2, #1
 80005bc:	739a      	strb	r2, [r3, #14]
			last = e->now;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <appLoop+0x118>)
 80005c4:	601a      	str	r2, [r3, #0]
		break;
 80005c6:	e015      	b.n	80005f4 <appLoop+0x100>
		if (e->now - last > 1000) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <appLoop+0x118>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1ad2      	subs	r2, r2, r3
 80005d2:	23fa      	movs	r3, #250	; 0xfa
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d90e      	bls.n	80005f8 <appLoop+0x104>
			last = e->now;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	685a      	ldr	r2, [r3, #4]
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <appLoop+0x118>)
 80005e0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80005e2:	23a0      	movs	r3, #160	; 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2110      	movs	r1, #16
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fd9f 	bl	800212c <HAL_GPIO_TogglePin>
		break;
 80005ee:	e003      	b.n	80005f8 <appLoop+0x104>
		break;
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	e002      	b.n	80005fa <appLoop+0x106>
		break;
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	e000      	b.n	80005fa <appLoop+0x106>
		break;
 80005f8:	46c0      	nop			; (mov r8, r8)

	}
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b002      	add	sp, #8
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	2000002c 	.word	0x2000002c
 8000608:	20000040 	.word	0x20000040
 800060c:	20000044 	.word	0x20000044

08000610 <swEvntCheck>:

#define IS_PRESSED(n) (prevS##n && !s##n)

void swEvntCheck(event * e) {
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	static uint32_t last;
	static bool prevS1, prevS2, prevS3, prevS4;
	uint32_t now = HAL_GetTick();
 8000618:	f000 fec0 	bl	800139c <HAL_GetTick>
 800061c:	0003      	movs	r3, r0
 800061e:	60fb      	str	r3, [r7, #12]
	if (now - last > 10) {
 8000620:	4b52      	ldr	r3, [pc, #328]	; (800076c <swEvntCheck+0x15c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	2b0a      	cmp	r3, #10
 800062a:	d800      	bhi.n	800062e <swEvntCheck+0x1e>
 800062c:	e099      	b.n	8000762 <swEvntCheck+0x152>
		bool s1 = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 800062e:	4b50      	ldr	r3, [pc, #320]	; (8000770 <swEvntCheck+0x160>)
 8000630:	2102      	movs	r1, #2
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fd40 	bl	80020b8 <HAL_GPIO_ReadPin>
 8000638:	0003      	movs	r3, r0
 800063a:	001a      	movs	r2, r3
 800063c:	240b      	movs	r4, #11
 800063e:	193b      	adds	r3, r7, r4
 8000640:	1e51      	subs	r1, r2, #1
 8000642:	418a      	sbcs	r2, r1
 8000644:	701a      	strb	r2, [r3, #0]
		bool s2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <swEvntCheck+0x160>)
 8000648:	2101      	movs	r1, #1
 800064a:	0018      	movs	r0, r3
 800064c:	f001 fd34 	bl	80020b8 <HAL_GPIO_ReadPin>
 8000650:	0003      	movs	r3, r0
 8000652:	001a      	movs	r2, r3
 8000654:	230a      	movs	r3, #10
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	1e51      	subs	r1, r2, #1
 800065a:	418a      	sbcs	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
		bool s3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 800065e:	4b44      	ldr	r3, [pc, #272]	; (8000770 <swEvntCheck+0x160>)
 8000660:	2108      	movs	r1, #8
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fd28 	bl	80020b8 <HAL_GPIO_ReadPin>
 8000668:	0003      	movs	r3, r0
 800066a:	001a      	movs	r2, r3
 800066c:	2309      	movs	r3, #9
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	1e51      	subs	r1, r2, #1
 8000672:	418a      	sbcs	r2, r1
 8000674:	701a      	strb	r2, [r3, #0]
		bool s4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <swEvntCheck+0x160>)
 8000678:	2120      	movs	r1, #32
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fd1c 	bl	80020b8 <HAL_GPIO_ReadPin>
 8000680:	0003      	movs	r3, r0
 8000682:	001a      	movs	r2, r3
 8000684:	2308      	movs	r3, #8
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	1e51      	subs	r1, r2, #1
 800068a:	418a      	sbcs	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]

		e->s1 = IS_PRESSED(1);
 800068e:	4b39      	ldr	r3, [pc, #228]	; (8000774 <swEvntCheck+0x164>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d008      	beq.n	80006a8 <swEvntCheck+0x98>
 8000696:	193b      	adds	r3, r7, r4
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2201      	movs	r2, #1
 800069c:	4053      	eors	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <swEvntCheck+0x98>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <swEvntCheck+0x9a>
 80006a8:	2300      	movs	r3, #0
 80006aa:	1c1a      	adds	r2, r3, #0
 80006ac:	2301      	movs	r3, #1
 80006ae:	4013      	ands	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	721a      	strb	r2, [r3, #8]
		e->s2 = IS_PRESSED(2);
 80006b6:	4b30      	ldr	r3, [pc, #192]	; (8000778 <swEvntCheck+0x168>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d009      	beq.n	80006d2 <swEvntCheck+0xc2>
 80006be:	230a      	movs	r3, #10
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4053      	eors	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <swEvntCheck+0xc2>
 80006ce:	2301      	movs	r3, #1
 80006d0:	e000      	b.n	80006d4 <swEvntCheck+0xc4>
 80006d2:	2300      	movs	r3, #0
 80006d4:	1c1a      	adds	r2, r3, #0
 80006d6:	2301      	movs	r3, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	725a      	strb	r2, [r3, #9]
		e->s3 = IS_PRESSED(3);
 80006e0:	4b26      	ldr	r3, [pc, #152]	; (800077c <swEvntCheck+0x16c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d009      	beq.n	80006fc <swEvntCheck+0xec>
 80006e8:	2309      	movs	r3, #9
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2201      	movs	r2, #1
 80006f0:	4053      	eors	r3, r2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <swEvntCheck+0xec>
 80006f8:	2301      	movs	r3, #1
 80006fa:	e000      	b.n	80006fe <swEvntCheck+0xee>
 80006fc:	2300      	movs	r3, #0
 80006fe:	1c1a      	adds	r2, r3, #0
 8000700:	2301      	movs	r3, #1
 8000702:	4013      	ands	r3, r2
 8000704:	b2da      	uxtb	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	729a      	strb	r2, [r3, #10]
		e->s4 = IS_PRESSED(4);
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <swEvntCheck+0x170>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d009      	beq.n	8000726 <swEvntCheck+0x116>
 8000712:	2308      	movs	r3, #8
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2201      	movs	r2, #1
 800071a:	4053      	eors	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <swEvntCheck+0x116>
 8000722:	2301      	movs	r3, #1
 8000724:	e000      	b.n	8000728 <swEvntCheck+0x118>
 8000726:	2300      	movs	r3, #0
 8000728:	1c1a      	adds	r2, r3, #0
 800072a:	2301      	movs	r3, #1
 800072c:	4013      	ands	r3, r2
 800072e:	b2da      	uxtb	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	72da      	strb	r2, [r3, #11]

		prevS1 = s1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <swEvntCheck+0x164>)
 8000736:	220b      	movs	r2, #11
 8000738:	18ba      	adds	r2, r7, r2
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	701a      	strb	r2, [r3, #0]
		prevS2 = s2;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <swEvntCheck+0x168>)
 8000740:	220a      	movs	r2, #10
 8000742:	18ba      	adds	r2, r7, r2
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	701a      	strb	r2, [r3, #0]
		prevS3 = s3;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <swEvntCheck+0x16c>)
 800074a:	2209      	movs	r2, #9
 800074c:	18ba      	adds	r2, r7, r2
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	701a      	strb	r2, [r3, #0]
		prevS4 = s4;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <swEvntCheck+0x170>)
 8000754:	2208      	movs	r2, #8
 8000756:	18ba      	adds	r2, r7, r2
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	701a      	strb	r2, [r3, #0]

		last = now;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <swEvntCheck+0x15c>)
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	601a      	str	r2, [r3, #0]
	}
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b005      	add	sp, #20
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000048 	.word	0x20000048
 8000770:	50000400 	.word	0x50000400
 8000774:	2000004c 	.word	0x2000004c
 8000778:	2000004d 	.word	0x2000004d
 800077c:	2000004e 	.word	0x2000004e
 8000780:	2000004f 	.word	0x2000004f

08000784 <systemHearbit>:

void systemHearbit() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
	static uint32_t last;
	uint32_t now = HAL_GetTick();
 800078a:	f000 fe07 	bl	800139c <HAL_GetTick>
 800078e:	0003      	movs	r3, r0
 8000790:	607b      	str	r3, [r7, #4]
	if (now - last > 500) {
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <systemHearbit+0x38>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	1ad2      	subs	r2, r2, r3
 800079a:	23fa      	movs	r3, #250	; 0xfa
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	429a      	cmp	r2, r3
 80007a0:	d908      	bls.n	80007b4 <systemHearbit+0x30>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	2108      	movs	r1, #8
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 fcbf 	bl	800212c <HAL_GPIO_TogglePin>
		last = now;
 80007ae:	4b03      	ldr	r3, [pc, #12]	; (80007bc <systemHearbit+0x38>)
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	601a      	str	r2, [r3, #0]
	}
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000050 	.word	0x20000050

080007c0 <showMenu>:
void showMenu(uint8_t curPos) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	0002      	movs	r2, r0
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	701a      	strb	r2, [r3, #0]
	OLED_ShowString(1, 1, "Menu", 1);
 80007cc:	4a0f      	ldr	r2, [pc, #60]	; (800080c <showMenu+0x4c>)
 80007ce:	2301      	movs	r3, #1
 80007d0:	2101      	movs	r1, #1
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 f96e 	bl	8000ab4 <OLED_ShowString>
	OLED_ShowString(1, 2, "-ENTER", !(curPos == 1));
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	3b01      	subs	r3, #1
 80007de:	1e5a      	subs	r2, r3, #1
 80007e0:	4193      	sbcs	r3, r2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <showMenu+0x50>)
 80007e6:	2102      	movs	r1, #2
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 f963 	bl	8000ab4 <OLED_ShowString>
	OLED_ShowString(1, 3, "-LOG",   !(curPos == 2));
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3b02      	subs	r3, #2
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	4193      	sbcs	r3, r2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <showMenu+0x54>)
 80007fc:	2103      	movs	r1, #3
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 f958 	bl	8000ab4 <OLED_ShowString>
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08003c44 	.word	0x08003c44
 8000810:	08003c4c 	.word	0x08003c4c
 8000814:	08003c54 	.word	0x08003c54

08000818 <IIC_Writecmd>:
//**************************************************************************************************
//  Send comman to LCD display
//**************************************************************************************************
//
void IIC_Writecmd(uint8_t com)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af04      	add	r7, sp, #16
 800081e:	0002      	movs	r2, r0
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,0x78,0x00,1,&com,1,100);
 8000824:	4807      	ldr	r0, [pc, #28]	; (8000844 <IIC_Writecmd+0x2c>)
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	9302      	str	r3, [sp, #8]
 800082a:	2301      	movs	r3, #1
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2301      	movs	r3, #1
 8000834:	2200      	movs	r2, #0
 8000836:	2178      	movs	r1, #120	; 0x78
 8000838:	f001 fd2a 	bl	8002290 <HAL_I2C_Mem_Write>
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000f8 	.word	0x200000f8

08000848 <IIC_Writedata>:

void IIC_Writedata(uint8_t data)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af04      	add	r7, sp, #16
 800084e:	0002      	movs	r2, r0
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,0x78,0x40,1,&data,1,100);
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <IIC_Writedata+0x2c>)
 8000856:	2364      	movs	r3, #100	; 0x64
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	2301      	movs	r3, #1
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2301      	movs	r3, #1
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	2178      	movs	r1, #120	; 0x78
 8000868:	f001 fd12 	bl	8002290 <HAL_I2C_Mem_Write>
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000f8 	.word	0x200000f8

08000878 <OLED_Clear>:

void OLED_Clear(void)  
{  
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)  
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	e022      	b.n	80008cc <OLED_Clear+0x54>
	{
		IIC_Writecmd(0xb0+i);
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	3b50      	subs	r3, #80	; 0x50
 800088c:	b2db      	uxtb	r3, r3
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff ffc2 	bl	8000818 <IIC_Writecmd>
		IIC_Writecmd(0x00);
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff ffbf 	bl	8000818 <IIC_Writecmd>
		IIC_Writecmd(0x10);
 800089a:	2010      	movs	r0, #16
 800089c:	f7ff ffbc 	bl	8000818 <IIC_Writecmd>
		for(n=0;n<128;n++)IIC_Writedata(0); 
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e007      	b.n	80008b8 <OLED_Clear+0x40>
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff ffcd 	bl	8000848 <IIC_Writedata>
 80008ae:	1dbb      	adds	r3, r7, #6
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	1dbb      	adds	r3, r7, #6
 80008b4:	3201      	adds	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	1dbb      	adds	r3, r7, #6
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	daf2      	bge.n	80008a8 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	3201      	adds	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b07      	cmp	r3, #7
 80008d2:	d9d8      	bls.n	8000886 <OLED_Clear+0xe>
	}
	OLED_Set_Pos(0,0);
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 f865 	bl	80009a6 <OLED_Set_Pos>
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b002      	add	sp, #8
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <lcd_init>:
//**************************************************************************************************
//	LCD display initialization
//**************************************************************************************************
//
void lcd_init(I2C_HandleTypeDef *h)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	IIC_Writecmd(0xAE);//--turn off oled panel
 80008ec:	20ae      	movs	r0, #174	; 0xae
 80008ee:	f7ff ff93 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x00);//---set low column address
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff ff90 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x10);//---set high column address
 80008f8:	2010      	movs	r0, #16
 80008fa:	f7ff ff8d 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80008fe:	2040      	movs	r0, #64	; 0x40
 8000900:	f7ff ff8a 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x81);//--set contrast control register
 8000904:	2081      	movs	r0, #129	; 0x81
 8000906:	f7ff ff87 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xCF); // Set SEG Output Current Brightness
 800090a:	20cf      	movs	r0, #207	; 0xcf
 800090c:	f7ff ff84 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xA1);//--Set SEG/Column Mapping
 8000910:	20a1      	movs	r0, #161	; 0xa1
 8000912:	f7ff ff81 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xC8);//Set COM/Row Scan Direction
 8000916:	20c8      	movs	r0, #200	; 0xc8
 8000918:	f7ff ff7e 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xA6);//--set normal display
 800091c:	20a6      	movs	r0, #166	; 0xa6
 800091e:	f7ff ff7b 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xA8);//--set multiplex ratio(1 to 64)
 8000922:	20a8      	movs	r0, #168	; 0xa8
 8000924:	f7ff ff78 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x3f);//--1/64 duty
 8000928:	203f      	movs	r0, #63	; 0x3f
 800092a:	f7ff ff75 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xD3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800092e:	20d3      	movs	r0, #211	; 0xd3
 8000930:	f7ff ff72 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x00);//-not offset
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff6f 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xd5);//--set display clock divide ratio/oscillator frequency
 800093a:	20d5      	movs	r0, #213	; 0xd5
 800093c:	f7ff ff6c 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 8000940:	2080      	movs	r0, #128	; 0x80
 8000942:	f7ff ff69 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xD9);//--set pre-charge period
 8000946:	20d9      	movs	r0, #217	; 0xd9
 8000948:	f7ff ff66 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xF1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800094c:	20f1      	movs	r0, #241	; 0xf1
 800094e:	f7ff ff63 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xDA);//--set com pins hardware configuration
 8000952:	20da      	movs	r0, #218	; 0xda
 8000954:	f7ff ff60 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x12);
 8000958:	2012      	movs	r0, #18
 800095a:	f7ff ff5d 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xDB);//--set vcomh
 800095e:	20db      	movs	r0, #219	; 0xdb
 8000960:	f7ff ff5a 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x40);//Set VCOM Deselect Level
 8000964:	2040      	movs	r0, #64	; 0x40
 8000966:	f7ff ff57 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 800096a:	2020      	movs	r0, #32
 800096c:	f7ff ff54 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x02);//
 8000970:	2002      	movs	r0, #2
 8000972:	f7ff ff51 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x8D);//--set Charge Pump enable/disable
 8000976:	208d      	movs	r0, #141	; 0x8d
 8000978:	f7ff ff4e 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0x14);//--set(0x10) disable
 800097c:	2014      	movs	r0, #20
 800097e:	f7ff ff4b 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xA4);// Disable Entire Display On (0xa4/0xa5)
 8000982:	20a4      	movs	r0, #164	; 0xa4
 8000984:	f7ff ff48 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xA6);// Disable Inverse Display On (0xa6/a7) 
 8000988:	20a6      	movs	r0, #166	; 0xa6
 800098a:	f7ff ff45 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(0xAF);//--turn on oled panel
 800098e:	20af      	movs	r0, #175	; 0xaf
 8000990:	f7ff ff42 	bl	8000818 <IIC_Writecmd>
	
	IIC_Writecmd(0xAF); /*display ON*/ 
 8000994:	20af      	movs	r0, #175	; 0xaf
 8000996:	f7ff ff3f 	bl	8000818 <IIC_Writecmd>
	OLED_Clear();
 800099a:	f7ff ff6d 	bl	8000878 <OLED_Clear>
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	0002      	movs	r2, r0
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	1dbb      	adds	r3, r7, #6
 80009b4:	1c0a      	adds	r2, r1, #0
 80009b6:	701a      	strb	r2, [r3, #0]
	IIC_Writecmd(0xb0+y);
 80009b8:	1dbb      	adds	r3, r7, #6
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3b50      	subs	r3, #80	; 0x50
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ff29 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd(((x&0xf0)>>4)|0x10);
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	091b      	lsrs	r3, r3, #4
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2210      	movs	r2, #16
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff ff1f 	bl	8000818 <IIC_Writecmd>
	IIC_Writecmd((x&0x0f)|0x01); 
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	220e      	movs	r2, #14
 80009e2:	4013      	ands	r3, r2
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	2201      	movs	r2, #1
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff ff12 	bl	8000818 <IIC_Writecmd>
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <OLED_ShowChar>:
			p[x+((y/8)*128)] ^= 0x01<<(y%8);
	IIC_Writedata(p[x+((y/8)*128)]);
}

void OLED_ShowChar(uint32_t x,uint32_t y,char chr,uint8_t mode)
{      	
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	0019      	movs	r1, r3
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	1dbb      	adds	r3, r7, #6
 8000a0e:	1c0a      	adds	r2, r1, #0
 8000a10:	701a      	strb	r2, [r3, #0]
	unsigned char c=chr-' ',i;
 8000a12:	2316      	movs	r3, #22
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	1dfa      	adds	r2, r7, #7
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	3a20      	subs	r2, #32
 8000a1c:	701a      	strb	r2, [r3, #0]
	if(x>Max_Column-1){x=0;y=y+2;}	
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2b7f      	cmp	r3, #127	; 0x7f
 8000a22:	d904      	bls.n	8000a2e <OLED_ShowChar+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	60bb      	str	r3, [r7, #8]
	OLED_Set_Pos(x,y);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff ffb4 	bl	80009a6 <OLED_Set_Pos>
	for(i=0;i<6;i++)
 8000a3e:	2317      	movs	r3, #23
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e029      	b.n	8000a9c <OLED_ShowChar+0xa0>
	IIC_Writedata((mode) ? F6x8[c][i] : ~F6x8[c][i]);
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00d      	beq.n	8000a6c <OLED_ShowChar+0x70>
 8000a50:	2316      	movs	r3, #22
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	2317      	movs	r3, #23
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	7819      	ldrb	r1, [r3, #0]
 8000a5c:	4814      	ldr	r0, [pc, #80]	; (8000ab0 <OLED_ShowChar+0xb4>)
 8000a5e:	0013      	movs	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	189b      	adds	r3, r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	18c3      	adds	r3, r0, r3
 8000a68:	5c5b      	ldrb	r3, [r3, r1]
 8000a6a:	e00e      	b.n	8000a8a <OLED_ShowChar+0x8e>
 8000a6c:	2316      	movs	r3, #22
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	2317      	movs	r3, #23
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	7819      	ldrb	r1, [r3, #0]
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <OLED_ShowChar+0xb4>)
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	18c3      	adds	r3, r0, r3
 8000a84:	5c5b      	ldrb	r3, [r3, r1]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff fedc 	bl	8000848 <IIC_Writedata>
	for(i=0;i<6;i++)
 8000a90:	2117      	movs	r1, #23
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	3201      	adds	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	2317      	movs	r3, #23
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b05      	cmp	r3, #5
 8000aa4:	d9d0      	bls.n	8000a48 <OLED_ShowChar+0x4c>
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b006      	add	sp, #24
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08003c5c 	.word	0x08003c5c

08000ab4 <OLED_ShowString>:

void OLED_ShowString(uint32_t x,uint32_t y,char *chr,uint8_t mode)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	1cfb      	adds	r3, r7, #3
 8000ac4:	701a      	strb	r2, [r3, #0]
	unsigned char j=0;
 8000ac6:	2317      	movs	r3, #23
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 8000ace:	e035      	b.n	8000b3c <OLED_ShowString+0x88>
	{		
		if(chr[j]=='\n') 
 8000ad0:	2317      	movs	r3, #23
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	18d3      	adds	r3, r2, r3
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d105      	bne.n	8000aec <OLED_ShowString+0x38>
		{
			x=0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
			y++;
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	e021      	b.n	8000b30 <OLED_ShowString+0x7c>
		}
		else if(chr[j]=='\f') OLED_Clear();
 8000aec:	2317      	movs	r3, #23
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	18d3      	adds	r3, r2, r3
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b0c      	cmp	r3, #12
 8000afa:	d102      	bne.n	8000b02 <OLED_ShowString+0x4e>
 8000afc:	f7ff febc 	bl	8000878 <OLED_Clear>
 8000b00:	e016      	b.n	8000b30 <OLED_ShowString+0x7c>
		else
		{
			OLED_ShowChar(x,y,chr[j],mode);
 8000b02:	2317      	movs	r3, #23
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	18d3      	adds	r3, r2, r3
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	1cfb      	adds	r3, r7, #3
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	68b9      	ldr	r1, [r7, #8]
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff ff71 	bl	80009fc <OLED_ShowChar>
			x+=6;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3306      	adds	r3, #6
 8000b1e:	60fb      	str	r3, [r7, #12]
			if(x>120)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b78      	cmp	r3, #120	; 0x78
 8000b24:	d904      	bls.n	8000b30 <OLED_ShowString+0x7c>
			{
				x=0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
				y++;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
			}
		}
		j++;
 8000b30:	2117      	movs	r1, #23
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	3201      	adds	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 8000b3c:	2317      	movs	r3, #23
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	18d3      	adds	r3, r2, r3
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1c1      	bne.n	8000ad0 <OLED_ShowString+0x1c>
	}
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b006      	add	sp, #24
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5e:	003b      	movs	r3, r7
 8000b60:	0018      	movs	r0, r3
 8000b62:	2308      	movs	r3, #8
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f003 f84c 	bl	8003c04 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b6c:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000b6e:	4a38      	ldr	r2, [pc, #224]	; (8000c50 <MX_ADC_Init+0xf8>)
 8000b70:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b78:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	05d2      	lsls	r2, r2, #23
 8000b7e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b80:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000ba2:	2221      	movs	r2, #33	; 0x21
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	00d2      	lsls	r2, r2, #3
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000bb8:	222c      	movs	r2, #44	; 0x2c
 8000bba:	2101      	movs	r1, #1
 8000bbc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 fc0a 	bl	80013f8 <HAL_ADC_Init>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000be8:	f000 fa54 	bl	8001094 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bec:	003b      	movs	r3, r7
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	0152      	lsls	r2, r2, #5
 8000bf8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bfa:	003a      	movs	r2, r7
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fe39 	bl	8001878 <HAL_ADC_ConfigChannel>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000c0a:	f000 fa43 	bl	8001094 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c0e:	003b      	movs	r3, r7
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <MX_ADC_Init+0xfc>)
 8000c12:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c14:	003a      	movs	r2, r7
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000c18:	0011      	movs	r1, r2
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fe2c 	bl	8001878 <HAL_ADC_ConfigChannel>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000c24:	f000 fa36 	bl	8001094 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c28:	003b      	movs	r3, r7
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <MX_ADC_Init+0x100>)
 8000c2c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c2e:	003a      	movs	r2, r7
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_ADC_Init+0xf4>)
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fe1f 	bl	8001878 <HAL_ADC_ConfigChannel>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000c3e:	f000 fa29 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	2000009c 	.word	0x2000009c
 8000c50:	40012400 	.word	0x40012400
 8000c54:	04000002 	.word	0x04000002
 8000c58:	08000004 	.word	0x08000004

08000c5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	240c      	movs	r4, #12
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	0018      	movs	r0, r3
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f002 ffc8 	bl	8003c04 <memset>
  if(adcHandle->Instance==ADC1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a2e      	ldr	r2, [pc, #184]	; (8000d34 <HAL_ADC_MspInit+0xd8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d155      	bne.n	8000d2a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <HAL_ADC_MspInit+0xdc>)
 8000c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_ADC_MspInit+0xdc>)
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	0089      	lsls	r1, r1, #2
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <HAL_ADC_MspInit+0xdc>)
 8000c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <HAL_ADC_MspInit+0xdc>)
 8000c92:	2101      	movs	r1, #1
 8000c94:	430a      	orrs	r2, r1
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_ADC_MspInit+0xdc>)
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = Level_Pin|Weight_Pin|Temp_Pin;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2207      	movs	r2, #7
 8000ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2203      	movs	r2, #3
 8000cae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	193a      	adds	r2, r7, r4
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 f884 	bl	8001dcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <HAL_ADC_MspInit+0xe4>)
 8000cc8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	0052      	lsls	r2, r2, #1
 8000ce8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 ff3d 	bl	8001b80 <HAL_DMA_Init>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000d0a:	f000 f9c3 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000d12:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200c      	movs	r0, #12
 8000d20:	f000 fefc 	bl	8001b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000d24:	200c      	movs	r0, #12
 8000d26:	f000 ff0e 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b009      	add	sp, #36	; 0x24
 8000d30:	bd90      	pop	{r4, r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	40012400 	.word	0x40012400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	20000054 	.word	0x20000054
 8000d40:	40020008 	.word	0x40020008

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_DMA_Init+0x38>)
 8000d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_DMA_Init+0x38>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	631a      	str	r2, [r3, #48]	; 0x30
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_DMA_Init+0x38>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2009      	movs	r0, #9
 8000d68:	f000 fed8 	bl	8001b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d6c:	2009      	movs	r0, #9
 8000d6e:	f000 feea 	bl	8001b46 <HAL_NVIC_EnableIRQ>

}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	240c      	movs	r4, #12
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2314      	movs	r3, #20
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f002 ff37 	bl	8003c04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_GPIO_Init+0xec>)
 8000d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <MX_GPIO_Init+0xec>)
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <MX_GPIO_Init+0xec>)
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	2204      	movs	r2, #4
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <MX_GPIO_Init+0xec>)
 8000db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <MX_GPIO_Init+0xec>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	430a      	orrs	r2, r1
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_GPIO_Init+0xec>)
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <MX_GPIO_Init+0xec>)
 8000dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_GPIO_Init+0xec>)
 8000dcc:	2102      	movs	r1, #2
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_GPIO_Init+0xec>)
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|LED11_Pin, GPIO_PIN_RESET);
 8000dde:	23c0      	movs	r3, #192	; 0xc0
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	4823      	ldr	r0, [pc, #140]	; (8000e70 <MX_GPIO_Init+0xf0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	0019      	movs	r1, r3
 8000de8:	f001 f983 	bl	80020f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000dec:	4921      	ldr	r1, [pc, #132]	; (8000e74 <MX_GPIO_Init+0xf4>)
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	2200      	movs	r2, #0
 8000df4:	0018      	movs	r0, r3
 8000df6:	f001 f97c 	bl	80020f2 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |PZ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED10_Pin|LED11_Pin;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	22c0      	movs	r2, #192	; 0xc0
 8000dfe:	0212      	lsls	r2, r2, #8
 8000e00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2201      	movs	r2, #1
 8000e06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <MX_GPIO_Init+0xf0>)
 8000e18:	0019      	movs	r1, r3
 8000e1a:	0010      	movs	r0, r2
 8000e1c:	f000 ffd6 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <MX_GPIO_Init+0xf4>)
 8000e24:	601a      	str	r2, [r3, #0]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |PZ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	2201      	movs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	193a      	adds	r2, r7, r4
 8000e3a:	23a0      	movs	r3, #160	; 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 ffc3 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|S3_Pin|S5_Pin
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	223b      	movs	r2, #59	; 0x3b
 8000e4a:	601a      	str	r2, [r3, #0]
                          |S4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2201      	movs	r2, #1
 8000e56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <MX_GPIO_Init+0xf8>)
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	0010      	movs	r0, r2
 8000e60:	f000 ffb4 	bl	8001dcc <HAL_GPIO_Init>

}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b009      	add	sp, #36	; 0x24
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	50000800 	.word	0x50000800
 8000e74:	000087f8 	.word	0x000087f8
 8000e78:	50000400 	.word	0x50000400

08000e7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <MX_I2C1_Init+0x78>)
 8000e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <MX_I2C1_Init+0x7c>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 f953 	bl	8002164 <HAL_I2C_Init>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ec2:	f000 f8e7 	bl	8001094 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 fcea 	bl	80028a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f000 f8de 	bl	8001094 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eda:	2100      	movs	r1, #0
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 fd2d 	bl	800293c <HAL_I2CEx_ConfigDigitalFilter>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 f8d5 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000f8 	.word	0x200000f8
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	00300f38 	.word	0x00300f38

08000efc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	240c      	movs	r4, #12
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	0018      	movs	r0, r3
 8000f0a:	2314      	movs	r3, #20
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f002 fe78 	bl	8003c04 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_I2C_MspInit+0x7c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d128      	bne.n	8000f70 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f24:	2102      	movs	r1, #2
 8000f26:	430a      	orrs	r2, r1
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	2202      	movs	r2, #2
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f36:	0021      	movs	r1, r4
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	22c0      	movs	r2, #192	; 0xc0
 8000f3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2212      	movs	r2, #18
 8000f42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2201      	movs	r2, #1
 8000f48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2201      	movs	r2, #1
 8000f54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_I2C_MspInit+0x84>)
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	0010      	movs	r0, r2
 8000f5e:	f000 ff35 	bl	8001dcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	0389      	lsls	r1, r1, #14
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b009      	add	sp, #36	; 0x24
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	50000400 	.word	0x50000400

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f000 f9a2 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f810 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f7ff fef6 	bl	8000d80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f94:	f7ff fed6 	bl	8000d44 <MX_DMA_Init>
  MX_ADC_Init();
 8000f98:	f7ff fdde 	bl	8000b58 <MX_ADC_Init>
  MX_I2C1_Init();
 8000f9c:	f7ff ff6e 	bl	8000e7c <MX_I2C1_Init>
  MX_TIM6_Init();
 8000fa0:	f000 f90e 	bl	80011c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  appSetup();
 8000fa4:	f7ff fa8e 	bl	80004c4 <appSetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  appLoop();
 8000fa8:	f7ff faa4 	bl	80004f4 <appLoop>
 8000fac:	e7fc      	b.n	8000fa8 <main+0x24>
	...

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b09d      	sub	sp, #116	; 0x74
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	2438      	movs	r4, #56	; 0x38
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2338      	movs	r3, #56	; 0x38
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f002 fe1f 	bl	8003c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc6:	2324      	movs	r3, #36	; 0x24
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2314      	movs	r3, #20
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f002 fe17 	bl	8003c04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	0018      	movs	r0, r3
 8000fda:	2320      	movs	r3, #32
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f002 fe10 	bl	8003c04 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <SystemClock_Config+0xdc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a29      	ldr	r2, [pc, #164]	; (8001090 <SystemClock_Config+0xe0>)
 8000fea:	401a      	ands	r2, r3
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <SystemClock_Config+0xdc>)
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	0109      	lsls	r1, r1, #4
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff6:	0021      	movs	r1, r4
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2201      	movs	r2, #1
 8001002:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2210      	movs	r2, #16
 8001008:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2202      	movs	r2, #2
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2200      	movs	r2, #0
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	02d2      	lsls	r2, r2, #11
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	03d2      	lsls	r2, r2, #15
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	187b      	adds	r3, r7, r1
 8001028:	0018      	movs	r0, r3
 800102a:	f001 fcd3 	bl	80029d4 <HAL_RCC_OscConfig>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001032:	f000 f82f 	bl	8001094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	2124      	movs	r1, #36	; 0x24
 8001038:	187b      	adds	r3, r7, r1
 800103a:	220f      	movs	r2, #15
 800103c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2203      	movs	r2, #3
 8001042:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2101      	movs	r1, #1
 800105a:	0018      	movs	r0, r3
 800105c:	f002 f87e 	bl	800315c <HAL_RCC_ClockConfig>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001064:	f000 f816 	bl	8001094 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2208      	movs	r2, #8
 800106c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	0018      	movs	r0, r3
 8001078:	f002 fa5e 	bl	8003538 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001080:	f000 f808 	bl	8001094 <Error_Handler>
  }
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b01d      	add	sp, #116	; 0x74
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	40007000 	.word	0x40007000
 8001090:	ffffe7ff 	.word	0xffffe7ff

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <HAL_MspInit+0x24>)
 80010a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x24>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	430a      	orrs	r2, r1
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <HAL_MspInit+0x24>)
 80010b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_MspInit+0x24>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0549      	lsls	r1, r1, #21
 80010ba:	430a      	orrs	r2, r1
 80010bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 f942 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <DMA1_Channel1_IRQHandler+0x14>)
 8001102:	0018      	movs	r0, r3
 8001104:	f000 fdb4 	bl	8001c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	20000054 	.word	0x20000054

08001114 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <ADC1_COMP_IRQHandler+0x14>)
 800111a:	0018      	movs	r0, r3
 800111c:	f000 fae0 	bl	80016e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	2000009c 	.word	0x2000009c

0800112c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <TIM6_DAC_IRQHandler+0x14>)
 8001132:	0018      	movs	r0, r3
 8001134:	f002 fb86 	bl	8003844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	20000144 	.word	0x20000144

08001144 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <SystemInit+0x64>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <SystemInit+0x64>)
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	0049      	lsls	r1, r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <SystemInit+0x64>)
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <SystemInit+0x64>)
 800115c:	4913      	ldr	r1, [pc, #76]	; (80011ac <SystemInit+0x68>)
 800115e:	400a      	ands	r2, r1
 8001160:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <SystemInit+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <SystemInit+0x64>)
 8001168:	4911      	ldr	r1, [pc, #68]	; (80011b0 <SystemInit+0x6c>)
 800116a:	400a      	ands	r2, r1
 800116c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <SystemInit+0x64>)
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <SystemInit+0x64>)
 8001174:	2101      	movs	r1, #1
 8001176:	438a      	bics	r2, r1
 8001178:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <SystemInit+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <SystemInit+0x64>)
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <SystemInit+0x70>)
 8001182:	400a      	ands	r2, r1
 8001184:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <SystemInit+0x64>)
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <SystemInit+0x64>)
 800118c:	490a      	ldr	r1, [pc, #40]	; (80011b8 <SystemInit+0x74>)
 800118e:	400a      	ands	r2, r1
 8001190:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SystemInit+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SystemInit+0x78>)
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	0512      	lsls	r2, r2, #20
 800119e:	609a      	str	r2, [r3, #8]
#endif
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	40021000 	.word	0x40021000
 80011ac:	88ff400c 	.word	0x88ff400c
 80011b0:	fef6fff6 	.word	0xfef6fff6
 80011b4:	fffbffff 	.word	0xfffbffff
 80011b8:	ff02ffff 	.word	0xff02ffff
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c6:	003b      	movs	r3, r7
 80011c8:	0018      	movs	r0, r3
 80011ca:	2308      	movs	r3, #8
 80011cc:	001a      	movs	r2, r3
 80011ce:	2100      	movs	r1, #0
 80011d0:	f002 fd18 	bl	8003c04 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_TIM6_Init+0x6c>)
 80011d6:	4a16      	ldr	r2, [pc, #88]	; (8001230 <MX_TIM6_Init+0x70>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_TIM6_Init+0x6c>)
 80011dc:	4a15      	ldr	r2, [pc, #84]	; (8001234 <MX_TIM6_Init+0x74>)
 80011de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_TIM6_Init+0x6c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_TIM6_Init+0x6c>)
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_TIM6_Init+0x78>)
 80011ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_TIM6_Init+0x6c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_TIM6_Init+0x6c>)
 80011f4:	0018      	movs	r0, r3
 80011f6:	f002 fae5 	bl	80037c4 <HAL_TIM_Base_Init>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011fe:	f7ff ff49 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001202:	003b      	movs	r3, r7
 8001204:	2220      	movs	r2, #32
 8001206:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	003b      	movs	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800120e:	003a      	movs	r2, r7
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_TIM6_Init+0x6c>)
 8001212:	0011      	movs	r1, r2
 8001214:	0018      	movs	r0, r3
 8001216:	f002 fc79 	bl	8003b0c <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800121e:	f7ff ff39 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	20000144 	.word	0x20000144
 8001230:	40001000 	.word	0x40001000
 8001234:	00007cff 	.word	0x00007cff
 8001238:	000003e7 	.word	0x000003e7

0800123c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_TIM_Base_MspInit+0x38>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10d      	bne.n	800126a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_TIM_Base_MspInit+0x3c>)
 8001250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_TIM_Base_MspInit+0x3c>)
 8001254:	2110      	movs	r1, #16
 8001256:	430a      	orrs	r2, r1
 8001258:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2011      	movs	r0, #17
 8001260:	f000 fc5c 	bl	8001b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001264:	2011      	movs	r0, #17
 8001266:	f000 fc6e 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	40001000 	.word	0x40001000
 8001278:	40021000 	.word	0x40021000

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800127e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001280:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001282:	e003      	b.n	800128c <LoopCopyDataInit>

08001284 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001286:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001288:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800128a:	3104      	adds	r1, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <LoopForever+0xa>)
  ldr  r3, =_edata
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001290:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001292:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001294:	d3f6      	bcc.n	8001284 <CopyDataInit>
  ldr  r2, =_sbss
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001298:	e002      	b.n	80012a0 <LoopFillZerobss>

0800129a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800129a:	2300      	movs	r3, #0
  str  r3, [r2]
 800129c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129e:	3204      	adds	r2, #4

080012a0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <LoopForever+0x16>)
  cmp  r2, r3
 80012a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012a4:	d3f9      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012a6:	f7ff ff4d 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f002 fc87 	bl	8003bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff fe69 	bl	8000f84 <main>

080012b2 <LoopForever>:

LoopForever:
    b LoopForever
 80012b2:	e7fe      	b.n	80012b2 <LoopForever>
   ldr   r0, =_estack
 80012b4:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80012b8:	08003eb0 	.word	0x08003eb0
  ldr  r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012c0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80012c4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80012c8:	20000188 	.word	0x20000188

080012cc <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <DMA1_Channel2_3_IRQHandler>
	...

080012d0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_Init+0x3c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_Init+0x3c>)
 80012e2:	2140      	movs	r1, #64	; 0x40
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 f811 	bl	8001310 <HAL_InitTick>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d003      	beq.n	80012fa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e001      	b.n	80012fe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012fa:	f7ff fed1 	bl	80010a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b002      	add	sp, #8
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40022000 	.word	0x40022000

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_InitTick+0x5c>)
 800131a:	681c      	ldr	r4, [r3, #0]
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_InitTick+0x60>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	0019      	movs	r1, r3
 8001322:	23fa      	movs	r3, #250	; 0xfa
 8001324:	0098      	lsls	r0, r3, #2
 8001326:	f7fe feef 	bl	8000108 <__udivsi3>
 800132a:	0003      	movs	r3, r0
 800132c:	0019      	movs	r1, r3
 800132e:	0020      	movs	r0, r4
 8001330:	f7fe feea 	bl	8000108 <__udivsi3>
 8001334:	0003      	movs	r3, r0
 8001336:	0018      	movs	r0, r3
 8001338:	f000 fc15 	bl	8001b66 <HAL_SYSTICK_Config>
 800133c:	1e03      	subs	r3, r0, #0
 800133e:	d001      	beq.n	8001344 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e00f      	b.n	8001364 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d80b      	bhi.n	8001362 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	2301      	movs	r3, #1
 800134e:	425b      	negs	r3, r3
 8001350:	2200      	movs	r2, #0
 8001352:	0018      	movs	r0, r3
 8001354:	f000 fbe2 	bl	8001b1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_InitTick+0x64>)
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b003      	add	sp, #12
 800136a:	bd90      	pop	{r4, r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000008 	.word	0x20000008
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x1c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	001a      	movs	r2, r3
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x20>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	18d2      	adds	r2, r2, r3
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_IncTick+0x20>)
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	20000008 	.word	0x20000008
 8001398:	20000184 	.word	0x20000184

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <HAL_GetTick+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	20000184 	.word	0x20000184

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff fff0 	bl	800139c <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3301      	adds	r3, #1
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	001a      	movs	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	189b      	adds	r3, r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	f7ff ffe0 	bl	800139c <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	20000008 	.word	0x20000008

080013f8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e159      	b.n	80016be <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10a      	bne.n	8001428 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2250      	movs	r2, #80	; 0x50
 800141c:	2100      	movs	r1, #0
 800141e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff fc1a 	bl	8000c5c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142c:	2210      	movs	r2, #16
 800142e:	4013      	ands	r3, r2
 8001430:	2b10      	cmp	r3, #16
 8001432:	d005      	beq.n	8001440 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2204      	movs	r2, #4
 800143c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800143e:	d00b      	beq.n	8001458 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001444:	2210      	movs	r2, #16
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2250      	movs	r2, #80	; 0x50
 8001450:	2100      	movs	r1, #0
 8001452:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e132      	b.n	80016be <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145c:	4a9a      	ldr	r2, [pc, #616]	; (80016c8 <HAL_ADC_Init+0x2d0>)
 800145e:	4013      	ands	r3, r2
 8001460:	2202      	movs	r2, #2
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2203      	movs	r2, #3
 8001470:	4013      	ands	r3, r2
 8001472:	2b01      	cmp	r3, #1
 8001474:	d108      	bne.n	8001488 <HAL_ADC_Init+0x90>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	4013      	ands	r3, r2
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_ADC_Init+0x90>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <HAL_ADC_Init+0x92>
 8001488:	2300      	movs	r3, #0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d149      	bne.n	8001522 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	23c0      	movs	r3, #192	; 0xc0
 8001494:	061b      	lsls	r3, r3, #24
 8001496:	429a      	cmp	r2, r3
 8001498:	d00b      	beq.n	80014b2 <HAL_ADC_Init+0xba>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d005      	beq.n	80014b2 <HAL_ADC_Init+0xba>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	061b      	lsls	r3, r3, #24
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d111      	bne.n	80014d6 <HAL_ADC_Init+0xde>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	0892      	lsrs	r2, r2, #2
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6919      	ldr	r1, [r3, #16]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	e014      	b.n	8001500 <HAL_ADC_Init+0x108>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	0892      	lsrs	r2, r2, #2
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	4b79      	ldr	r3, [pc, #484]	; (80016cc <HAL_ADC_Init+0x2d4>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b78      	ldr	r3, [pc, #480]	; (80016cc <HAL_ADC_Init+0x2d4>)
 80014ec:	4978      	ldr	r1, [pc, #480]	; (80016d0 <HAL_ADC_Init+0x2d8>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	4b76      	ldr	r3, [pc, #472]	; (80016cc <HAL_ADC_Init+0x2d4>)
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4b74      	ldr	r3, [pc, #464]	; (80016cc <HAL_ADC_Init+0x2d4>)
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2118      	movs	r1, #24
 800150c:	438a      	bics	r2, r1
 800150e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68d9      	ldr	r1, [r3, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <HAL_ADC_Init+0x2d4>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b69      	ldr	r3, [pc, #420]	; (80016cc <HAL_ADC_Init+0x2d4>)
 8001528:	496a      	ldr	r1, [pc, #424]	; (80016d4 <HAL_ADC_Init+0x2dc>)
 800152a:	400a      	ands	r2, r1
 800152c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800152e:	4b67      	ldr	r3, [pc, #412]	; (80016cc <HAL_ADC_Init+0x2d4>)
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001536:	065a      	lsls	r2, r3, #25
 8001538:	4b64      	ldr	r3, [pc, #400]	; (80016cc <HAL_ADC_Init+0x2d4>)
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	055b      	lsls	r3, r3, #21
 8001548:	4013      	ands	r3, r2
 800154a:	d108      	bne.n	800155e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0549      	lsls	r1, r1, #21
 800155a:	430a      	orrs	r2, r1
 800155c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	495b      	ldr	r1, [pc, #364]	; (80016d8 <HAL_ADC_Init+0x2e0>)
 800156a:	400a      	ands	r2, r1
 800156c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68d9      	ldr	r1, [r3, #12]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d101      	bne.n	8001584 <HAL_ADC_Init+0x18c>
 8001580:	2304      	movs	r3, #4
 8001582:	e000      	b.n	8001586 <HAL_ADC_Init+0x18e>
 8001584:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001586:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2020      	movs	r0, #32
 800158c:	5c1b      	ldrb	r3, [r3, r0]
 800158e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001590:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	202c      	movs	r0, #44	; 0x2c
 8001596:	5c1b      	ldrb	r3, [r3, r0]
 8001598:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800159a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80015a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80015a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80015b0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015be:	23c2      	movs	r3, #194	; 0xc2
 80015c0:	33ff      	adds	r3, #255	; 0xff
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d00b      	beq.n	80015de <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68d9      	ldr	r1, [r3, #12]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2221      	movs	r2, #33	; 0x21
 80015e2:	5c9b      	ldrb	r3, [r3, r2]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d11a      	bne.n	800161e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2220      	movs	r2, #32
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0249      	lsls	r1, r1, #9
 8001600:	430a      	orrs	r2, r1
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	e00b      	b.n	800161e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	2220      	movs	r2, #32
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	2201      	movs	r2, #1
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	2b01      	cmp	r3, #1
 8001624:	d11f      	bne.n	8001666 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	492a      	ldr	r1, [pc, #168]	; (80016dc <HAL_ADC_Init+0x2e4>)
 8001632:	400a      	ands	r2, r1
 8001634:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6919      	ldr	r1, [r3, #16]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001644:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800164a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2101      	movs	r1, #1
 8001660:	430a      	orrs	r2, r1
 8001662:	611a      	str	r2, [r3, #16]
 8001664:	e00e      	b.n	8001684 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2201      	movs	r2, #1
 800166e:	4013      	ands	r3, r2
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691a      	ldr	r2, [r3, #16]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2101      	movs	r1, #1
 8001680:	438a      	bics	r2, r1
 8001682:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2107      	movs	r1, #7
 8001690:	438a      	bics	r2, r1
 8001692:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6959      	ldr	r1, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b0:	2203      	movs	r2, #3
 80016b2:	4393      	bics	r3, r2
 80016b4:	2201      	movs	r2, #1
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	fffffefd 	.word	0xfffffefd
 80016cc:	40012708 	.word	0x40012708
 80016d0:	ffc3ffff 	.word	0xffc3ffff
 80016d4:	fdffffff 	.word	0xfdffffff
 80016d8:	fffe0219 	.word	0xfffe0219
 80016dc:	fffffc03 	.word	0xfffffc03

080016e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d106      	bne.n	8001704 <HAL_ADC_IRQHandler+0x24>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2204      	movs	r2, #4
 80016fe:	4013      	ands	r3, r2
 8001700:	2b04      	cmp	r3, #4
 8001702:	d00d      	beq.n	8001720 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2208      	movs	r2, #8
 800170c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800170e:	2b08      	cmp	r3, #8
 8001710:	d154      	bne.n	80017bc <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2208      	movs	r2, #8
 800171a:	4013      	ands	r3, r2
 800171c:	2b08      	cmp	r3, #8
 800171e:	d14d      	bne.n	80017bc <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001724:	2210      	movs	r2, #16
 8001726:	4013      	ands	r3, r2
 8001728:	d106      	bne.n	8001738 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	23c0      	movs	r3, #192	; 0xc0
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4013      	ands	r3, r2
 8001744:	d12e      	bne.n	80017a4 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800174c:	2b00      	cmp	r3, #0
 800174e:	d129      	bne.n	80017a4 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2208      	movs	r2, #8
 8001758:	4013      	ands	r3, r2
 800175a:	2b08      	cmp	r3, #8
 800175c:	d122      	bne.n	80017a4 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2204      	movs	r2, #4
 8001766:	4013      	ands	r3, r2
 8001768:	d110      	bne.n	800178c <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	210c      	movs	r1, #12
 8001776:	438a      	bics	r2, r1
 8001778:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177e:	4a35      	ldr	r2, [pc, #212]	; (8001854 <HAL_ADC_IRQHandler+0x174>)
 8001780:	4013      	ands	r3, r2
 8001782:	2201      	movs	r2, #1
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
 800178a:	e00b      	b.n	80017a4 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	2220      	movs	r2, #32
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	2201      	movs	r2, #1
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7fe fe78 	bl	800049c <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d003      	beq.n	80017bc <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	220c      	movs	r2, #12
 80017ba:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b80      	cmp	r3, #128	; 0x80
 80017c8:	d115      	bne.n	80017f6 <HAL_ADC_IRQHandler+0x116>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b80      	cmp	r3, #128	; 0x80
 80017d6:	d10e      	bne.n	80017f6 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	0252      	lsls	r2, r2, #9
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f000 f835 	bl	8001858 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2210      	movs	r2, #16
 80017fe:	4013      	ands	r3, r2
 8001800:	2b10      	cmp	r3, #16
 8001802:	d123      	bne.n	800184c <HAL_ADC_IRQHandler+0x16c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2210      	movs	r2, #16
 800180c:	4013      	ands	r3, r2
 800180e:	2b10      	cmp	r3, #16
 8001810:	d11c      	bne.n	800184c <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2201      	movs	r2, #1
 8001822:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10d      	bne.n	8001844 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	2202      	movs	r2, #2
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2210      	movs	r2, #16
 800183a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0018      	movs	r0, r3
 8001840:	f000 f812 	bl	8001868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2210      	movs	r2, #16
 800184a:	601a      	str	r2, [r3, #0]
  }
  
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}
 8001854:	fffffefe 	.word	0xfffffefe

08001858 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001860:	46c0      	nop			; (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	b002      	add	sp, #8
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2250      	movs	r2, #80	; 0x50
 8001886:	5c9b      	ldrb	r3, [r3, r2]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x18>
 800188c:	2302      	movs	r3, #2
 800188e:	e06c      	b.n	800196a <HAL_ADC_ConfigChannel+0xf2>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2250      	movs	r2, #80	; 0x50
 8001894:	2101      	movs	r1, #1
 8001896:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2204      	movs	r2, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	d00b      	beq.n	80018bc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a8:	2220      	movs	r2, #32
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2250      	movs	r2, #80	; 0x50
 80018b4:	2100      	movs	r1, #0
 80018b6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e056      	b.n	800196a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a2c      	ldr	r2, [pc, #176]	; (8001974 <HAL_ADC_ConfigChannel+0xfc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d028      	beq.n	8001918 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	035b      	lsls	r3, r3, #13
 80018d2:	0b5a      	lsrs	r2, r3, #13
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	02db      	lsls	r3, r3, #11
 80018e4:	4013      	ands	r3, r2
 80018e6:	d009      	beq.n	80018fc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_ADC_ConfigChannel+0x100>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_ADC_ConfigChannel+0x100>)
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0409      	lsls	r1, r1, #16
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80018f6:	200a      	movs	r0, #10
 80018f8:	f000 f844 	bl	8001984 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	029b      	lsls	r3, r3, #10
 8001904:	4013      	ands	r3, r2
 8001906:	d02b      	beq.n	8001960 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_ADC_ConfigChannel+0x100>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_ADC_ConfigChannel+0x100>)
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	03c9      	lsls	r1, r1, #15
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e023      	b.n	8001960 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	035b      	lsls	r3, r3, #13
 8001924:	0b5b      	lsrs	r3, r3, #13
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	400a      	ands	r2, r1
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	02db      	lsls	r3, r3, #11
 8001938:	4013      	ands	r3, r2
 800193a:	d005      	beq.n	8001948 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_ADC_ConfigChannel+0x100>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_ADC_ConfigChannel+0x100>)
 8001942:	490e      	ldr	r1, [pc, #56]	; (800197c <HAL_ADC_ConfigChannel+0x104>)
 8001944:	400a      	ands	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	029b      	lsls	r3, r3, #10
 8001950:	4013      	ands	r3, r2
 8001952:	d005      	beq.n	8001960 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_ADC_ConfigChannel+0x100>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <HAL_ADC_ConfigChannel+0x100>)
 800195a:	4909      	ldr	r1, [pc, #36]	; (8001980 <HAL_ADC_ConfigChannel+0x108>)
 800195c:	400a      	ands	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2250      	movs	r2, #80	; 0x50
 8001964:	2100      	movs	r1, #0
 8001966:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	00001001 	.word	0x00001001
 8001978:	40012708 	.word	0x40012708
 800197c:	ff7fffff 	.word	0xff7fffff
 8001980:	ffbfffff 	.word	0xffbfffff

08001984 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <ADC_DelayMicroSecond+0x38>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	490b      	ldr	r1, [pc, #44]	; (80019c0 <ADC_DelayMicroSecond+0x3c>)
 8001992:	0018      	movs	r0, r3
 8001994:	f7fe fbb8 	bl	8000108 <__udivsi3>
 8001998:	0003      	movs	r3, r0
 800199a:	001a      	movs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4353      	muls	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80019a2:	e002      	b.n	80019aa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f9      	bne.n	80019a4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b004      	add	sp, #16
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	20000000 	.word	0x20000000
 80019c0:	000f4240 	.word	0x000f4240

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	0002      	movs	r2, r0
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	1dfb      	adds	r3, r7, #7
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b7f      	cmp	r3, #127	; 0x7f
 80019d6:	d809      	bhi.n	80019ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	001a      	movs	r2, r3
 80019de:	231f      	movs	r3, #31
 80019e0:	401a      	ands	r2, r3
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__NVIC_EnableIRQ+0x30>)
 80019e4:	2101      	movs	r1, #1
 80019e6:	4091      	lsls	r1, r2
 80019e8:	000a      	movs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]
  }
}
 80019ec:	46c0      	nop			; (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	0002      	movs	r2, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a0c:	d828      	bhi.n	8001a60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a0e:	4a2f      	ldr	r2, [pc, #188]	; (8001acc <__NVIC_SetPriority+0xd4>)
 8001a10:	1dfb      	adds	r3, r7, #7
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	33c0      	adds	r3, #192	; 0xc0
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	589b      	ldr	r3, [r3, r2]
 8001a1e:	1dfa      	adds	r2, r7, #7
 8001a20:	7812      	ldrb	r2, [r2, #0]
 8001a22:	0011      	movs	r1, r2
 8001a24:	2203      	movs	r2, #3
 8001a26:	400a      	ands	r2, r1
 8001a28:	00d2      	lsls	r2, r2, #3
 8001a2a:	21ff      	movs	r1, #255	; 0xff
 8001a2c:	4091      	lsls	r1, r2
 8001a2e:	000a      	movs	r2, r1
 8001a30:	43d2      	mvns	r2, r2
 8001a32:	401a      	ands	r2, r3
 8001a34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	22ff      	movs	r2, #255	; 0xff
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	0018      	movs	r0, r3
 8001a44:	2303      	movs	r3, #3
 8001a46:	4003      	ands	r3, r0
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a4c:	481f      	ldr	r0, [pc, #124]	; (8001acc <__NVIC_SetPriority+0xd4>)
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	430a      	orrs	r2, r1
 8001a58:	33c0      	adds	r3, #192	; 0xc0
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a5e:	e031      	b.n	8001ac4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <__NVIC_SetPriority+0xd8>)
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	0019      	movs	r1, r3
 8001a68:	230f      	movs	r3, #15
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	3b08      	subs	r3, #8
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3306      	adds	r3, #6
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	18d3      	adds	r3, r2, r3
 8001a76:	3304      	adds	r3, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	1dfa      	adds	r2, r7, #7
 8001a7c:	7812      	ldrb	r2, [r2, #0]
 8001a7e:	0011      	movs	r1, r2
 8001a80:	2203      	movs	r2, #3
 8001a82:	400a      	ands	r2, r1
 8001a84:	00d2      	lsls	r2, r2, #3
 8001a86:	21ff      	movs	r1, #255	; 0xff
 8001a88:	4091      	lsls	r1, r2
 8001a8a:	000a      	movs	r2, r1
 8001a8c:	43d2      	mvns	r2, r2
 8001a8e:	401a      	ands	r2, r3
 8001a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	019b      	lsls	r3, r3, #6
 8001a96:	22ff      	movs	r2, #255	; 0xff
 8001a98:	401a      	ands	r2, r3
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	4003      	ands	r3, r0
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <__NVIC_SetPriority+0xd8>)
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	001c      	movs	r4, r3
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	4023      	ands	r3, r4
 8001ab4:	3b08      	subs	r3, #8
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	3306      	adds	r3, #6
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	18c3      	adds	r3, r0, r3
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b003      	add	sp, #12
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1e5a      	subs	r2, r3, #1
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	045b      	lsls	r3, r3, #17
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d301      	bcc.n	8001aec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e010      	b.n	8001b0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <SysTick_Config+0x44>)
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	3a01      	subs	r2, #1
 8001af2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af4:	2301      	movs	r3, #1
 8001af6:	425b      	negs	r3, r3
 8001af8:	2103      	movs	r1, #3
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff ff7c 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x44>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x44>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b002      	add	sp, #8
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	210f      	movs	r1, #15
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	1c02      	adds	r2, r0, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	0011      	movs	r1, r2
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b004      	add	sp, #16
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff ff33 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff ffaf 	bl	8001ad4 <SysTick_Config>
 8001b76:	0003      	movs	r3, r0
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e061      	b.n	8001c56 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <HAL_DMA_Init+0xe0>)
 8001b98:	4694      	mov	ip, r2
 8001b9a:	4463      	add	r3, ip
 8001b9c:	2114      	movs	r1, #20
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f7fe fab2 	bl	8000108 <__udivsi3>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	009a      	lsls	r2, r3, #2
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <HAL_DMA_Init+0xe4>)
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2225      	movs	r2, #37	; 0x25
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <HAL_DMA_Init+0xe8>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	01db      	lsls	r3, r3, #7
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d018      	beq.n	8001c3e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_DMA_Init+0xec>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	211c      	movs	r1, #28
 8001c16:	400b      	ands	r3, r1
 8001c18:	210f      	movs	r1, #15
 8001c1a:	4099      	lsls	r1, r3
 8001c1c:	000b      	movs	r3, r1
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_DMA_Init+0xec>)
 8001c22:	400a      	ands	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_DMA_Init+0xec>)
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	201c      	movs	r0, #28
 8001c34:	4003      	ands	r3, r0
 8001c36:	409a      	lsls	r2, r3
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_DMA_Init+0xec>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2225      	movs	r2, #37	; 0x25
 8001c48:	2101      	movs	r1, #1
 8001c4a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	; 0x24
 8001c50:	2100      	movs	r1, #0
 8001c52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	bffdfff8 	.word	0xbffdfff8
 8001c64:	40020000 	.word	0x40020000
 8001c68:	ffff800f 	.word	0xffff800f
 8001c6c:	400200a8 	.word	0x400200a8

08001c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	221c      	movs	r2, #28
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2204      	movs	r2, #4
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d026      	beq.n	8001cea <HAL_DMA_IRQHandler+0x7a>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d022      	beq.n	8001cea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2220      	movs	r2, #32
 8001cac:	4013      	ands	r3, r2
 8001cae:	d107      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2104      	movs	r1, #4
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	221c      	movs	r2, #28
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	2104      	movs	r1, #4
 8001cce:	4091      	lsls	r1, r2
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d100      	bne.n	8001cde <HAL_DMA_IRQHandler+0x6e>
 8001cdc:	e071      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	0010      	movs	r0, r2
 8001ce6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001ce8:	e06b      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	221c      	movs	r2, #28
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d02d      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xea>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d029      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d10b      	bne.n	8001d2a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	210a      	movs	r1, #10
 8001d1e:	438a      	bics	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2225      	movs	r2, #37	; 0x25
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	221c      	movs	r2, #28
 8001d30:	401a      	ands	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	2102      	movs	r1, #2
 8001d38:	4091      	lsls	r1, r2
 8001d3a:	000a      	movs	r2, r1
 8001d3c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2224      	movs	r2, #36	; 0x24
 8001d42:	2100      	movs	r1, #0
 8001d44:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d039      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	0010      	movs	r0, r2
 8001d56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d58:	e033      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	221c      	movs	r2, #28
 8001d60:	4013      	ands	r3, r2
 8001d62:	2208      	movs	r2, #8
 8001d64:	409a      	lsls	r2, r3
 8001d66:	0013      	movs	r3, r2
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d02a      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x154>
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2208      	movs	r2, #8
 8001d72:	4013      	ands	r3, r2
 8001d74:	d026      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	210e      	movs	r1, #14
 8001d82:	438a      	bics	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	221c      	movs	r2, #28
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	2101      	movs	r1, #1
 8001d94:	4091      	lsls	r1, r2
 8001d96:	000a      	movs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2225      	movs	r2, #37	; 0x25
 8001da4:	2101      	movs	r1, #1
 8001da6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2224      	movs	r2, #36	; 0x24
 8001dac:	2100      	movs	r1, #0
 8001dae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	0010      	movs	r0, r2
 8001dc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46c0      	nop			; (mov r8, r8)
}
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b004      	add	sp, #16
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001de2:	e14f      	b.n	8002084 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4091      	lsls	r1, r2
 8001dee:	000a      	movs	r2, r1
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d100      	bne.n	8001dfc <HAL_GPIO_Init+0x30>
 8001dfa:	e140      	b.n	800207e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d00b      	beq.n	8001e1c <HAL_GPIO_Init+0x50>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d007      	beq.n	8001e1c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e10:	2b11      	cmp	r3, #17
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b12      	cmp	r3, #18
 8001e1a:	d130      	bne.n	8001e7e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	0013      	movs	r3, r2
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	0013      	movs	r3, r2
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e52:	2201      	movs	r2, #1
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	2201      	movs	r2, #1
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	0013      	movs	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0xf2>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d123      	bne.n	8001f06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	08da      	lsrs	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3208      	adds	r2, #8
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	58d3      	ldr	r3, [r2, r3]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2207      	movs	r2, #7
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2107      	movs	r1, #7
 8001eea:	400b      	ands	r3, r1
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	6939      	ldr	r1, [r7, #16]
 8001f04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	43da      	mvns	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	401a      	ands	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	055b      	lsls	r3, r3, #21
 8001f42:	4013      	ands	r3, r2
 8001f44:	d100      	bne.n	8001f48 <HAL_GPIO_Init+0x17c>
 8001f46:	e09a      	b.n	800207e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f48:	4b54      	ldr	r3, [pc, #336]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	430a      	orrs	r2, r1
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_GPIO_Init+0x2d4>)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	589b      	ldr	r3, [r3, r2]
 8001f60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2203      	movs	r2, #3
 8001f66:	4013      	ands	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	0013      	movs	r3, r2
 8001f70:	43da      	mvns	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	23a0      	movs	r3, #160	; 0xa0
 8001f7c:	05db      	lsls	r3, r3, #23
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d019      	beq.n	8001fb6 <HAL_GPIO_Init+0x1ea>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a47      	ldr	r2, [pc, #284]	; (80020a4 <HAL_GPIO_Init+0x2d8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_GPIO_Init+0x1e6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a46      	ldr	r2, [pc, #280]	; (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00d      	beq.n	8001fae <HAL_GPIO_Init+0x1e2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a45      	ldr	r2, [pc, #276]	; (80020ac <HAL_GPIO_Init+0x2e0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0x1de>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a44      	ldr	r2, [pc, #272]	; (80020b0 <HAL_GPIO_Init+0x2e4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_GPIO_Init+0x1da>
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	2103      	movs	r1, #3
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x2d4>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	025b      	lsls	r3, r3, #9
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002000:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43da      	mvns	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	4013      	ands	r3, r2
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202a:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43da      	mvns	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	035b      	lsls	r3, r3, #13
 8002042:	4013      	ands	r3, r2
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43da      	mvns	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	039b      	lsls	r3, r3, #14
 800206c:	4013      	ands	r3, r2
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	40da      	lsrs	r2, r3
 800208c:	1e13      	subs	r3, r2, #0
 800208e:	d000      	beq.n	8002092 <HAL_GPIO_Init+0x2c6>
 8002090:	e6a8      	b.n	8001de4 <HAL_GPIO_Init+0x18>
  }
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b006      	add	sp, #24
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	50000400 	.word	0x50000400
 80020a8:	50000800 	.word	0x50000800
 80020ac:	50000c00 	.word	0x50000c00
 80020b0:	50001c00 	.word	0x50001c00
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	000a      	movs	r2, r1
 80020c2:	1cbb      	adds	r3, r7, #2
 80020c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	1cba      	adds	r2, r7, #2
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	4013      	ands	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80020d2:	230f      	movs	r3, #15
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e003      	b.n	80020e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020dc:	230f      	movs	r3, #15
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80020e4:	230f      	movs	r3, #15
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	781b      	ldrb	r3, [r3, #0]
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	0008      	movs	r0, r1
 80020fc:	0011      	movs	r1, r2
 80020fe:	1cbb      	adds	r3, r7, #2
 8002100:	1c02      	adds	r2, r0, #0
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	1c7b      	adds	r3, r7, #1
 8002106:	1c0a      	adds	r2, r1, #0
 8002108:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210a:	1c7b      	adds	r3, r7, #1
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002112:	1cbb      	adds	r3, r7, #2
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800211a:	e003      	b.n	8002124 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800211c:	1cbb      	adds	r3, r7, #2
 800211e:	881a      	ldrh	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	000a      	movs	r2, r1
 8002136:	1cbb      	adds	r3, r7, #2
 8002138:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002140:	1cbb      	adds	r3, r7, #2
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	041a      	lsls	r2, r3, #16
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	43db      	mvns	r3, r3
 800214e:	1cb9      	adds	r1, r7, #2
 8002150:	8809      	ldrh	r1, [r1, #0]
 8002152:	400b      	ands	r3, r1
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b004      	add	sp, #16
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e082      	b.n	800227c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2241      	movs	r2, #65	; 0x41
 800217a:	5c9b      	ldrb	r3, [r3, r2]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2240      	movs	r2, #64	; 0x40
 8002186:	2100      	movs	r1, #0
 8002188:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f7fe feb5 	bl	8000efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2241      	movs	r2, #65	; 0x41
 8002196:	2124      	movs	r1, #36	; 0x24
 8002198:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	438a      	bics	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4934      	ldr	r1, [pc, #208]	; (8002284 <HAL_I2C_Init+0x120>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4931      	ldr	r1, [pc, #196]	; (8002288 <HAL_I2C_Init+0x124>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	0209      	lsls	r1, r1, #8
 80021dc:	430a      	orrs	r2, r1
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e007      	b.n	80021f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2184      	movs	r1, #132	; 0x84
 80021ec:	0209      	lsls	r1, r1, #8
 80021ee:	430a      	orrs	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d104      	bne.n	8002204 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	491f      	ldr	r1, [pc, #124]	; (800228c <HAL_I2C_Init+0x128>)
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	491a      	ldr	r1, [pc, #104]	; (8002288 <HAL_I2C_Init+0x124>)
 8002220:	400a      	ands	r2, r1
 8002222:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	431a      	orrs	r2, r3
 800222e:	0011      	movs	r1, r2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	021a      	lsls	r2, r3, #8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69d9      	ldr	r1, [r3, #28]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2241      	movs	r2, #65	; 0x41
 8002268:	2120      	movs	r1, #32
 800226a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2242      	movs	r2, #66	; 0x42
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}
 8002284:	f0ffffff 	.word	0xf0ffffff
 8002288:	ffff7fff 	.word	0xffff7fff
 800228c:	02008000 	.word	0x02008000

08002290 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	000c      	movs	r4, r1
 800229a:	0010      	movs	r0, r2
 800229c:	0019      	movs	r1, r3
 800229e:	230a      	movs	r3, #10
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	1c22      	adds	r2, r4, #0
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	2308      	movs	r3, #8
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	1c02      	adds	r2, r0, #0
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	1dbb      	adds	r3, r7, #6
 80022b0:	1c0a      	adds	r2, r1, #0
 80022b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2241      	movs	r2, #65	; 0x41
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d000      	beq.n	80022c2 <HAL_I2C_Mem_Write+0x32>
 80022c0:	e10c      	b.n	80024dc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_I2C_Mem_Write+0x42>
 80022c8:	232c      	movs	r3, #44	; 0x2c
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0ff      	b.n	80024de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2240      	movs	r2, #64	; 0x40
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_I2C_Mem_Write+0x5c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e0f8      	b.n	80024de <HAL_I2C_Mem_Write+0x24e>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	2101      	movs	r1, #1
 80022f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022f4:	f7ff f852 	bl	800139c <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	0219      	lsls	r1, r3, #8
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2319      	movs	r3, #25
 8002308:	2201      	movs	r2, #1
 800230a:	f000 f975 	bl	80025f8 <I2C_WaitOnFlagUntilTimeout>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e3      	b.n	80024de <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2241      	movs	r2, #65	; 0x41
 800231a:	2121      	movs	r1, #33	; 0x21
 800231c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2242      	movs	r2, #66	; 0x42
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	222c      	movs	r2, #44	; 0x2c
 8002336:	18ba      	adds	r2, r7, r2
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002342:	1dbb      	adds	r3, r7, #6
 8002344:	881c      	ldrh	r4, [r3, #0]
 8002346:	2308      	movs	r3, #8
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	230a      	movs	r3, #10
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	8819      	ldrh	r1, [r3, #0]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	0023      	movs	r3, r4
 800235e:	f000 f8c5 	bl	80024ec <I2C_RequestMemoryWrite>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d005      	beq.n	8002372 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	2100      	movs	r1, #0
 800236c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0b5      	b.n	80024de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2bff      	cmp	r3, #255	; 0xff
 800237a:	d911      	bls.n	80023a0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	b2da      	uxtb	r2, r3
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	045c      	lsls	r4, r3, #17
 800238c:	230a      	movs	r3, #10
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	8819      	ldrh	r1, [r3, #0]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	0023      	movs	r3, r4
 800239a:	f000 fa4d 	bl	8002838 <I2C_TransferConfig>
 800239e:	e012      	b.n	80023c6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	049c      	lsls	r4, r3, #18
 80023b4:	230a      	movs	r3, #10
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	8819      	ldrh	r1, [r3, #0]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	2300      	movs	r3, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	0023      	movs	r3, r4
 80023c2:	f000 fa39 	bl	8002838 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 f952 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 80023d2:	1e03      	subs	r3, r0, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e081      	b.n	80024de <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03a      	beq.n	800248a <HAL_I2C_Mem_Write+0x1fa>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	d136      	bne.n	800248a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800241c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	0013      	movs	r3, r2
 8002426:	2200      	movs	r2, #0
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	f000 f8e5 	bl	80025f8 <I2C_WaitOnFlagUntilTimeout>
 800242e:	1e03      	subs	r3, r0, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e053      	b.n	80024de <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2bff      	cmp	r3, #255	; 0xff
 800243e:	d911      	bls.n	8002464 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	22ff      	movs	r2, #255	; 0xff
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	b2da      	uxtb	r2, r3
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	045c      	lsls	r4, r3, #17
 8002450:	230a      	movs	r3, #10
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	8819      	ldrh	r1, [r3, #0]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	0023      	movs	r3, r4
 800245e:	f000 f9eb 	bl	8002838 <I2C_TransferConfig>
 8002462:	e012      	b.n	800248a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	b2da      	uxtb	r2, r3
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	049c      	lsls	r4, r3, #18
 8002478:	230a      	movs	r3, #10
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	8819      	ldrh	r1, [r3, #0]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	0023      	movs	r3, r4
 8002486:	f000 f9d7 	bl	8002838 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d198      	bne.n	80023c6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	0018      	movs	r0, r3
 800249c:	f000 f92a 	bl	80026f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024a0:	1e03      	subs	r3, r0, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e01a      	b.n	80024de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2220      	movs	r2, #32
 80024ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	490b      	ldr	r1, [pc, #44]	; (80024e8 <HAL_I2C_Mem_Write+0x258>)
 80024bc:	400a      	ands	r2, r1
 80024be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2241      	movs	r2, #65	; 0x41
 80024c4:	2120      	movs	r1, #32
 80024c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2242      	movs	r2, #66	; 0x42
 80024cc:	2100      	movs	r1, #0
 80024ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b007      	add	sp, #28
 80024e4:	bd90      	pop	{r4, r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	fe00e800 	.word	0xfe00e800

080024ec <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b5b0      	push	{r4, r5, r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	000c      	movs	r4, r1
 80024f6:	0010      	movs	r0, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	250a      	movs	r5, #10
 80024fc:	197b      	adds	r3, r7, r5
 80024fe:	1c22      	adds	r2, r4, #0
 8002500:	801a      	strh	r2, [r3, #0]
 8002502:	2308      	movs	r3, #8
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	1c02      	adds	r2, r0, #0
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	1dbb      	adds	r3, r7, #6
 800250c:	1c0a      	adds	r2, r1, #0
 800250e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002510:	1dbb      	adds	r3, r7, #6
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	045c      	lsls	r4, r3, #17
 800251a:	197b      	adds	r3, r7, r5
 800251c:	8819      	ldrh	r1, [r3, #0]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <I2C_RequestMemoryWrite+0xc4>)
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	0023      	movs	r3, r4
 8002526:	f000 f987 	bl	8002838 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f8a0 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 8002536:	1e03      	subs	r3, r0, #0
 8002538:	d001      	beq.n	800253e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e033      	b.n	80025a6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800253e:	1dbb      	adds	r3, r7, #6
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002546:	2308      	movs	r3, #8
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
 8002554:	e019      	b.n	800258a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002556:	2308      	movs	r3, #8
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	b29b      	uxth	r3, r3
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256a:	6a39      	ldr	r1, [r7, #32]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	0018      	movs	r0, r3
 8002570:	f000 f881 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d001      	beq.n	800257c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e014      	b.n	80025a6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800257c:	2308      	movs	r3, #8
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800258a:	6a3a      	ldr	r2, [r7, #32]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	0013      	movs	r3, r2
 8002594:	2200      	movs	r2, #0
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	f000 f82e 	bl	80025f8 <I2C_WaitOnFlagUntilTimeout>
 800259c:	1e03      	subs	r3, r0, #0
 800259e:	d001      	beq.n	80025a4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b004      	add	sp, #16
 80025ac:	bdb0      	pop	{r4, r5, r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	80002000 	.word	0x80002000

080025b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2202      	movs	r2, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d103      	bne.n	80025d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2201      	movs	r2, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d007      	beq.n	80025f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	430a      	orrs	r2, r1
 80025ee:	619a      	str	r2, [r3, #24]
  }
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	1dfb      	adds	r3, r7, #7
 8002606:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002608:	e021      	b.n	800264e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	d01e      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002610:	f7fe fec4 	bl	800139c <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d302      	bcc.n	8002626 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d113      	bne.n	800264e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	2220      	movs	r2, #32
 800262c:	431a      	orrs	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2241      	movs	r2, #65	; 0x41
 8002636:	2120      	movs	r1, #32
 8002638:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2242      	movs	r2, #66	; 0x42
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2240      	movs	r2, #64	; 0x40
 8002646:	2100      	movs	r1, #0
 8002648:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	425a      	negs	r2, r3
 800265e:	4153      	adcs	r3, r2
 8002660:	b2db      	uxtb	r3, r3
 8002662:	001a      	movs	r2, r3
 8002664:	1dfb      	adds	r3, r7, #7
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d0ce      	beq.n	800260a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b004      	add	sp, #16
 8002674:	bd80      	pop	{r7, pc}

08002676 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002682:	e02b      	b.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f86e 	bl	800276c <I2C_IsAcknowledgeFailed>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d001      	beq.n	8002698 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e029      	b.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	3301      	adds	r3, #1
 800269c:	d01e      	beq.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7fe fe7d 	bl	800139c <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d113      	bne.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	2220      	movs	r2, #32
 80026ba:	431a      	orrs	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2241      	movs	r2, #65	; 0x41
 80026c4:	2120      	movs	r1, #32
 80026c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2242      	movs	r2, #66	; 0x42
 80026cc:	2100      	movs	r1, #0
 80026ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	2100      	movs	r1, #0
 80026d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2202      	movs	r2, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d1cc      	bne.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b004      	add	sp, #16
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002700:	e028      	b.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f82f 	bl	800276c <I2C_IsAcknowledgeFailed>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d001      	beq.n	8002716 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e026      	b.n	8002764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002716:	f7fe fe41 	bl	800139c <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	d302      	bcc.n	800272c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d113      	bne.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	2220      	movs	r2, #32
 8002732:	431a      	orrs	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2241      	movs	r2, #65	; 0x41
 800273c:	2120      	movs	r1, #32
 800273e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2242      	movs	r2, #66	; 0x42
 8002744:	2100      	movs	r1, #0
 8002746:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	2100      	movs	r1, #0
 800274e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2220      	movs	r2, #32
 800275c:	4013      	ands	r3, r2
 800275e:	2b20      	cmp	r3, #32
 8002760:	d1cf      	bne.n	8002702 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b004      	add	sp, #16
 800276a:	bd80      	pop	{r7, pc}

0800276c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2210      	movs	r2, #16
 8002780:	4013      	ands	r3, r2
 8002782:	2b10      	cmp	r3, #16
 8002784:	d151      	bne.n	800282a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002786:	e021      	b.n	80027cc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	3301      	adds	r3, #1
 800278c:	d01e      	beq.n	80027cc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278e:	f7fe fe05 	bl	800139c <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <I2C_IsAcknowledgeFailed+0x38>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d113      	bne.n	80027cc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	2220      	movs	r2, #32
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2241      	movs	r2, #65	; 0x41
 80027b4:	2120      	movs	r1, #32
 80027b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2242      	movs	r2, #66	; 0x42
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e02f      	b.n	800282c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2220      	movs	r2, #32
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d1d6      	bne.n	8002788 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2210      	movs	r2, #16
 80027e0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2220      	movs	r2, #32
 80027e8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7ff fee1 	bl	80025b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	490d      	ldr	r1, [pc, #52]	; (8002834 <I2C_IsAcknowledgeFailed+0xc8>)
 80027fe:	400a      	ands	r2, r1
 8002800:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	2204      	movs	r2, #4
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2241      	movs	r2, #65	; 0x41
 8002812:	2120      	movs	r1, #32
 8002814:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2242      	movs	r2, #66	; 0x42
 800281a:	2100      	movs	r1, #0
 800281c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2240      	movs	r2, #64	; 0x40
 8002822:	2100      	movs	r1, #0
 8002824:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b004      	add	sp, #16
 8002832:	bd80      	pop	{r7, pc}
 8002834:	fe00e800 	.word	0xfe00e800

08002838 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	0008      	movs	r0, r1
 8002842:	0011      	movs	r1, r2
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	240a      	movs	r4, #10
 8002848:	193b      	adds	r3, r7, r4
 800284a:	1c02      	adds	r2, r0, #0
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	2009      	movs	r0, #9
 8002850:	183b      	adds	r3, r7, r0
 8002852:	1c0a      	adds	r2, r1, #0
 8002854:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	6a3a      	ldr	r2, [r7, #32]
 800285e:	0d51      	lsrs	r1, r2, #21
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	00d2      	lsls	r2, r2, #3
 8002864:	400a      	ands	r2, r1
 8002866:	490e      	ldr	r1, [pc, #56]	; (80028a0 <I2C_TransferConfig+0x68>)
 8002868:	430a      	orrs	r2, r1
 800286a:	43d2      	mvns	r2, r2
 800286c:	401a      	ands	r2, r3
 800286e:	0011      	movs	r1, r2
 8002870:	193b      	adds	r3, r7, r4
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	059b      	lsls	r3, r3, #22
 8002876:	0d9a      	lsrs	r2, r3, #22
 8002878:	183b      	adds	r3, r7, r0
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	0418      	lsls	r0, r3, #16
 800287e:	23ff      	movs	r3, #255	; 0xff
 8002880:	041b      	lsls	r3, r3, #16
 8002882:	4003      	ands	r3, r0
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	431a      	orrs	r2, r3
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b005      	add	sp, #20
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	03ff63ff 	.word	0x03ff63ff

080028a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2241      	movs	r2, #65	; 0x41
 80028b2:	5c9b      	ldrb	r3, [r3, r2]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d138      	bne.n	800292c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	5c9b      	ldrb	r3, [r3, r2]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e032      	b.n	800292e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	2101      	movs	r1, #1
 80028ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2241      	movs	r2, #65	; 0x41
 80028d4:	2124      	movs	r1, #36	; 0x24
 80028d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	438a      	bics	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4911      	ldr	r1, [pc, #68]	; (8002938 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6819      	ldr	r1, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2241      	movs	r2, #65	; 0x41
 800291c:	2120      	movs	r1, #32
 800291e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	2100      	movs	r1, #0
 8002926:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	ffffefff 	.word	0xffffefff

0800293c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2241      	movs	r2, #65	; 0x41
 800294a:	5c9b      	ldrb	r3, [r3, r2]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	d139      	bne.n	80029c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2240      	movs	r2, #64	; 0x40
 8002956:	5c9b      	ldrb	r3, [r3, r2]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800295c:	2302      	movs	r3, #2
 800295e:	e033      	b.n	80029c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2240      	movs	r2, #64	; 0x40
 8002964:	2101      	movs	r1, #1
 8002966:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2241      	movs	r2, #65	; 0x41
 800296c:	2124      	movs	r1, #36	; 0x24
 800296e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2101      	movs	r1, #1
 800297c:	438a      	bics	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	430a      	orrs	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2241      	movs	r2, #65	; 0x41
 80029b6:	2120      	movs	r1, #32
 80029b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2240      	movs	r2, #64	; 0x40
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	fffff0ff 	.word	0xfffff0ff

080029d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f000 fbaf 	bl	8003146 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e8:	4bcf      	ldr	r3, [pc, #828]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	220c      	movs	r2, #12
 80029ee:	4013      	ands	r3, r2
 80029f0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f2:	4bcd      	ldr	r3, [pc, #820]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	025b      	lsls	r3, r3, #9
 80029fa:	4013      	ands	r3, r2
 80029fc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	4013      	ands	r3, r2
 8002a06:	d100      	bne.n	8002a0a <HAL_RCC_OscConfig+0x36>
 8002a08:	e07e      	b.n	8002b08 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d007      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d112      	bne.n	8002a3c <HAL_RCC_OscConfig+0x68>
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	025b      	lsls	r3, r3, #9
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a20:	4bc1      	ldr	r3, [pc, #772]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <HAL_RCC_OscConfig+0x5a>
 8002a2c:	e06b      	b.n	8002b06 <HAL_RCC_OscConfig+0x132>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d167      	bne.n	8002b06 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f000 fb85 	bl	8003146 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	025b      	lsls	r3, r3, #9
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x84>
 8002a48:	4bb7      	ldr	r3, [pc, #732]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4bb6      	ldr	r3, [pc, #728]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	0249      	lsls	r1, r1, #9
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e027      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	23a0      	movs	r3, #160	; 0xa0
 8002a5e:	02db      	lsls	r3, r3, #11
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d10e      	bne.n	8002a82 <HAL_RCC_OscConfig+0xae>
 8002a64:	4bb0      	ldr	r3, [pc, #704]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4baf      	ldr	r3, [pc, #700]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	02c9      	lsls	r1, r1, #11
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	4bad      	ldr	r3, [pc, #692]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4bac      	ldr	r3, [pc, #688]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	0249      	lsls	r1, r1, #9
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e012      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd4>
 8002a82:	4ba9      	ldr	r3, [pc, #676]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4ba8      	ldr	r3, [pc, #672]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a88:	49a8      	ldr	r1, [pc, #672]	; (8002d2c <HAL_RCC_OscConfig+0x358>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	4ba6      	ldr	r3, [pc, #664]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	025b      	lsls	r3, r3, #9
 8002a96:	4013      	ands	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4ba2      	ldr	r3, [pc, #648]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4ba1      	ldr	r3, [pc, #644]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002aa2:	49a3      	ldr	r1, [pc, #652]	; (8002d30 <HAL_RCC_OscConfig+0x35c>)
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fc74 	bl	800139c <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ab8:	e009      	b.n	8002ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aba:	f7fe fc6f 	bl	800139c <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b64      	cmp	r3, #100	; 0x64
 8002ac6:	d902      	bls.n	8002ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	f000 fb3c 	bl	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ace:	4b96      	ldr	r3, [pc, #600]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	029b      	lsls	r3, r3, #10
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d0ef      	beq.n	8002aba <HAL_RCC_OscConfig+0xe6>
 8002ada:	e015      	b.n	8002b08 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fc5e 	bl	800139c <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fc59 	bl	800139c <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e326      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002af8:	4b8b      	ldr	r3, [pc, #556]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	029b      	lsls	r3, r3, #10
 8002b00:	4013      	ands	r3, r2
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x112>
 8002b04:	e000      	b.n	8002b08 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d100      	bne.n	8002b14 <HAL_RCC_OscConfig+0x140>
 8002b12:	e08b      	b.n	8002c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d13e      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1d0>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d13b      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b2c:	4b7e      	ldr	r3, [pc, #504]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2204      	movs	r2, #4
 8002b32:	4013      	ands	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_RCC_OscConfig+0x16c>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e302      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a7b      	ldr	r2, [pc, #492]	; (8002d34 <HAL_RCC_OscConfig+0x360>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	021a      	lsls	r2, r3, #8
 8002b50:	4b75      	ldr	r3, [pc, #468]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b56:	4b74      	ldr	r3, [pc, #464]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2209      	movs	r2, #9
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b68:	f000 fc40 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8002b6c:	0001      	movs	r1, r0
 8002b6e:	4b6e      	ldr	r3, [pc, #440]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	220f      	movs	r2, #15
 8002b76:	4013      	ands	r3, r2
 8002b78:	4a6f      	ldr	r2, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x364>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	000a      	movs	r2, r1
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	4b6e      	ldr	r3, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x368>)
 8002b82:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002b84:	4b6e      	ldr	r3, [pc, #440]	; (8002d40 <HAL_RCC_OscConfig+0x36c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2513      	movs	r5, #19
 8002b8a:	197c      	adds	r4, r7, r5
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7fe fbbf 	bl	8001310 <HAL_InitTick>
 8002b92:	0003      	movs	r3, r0
 8002b94:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002b96:	197b      	adds	r3, r7, r5
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d046      	beq.n	8002c2c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002b9e:	197b      	adds	r3, r7, r5
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	e2d0      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d027      	beq.n	8002bfa <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002baa:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2209      	movs	r2, #9
 8002bb0:	4393      	bics	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fbee 	bl	800139c <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fbe9 	bl	800139c <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e2b6      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd8:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4013      	ands	r3, r2
 8002be0:	d0f1      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a53      	ldr	r2, [pc, #332]	; (8002d34 <HAL_RCC_OscConfig+0x360>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	e018      	b.n	8002c2c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002c00:	2101      	movs	r1, #1
 8002c02:	438a      	bics	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe fbc9 	bl	800139c <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fbc4 	bl	800139c <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e291      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c22:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2204      	movs	r2, #4
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d1f1      	bne.n	8002c10 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2210      	movs	r2, #16
 8002c32:	4013      	ands	r3, r2
 8002c34:	d100      	bne.n	8002c38 <HAL_RCC_OscConfig+0x264>
 8002c36:	e0a1      	b.n	8002d7c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d140      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4013      	ands	r3, r2
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x282>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e277      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <HAL_RCC_OscConfig+0x370>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c64:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c6a:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	0a19      	lsrs	r1, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	061a      	lsls	r2, r3, #24
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	0b5b      	lsrs	r3, r3, #13
 8002c84:	3301      	adds	r3, #1
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	0212      	lsls	r2, r2, #8
 8002c8a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	210f      	movs	r1, #15
 8002c94:	400b      	ands	r3, r1
 8002c96:	4928      	ldr	r1, [pc, #160]	; (8002d38 <HAL_RCC_OscConfig+0x364>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <HAL_RCC_OscConfig+0x368>)
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x36c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2513      	movs	r5, #19
 8002ca6:	197c      	adds	r4, r7, r5
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fe fb31 	bl	8001310 <HAL_InitTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002cb2:	197b      	adds	r3, r7, r5
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d060      	beq.n	8002d7c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002cba:	197b      	adds	r3, r7, r5
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	e242      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d03f      	beq.n	8002d48 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	0049      	lsls	r1, r1, #1
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fb61 	bl	800139c <HAL_GetTick>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce0:	f7fe fb5c 	bl	800139c <HAL_GetTick>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e229      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <HAL_RCC_OscConfig+0x370>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	0a19      	lsrs	r1, r3, #8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	061a      	lsls	r2, r3, #24
 8002d20:	4b01      	ldr	r3, [pc, #4]	; (8002d28 <HAL_RCC_OscConfig+0x354>)
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e029      	b.n	8002d7c <HAL_RCC_OscConfig+0x3a8>
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	fffeffff 	.word	0xfffeffff
 8002d30:	fffbffff 	.word	0xfffbffff
 8002d34:	ffffe0ff 	.word	0xffffe0ff
 8002d38:	08003e84 	.word	0x08003e84
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000004 	.word	0x20000004
 8002d44:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d48:	4bbd      	ldr	r3, [pc, #756]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4bbc      	ldr	r3, [pc, #752]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002d4e:	49bd      	ldr	r1, [pc, #756]	; (8003044 <HAL_RCC_OscConfig+0x670>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fb22 	bl	800139c <HAL_GetTick>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fb1d 	bl	800139c <HAL_GetTick>
 8002d62:	0002      	movs	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1ea      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d70:	4bb3      	ldr	r3, [pc, #716]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2208      	movs	r2, #8
 8002d82:	4013      	ands	r3, r2
 8002d84:	d036      	beq.n	8002df4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d019      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4bac      	ldr	r3, [pc, #688]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d92:	4bab      	ldr	r3, [pc, #684]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002d94:	2101      	movs	r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe faff 	bl	800139c <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da4:	f7fe fafa 	bl	800139c <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1c7      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002db6:	4ba2      	ldr	r3, [pc, #648]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dba:	2202      	movs	r2, #2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d0f1      	beq.n	8002da4 <HAL_RCC_OscConfig+0x3d0>
 8002dc0:	e018      	b.n	8002df4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc2:	4b9f      	ldr	r3, [pc, #636]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc6:	4b9e      	ldr	r3, [pc, #632]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	438a      	bics	r2, r1
 8002dcc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fe fae5 	bl	800139c <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fae0 	bl	800139c <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1ad      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dea:	4b95      	ldr	r3, [pc, #596]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	2202      	movs	r2, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d1f1      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d100      	bne.n	8002e00 <HAL_RCC_OscConfig+0x42c>
 8002dfe:	e0ae      	b.n	8002f5e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e00:	2027      	movs	r0, #39	; 0x27
 8002e02:	183b      	adds	r3, r7, r0
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e08:	4b8d      	ldr	r3, [pc, #564]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	055b      	lsls	r3, r3, #21
 8002e10:	4013      	ands	r3, r2
 8002e12:	d109      	bne.n	8002e28 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	4b8a      	ldr	r3, [pc, #552]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e18:	4b89      	ldr	r3, [pc, #548]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	0549      	lsls	r1, r1, #21
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002e22:	183b      	adds	r3, r7, r0
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b87      	ldr	r3, [pc, #540]	; (8003048 <HAL_RCC_OscConfig+0x674>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4013      	ands	r3, r2
 8002e32:	d11a      	bne.n	8002e6a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e34:	4b84      	ldr	r3, [pc, #528]	; (8003048 <HAL_RCC_OscConfig+0x674>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b83      	ldr	r3, [pc, #524]	; (8003048 <HAL_RCC_OscConfig+0x674>)
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	0049      	lsls	r1, r1, #1
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fe faab 	bl	800139c <HAL_GetTick>
 8002e46:	0003      	movs	r3, r0
 8002e48:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4c:	f7fe faa6 	bl	800139c <HAL_GetTick>
 8002e50:	0002      	movs	r2, r0
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e173      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b7a      	ldr	r3, [pc, #488]	; (8003048 <HAL_RCC_OscConfig+0x674>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4013      	ands	r3, r2
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4b2>
 8002e76:	4b72      	ldr	r3, [pc, #456]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e7a:	4b71      	ldr	r3, [pc, #452]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	0049      	lsls	r1, r1, #1
 8002e80:	430a      	orrs	r2, r1
 8002e82:	651a      	str	r2, [r3, #80]	; 0x50
 8002e84:	e031      	b.n	8002eea <HAL_RCC_OscConfig+0x516>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4d4>
 8002e8e:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e92:	4b6b      	ldr	r3, [pc, #428]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002e94:	496b      	ldr	r1, [pc, #428]	; (8003044 <HAL_RCC_OscConfig+0x670>)
 8002e96:	400a      	ands	r2, r1
 8002e98:	651a      	str	r2, [r3, #80]	; 0x50
 8002e9a:	4b69      	ldr	r3, [pc, #420]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e9e:	4b68      	ldr	r3, [pc, #416]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002ea0:	496a      	ldr	r1, [pc, #424]	; (800304c <HAL_RCC_OscConfig+0x678>)
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	651a      	str	r2, [r3, #80]	; 0x50
 8002ea6:	e020      	b.n	8002eea <HAL_RCC_OscConfig+0x516>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	23a0      	movs	r3, #160	; 0xa0
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10e      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x4fe>
 8002eb4:	4b62      	ldr	r3, [pc, #392]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb8:	4b61      	ldr	r3, [pc, #388]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	00c9      	lsls	r1, r1, #3
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ec6:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	0049      	lsls	r1, r1, #1
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	651a      	str	r2, [r3, #80]	; 0x50
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0x516>
 8002ed2:	4b5b      	ldr	r3, [pc, #364]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ed6:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002ed8:	495a      	ldr	r1, [pc, #360]	; (8003044 <HAL_RCC_OscConfig+0x670>)
 8002eda:	400a      	ands	r2, r1
 8002edc:	651a      	str	r2, [r3, #80]	; 0x50
 8002ede:	4b58      	ldr	r3, [pc, #352]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee2:	4b57      	ldr	r3, [pc, #348]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002ee4:	4959      	ldr	r1, [pc, #356]	; (800304c <HAL_RCC_OscConfig+0x678>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fa53 	bl	800139c <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002efa:	e009      	b.n	8002f10 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fe fa4e 	bl	800139c <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	4a52      	ldr	r2, [pc, #328]	; (8003050 <HAL_RCC_OscConfig+0x67c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e11a      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f10:	4b4b      	ldr	r3, [pc, #300]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d0ef      	beq.n	8002efc <HAL_RCC_OscConfig+0x528>
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fa3d 	bl	800139c <HAL_GetTick>
 8002f22:	0003      	movs	r3, r0
 8002f24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f26:	e009      	b.n	8002f3c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fe fa38 	bl	800139c <HAL_GetTick>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	4a47      	ldr	r2, [pc, #284]	; (8003050 <HAL_RCC_OscConfig+0x67c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e104      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	d1ef      	bne.n	8002f28 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f48:	2327      	movs	r3, #39	; 0x27
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d105      	bne.n	8002f5e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f52:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f56:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002f58:	493e      	ldr	r1, [pc, #248]	; (8003054 <HAL_RCC_OscConfig+0x680>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2220      	movs	r2, #32
 8002f64:	4013      	ands	r3, r2
 8002f66:	d049      	beq.n	8002ffc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d026      	beq.n	8002fbe <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f70:	4b33      	ldr	r3, [pc, #204]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002f76:	2101      	movs	r1, #1
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f80:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002f82:	2101      	movs	r1, #1
 8002f84:	430a      	orrs	r2, r1
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
 8002f88:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_RCC_OscConfig+0x684>)
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_RCC_OscConfig+0x684>)
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	0189      	lsls	r1, r1, #6
 8002f92:	430a      	orrs	r2, r1
 8002f94:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fe fa01 	bl	800139c <HAL_GetTick>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa0:	f7fe f9fc 	bl	800139c <HAL_GetTick>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0c9      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fb2:	4b23      	ldr	r3, [pc, #140]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d0f1      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x5cc>
 8002fbc:	e01e      	b.n	8002ffc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	438a      	bics	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	4b23      	ldr	r3, [pc, #140]	; (8003058 <HAL_RCC_OscConfig+0x684>)
 8002fcc:	6a1a      	ldr	r2, [r3, #32]
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCC_OscConfig+0x684>)
 8002fd0:	4922      	ldr	r1, [pc, #136]	; (800305c <HAL_RCC_OscConfig+0x688>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7fe f9e1 	bl	800139c <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fe0:	f7fe f9dc 	bl	800139c <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0a9      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d1f1      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d100      	bne.n	8003006 <HAL_RCC_OscConfig+0x632>
 8003004:	e09e      	b.n	8003144 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	2b0c      	cmp	r3, #12
 800300a:	d100      	bne.n	800300e <HAL_RCC_OscConfig+0x63a>
 800300c:	e077      	b.n	80030fe <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	2b02      	cmp	r3, #2
 8003014:	d158      	bne.n	80030c8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_RCC_OscConfig+0x66c>)
 800301c:	4910      	ldr	r1, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x68c>)
 800301e:	400a      	ands	r2, r1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe f9bb 	bl	800139c <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800302a:	e01b      	b.n	8003064 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe f9b6 	bl	800139c <HAL_GetTick>
 8003030:	0002      	movs	r2, r0
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d914      	bls.n	8003064 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e083      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	40021000 	.word	0x40021000
 8003044:	fffffeff 	.word	0xfffffeff
 8003048:	40007000 	.word	0x40007000
 800304c:	fffffbff 	.word	0xfffffbff
 8003050:	00001388 	.word	0x00001388
 8003054:	efffffff 	.word	0xefffffff
 8003058:	40010000 	.word	0x40010000
 800305c:	ffffdfff 	.word	0xffffdfff
 8003060:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003064:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	049b      	lsls	r3, r3, #18
 800306c:	4013      	ands	r3, r2
 800306e:	d1dd      	bne.n	800302c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003070:	4b37      	ldr	r3, [pc, #220]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a37      	ldr	r2, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x780>)
 8003076:	4013      	ands	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	431a      	orrs	r2, r3
 800308a:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 800308c:	430a      	orrs	r2, r1
 800308e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0449      	lsls	r1, r1, #17
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe f97d 	bl	800139c <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe f978 	bl	800139c <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e045      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030ba:	4b25      	ldr	r3, [pc, #148]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	049b      	lsls	r3, r3, #18
 80030c2:	4013      	ands	r3, r2
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x6d4>
 80030c6:	e03d      	b.n	8003144 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 80030ce:	4922      	ldr	r1, [pc, #136]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe f962 	bl	800139c <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe f95d 	bl	800139c <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e02a      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	049b      	lsls	r3, r3, #18
 80030f8:	4013      	ands	r3, r2
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x70a>
 80030fc:	e022      	b.n	8003144 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e01d      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_RCC_OscConfig+0x77c>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	025b      	lsls	r3, r3, #9
 8003116:	401a      	ands	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	429a      	cmp	r2, r3
 800311e:	d10f      	bne.n	8003140 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	23f0      	movs	r3, #240	; 0xf0
 8003124:	039b      	lsls	r3, r3, #14
 8003126:	401a      	ands	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d107      	bne.n	8003140 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	23c0      	movs	r3, #192	; 0xc0
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	401a      	ands	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b00a      	add	sp, #40	; 0x28
 800314c:	bdb0      	pop	{r4, r5, r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	40021000 	.word	0x40021000
 8003154:	ff02ffff 	.word	0xff02ffff
 8003158:	feffffff 	.word	0xfeffffff

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b5b0      	push	{r4, r5, r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e128      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b96      	ldr	r3, [pc, #600]	; (80033cc <HAL_RCC_ClockConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	4013      	ands	r3, r2
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d91e      	bls.n	80031bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b93      	ldr	r3, [pc, #588]	; (80033cc <HAL_RCC_ClockConfig+0x270>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2201      	movs	r2, #1
 8003184:	4393      	bics	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	4b90      	ldr	r3, [pc, #576]	; (80033cc <HAL_RCC_ClockConfig+0x270>)
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003190:	f7fe f904 	bl	800139c <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003198:	e009      	b.n	80031ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319a:	f7fe f8ff 	bl	800139c <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	4a8a      	ldr	r2, [pc, #552]	; (80033d0 <HAL_RCC_ClockConfig+0x274>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e109      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b87      	ldr	r3, [pc, #540]	; (80033cc <HAL_RCC_ClockConfig+0x270>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	4013      	ands	r3, r2
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1ee      	bne.n	800319a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2202      	movs	r2, #2
 80031c2:	4013      	ands	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c6:	4b83      	ldr	r3, [pc, #524]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	22f0      	movs	r2, #240	; 0xf0
 80031cc:	4393      	bics	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	4b7f      	ldr	r3, [pc, #508]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 80031d6:	430a      	orrs	r2, r1
 80031d8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	4013      	ands	r3, r2
 80031e2:	d100      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x8a>
 80031e4:	e089      	b.n	80032fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ee:	4b79      	ldr	r3, [pc, #484]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	029b      	lsls	r3, r3, #10
 80031f6:	4013      	ands	r3, r2
 80031f8:	d120      	bne.n	800323c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0e1      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d107      	bne.n	8003216 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003206:	4b73      	ldr	r3, [pc, #460]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	049b      	lsls	r3, r3, #18
 800320e:	4013      	ands	r3, r2
 8003210:	d114      	bne.n	800323c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0d5      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d106      	bne.n	800322c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800321e:	4b6d      	ldr	r3, [pc, #436]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2204      	movs	r2, #4
 8003224:	4013      	ands	r3, r2
 8003226:	d109      	bne.n	800323c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0ca      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800322c:	4b69      	ldr	r3, [pc, #420]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4013      	ands	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0c2      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323c:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2203      	movs	r2, #3
 8003242:	4393      	bics	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4b62      	ldr	r3, [pc, #392]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003250:	f7fe f8a4 	bl	800139c <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d111      	bne.n	8003284 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003260:	e009      	b.n	8003276 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003262:	f7fe f89b 	bl	800139c <HAL_GetTick>
 8003266:	0002      	movs	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	4a58      	ldr	r2, [pc, #352]	; (80033d0 <HAL_RCC_ClockConfig+0x274>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0a5      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003276:	4b57      	ldr	r3, [pc, #348]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	220c      	movs	r2, #12
 800327c:	4013      	ands	r3, r2
 800327e:	2b08      	cmp	r3, #8
 8003280:	d1ef      	bne.n	8003262 <HAL_RCC_ClockConfig+0x106>
 8003282:	e03a      	b.n	80032fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d111      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328c:	e009      	b.n	80032a2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328e:	f7fe f885 	bl	800139c <HAL_GetTick>
 8003292:	0002      	movs	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	4a4d      	ldr	r2, [pc, #308]	; (80033d0 <HAL_RCC_ClockConfig+0x274>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e08f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a2:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	220c      	movs	r2, #12
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d1ef      	bne.n	800328e <HAL_RCC_ClockConfig+0x132>
 80032ae:	e024      	b.n	80032fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d11b      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b8:	e009      	b.n	80032ce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ba:	f7fe f86f 	bl	800139c <HAL_GetTick>
 80032be:	0002      	movs	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	4a42      	ldr	r2, [pc, #264]	; (80033d0 <HAL_RCC_ClockConfig+0x274>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e079      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ce:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	220c      	movs	r2, #12
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d1ef      	bne.n	80032ba <HAL_RCC_ClockConfig+0x15e>
 80032da:	e00e      	b.n	80032fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032dc:	f7fe f85e 	bl	800139c <HAL_GetTick>
 80032e0:	0002      	movs	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	4a3a      	ldr	r2, [pc, #232]	; (80033d0 <HAL_RCC_ClockConfig+0x274>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e068      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032f0:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	220c      	movs	r2, #12
 80032f6:	4013      	ands	r3, r2
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_RCC_ClockConfig+0x270>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2201      	movs	r2, #1
 8003300:	4013      	ands	r3, r2
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d21e      	bcs.n	8003346 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003308:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_RCC_ClockConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2201      	movs	r2, #1
 800330e:	4393      	bics	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <HAL_RCC_ClockConfig+0x270>)
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800331a:	f7fe f83f 	bl	800139c <HAL_GetTick>
 800331e:	0003      	movs	r3, r0
 8003320:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	e009      	b.n	8003338 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fe f83a 	bl	800139c <HAL_GetTick>
 8003328:	0002      	movs	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	4a28      	ldr	r2, [pc, #160]	; (80033d0 <HAL_RCC_ClockConfig+0x274>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e044      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003338:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_ClockConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2201      	movs	r2, #1
 800333e:	4013      	ands	r3, r2
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d1ee      	bne.n	8003324 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2204      	movs	r2, #4
 800334c:	4013      	ands	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a20      	ldr	r2, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x27c>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 8003360:	430a      	orrs	r2, r1
 8003362:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2208      	movs	r2, #8
 800336a:	4013      	ands	r3, r2
 800336c:	d00a      	beq.n	8003384 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_RCC_ClockConfig+0x280>)
 8003374:	4013      	ands	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	00da      	lsls	r2, r3, #3
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003384:	f000 f832 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8003388:	0001      	movs	r1, r0
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCC_ClockConfig+0x278>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	220f      	movs	r2, #15
 8003392:	4013      	ands	r3, r2
 8003394:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <HAL_RCC_ClockConfig+0x284>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	000a      	movs	r2, r1
 800339a:	40da      	lsrs	r2, r3
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <HAL_RCC_ClockConfig+0x288>)
 800339e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_RCC_ClockConfig+0x28c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	250b      	movs	r5, #11
 80033a6:	197c      	adds	r4, r7, r5
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7fd ffb1 	bl	8001310 <HAL_InitTick>
 80033ae:	0003      	movs	r3, r0
 80033b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80033b2:	197b      	adds	r3, r7, r5
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80033ba:	197b      	adds	r3, r7, r5
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	e000      	b.n	80033c2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b004      	add	sp, #16
 80033c8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	40022000 	.word	0x40022000
 80033d0:	00001388 	.word	0x00001388
 80033d4:	40021000 	.word	0x40021000
 80033d8:	fffff8ff 	.word	0xfffff8ff
 80033dc:	ffffc7ff 	.word	0xffffc7ff
 80033e0:	08003e84 	.word	0x08003e84
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004

080033ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b08e      	sub	sp, #56	; 0x38
 80033f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80033f2:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <HAL_RCC_GetSysClockFreq+0x138>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fa:	230c      	movs	r3, #12
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d014      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x40>
 8003402:	d900      	bls.n	8003406 <HAL_RCC_GetSysClockFreq+0x1a>
 8003404:	e07b      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x112>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d002      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x24>
 800340a:	2b08      	cmp	r3, #8
 800340c:	d00b      	beq.n	8003426 <HAL_RCC_GetSysClockFreq+0x3a>
 800340e:	e076      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003410:	4b44      	ldr	r3, [pc, #272]	; (8003524 <HAL_RCC_GetSysClockFreq+0x138>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2210      	movs	r2, #16
 8003416:	4013      	ands	r3, r2
 8003418:	d002      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800341a:	4b43      	ldr	r3, [pc, #268]	; (8003528 <HAL_RCC_GetSysClockFreq+0x13c>)
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800341e:	e07c      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003420:	4b42      	ldr	r3, [pc, #264]	; (800352c <HAL_RCC_GetSysClockFreq+0x140>)
 8003422:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003424:	e079      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003426:	4b42      	ldr	r3, [pc, #264]	; (8003530 <HAL_RCC_GetSysClockFreq+0x144>)
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800342a:	e076      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	0c9a      	lsrs	r2, r3, #18
 8003430:	230f      	movs	r3, #15
 8003432:	401a      	ands	r2, r3
 8003434:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <HAL_RCC_GetSysClockFreq+0x148>)
 8003436:	5c9b      	ldrb	r3, [r3, r2]
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	0d9a      	lsrs	r2, r3, #22
 800343e:	2303      	movs	r3, #3
 8003440:	4013      	ands	r3, r2
 8003442:	3301      	adds	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003446:	4b37      	ldr	r3, [pc, #220]	; (8003524 <HAL_RCC_GetSysClockFreq+0x138>)
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	025b      	lsls	r3, r3, #9
 800344e:	4013      	ands	r3, r2
 8003450:	d01a      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	4a35      	ldr	r2, [pc, #212]	; (8003530 <HAL_RCC_GetSysClockFreq+0x144>)
 800345c:	2300      	movs	r3, #0
 800345e:	69b8      	ldr	r0, [r7, #24]
 8003460:	69f9      	ldr	r1, [r7, #28]
 8003462:	f7fc fefd 	bl	8000260 <__aeabi_lmul>
 8003466:	0002      	movs	r2, r0
 8003468:	000b      	movs	r3, r1
 800346a:	0010      	movs	r0, r2
 800346c:	0019      	movs	r1, r3
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f7fc fed1 	bl	8000220 <__aeabi_uldivmod>
 800347e:	0002      	movs	r2, r0
 8003480:	000b      	movs	r3, r1
 8003482:	0013      	movs	r3, r2
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
 8003486:	e037      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003488:	4b26      	ldr	r3, [pc, #152]	; (8003524 <HAL_RCC_GetSysClockFreq+0x138>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2210      	movs	r2, #16
 800348e:	4013      	ands	r3, r2
 8003490:	d01a      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	4a23      	ldr	r2, [pc, #140]	; (8003528 <HAL_RCC_GetSysClockFreq+0x13c>)
 800349c:	2300      	movs	r3, #0
 800349e:	68b8      	ldr	r0, [r7, #8]
 80034a0:	68f9      	ldr	r1, [r7, #12]
 80034a2:	f7fc fedd 	bl	8000260 <__aeabi_lmul>
 80034a6:	0002      	movs	r2, r0
 80034a8:	000b      	movs	r3, r1
 80034aa:	0010      	movs	r0, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f7fc feb1 	bl	8000220 <__aeabi_uldivmod>
 80034be:	0002      	movs	r2, r0
 80034c0:	000b      	movs	r3, r1
 80034c2:	0013      	movs	r3, r2
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
 80034c6:	e017      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	0018      	movs	r0, r3
 80034cc:	2300      	movs	r3, #0
 80034ce:	0019      	movs	r1, r3
 80034d0:	4a16      	ldr	r2, [pc, #88]	; (800352c <HAL_RCC_GetSysClockFreq+0x140>)
 80034d2:	2300      	movs	r3, #0
 80034d4:	f7fc fec4 	bl	8000260 <__aeabi_lmul>
 80034d8:	0002      	movs	r2, r0
 80034da:	000b      	movs	r3, r1
 80034dc:	0010      	movs	r0, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	001c      	movs	r4, r3
 80034e4:	2300      	movs	r3, #0
 80034e6:	001d      	movs	r5, r3
 80034e8:	0022      	movs	r2, r4
 80034ea:	002b      	movs	r3, r5
 80034ec:	f7fc fe98 	bl	8000220 <__aeabi_uldivmod>
 80034f0:	0002      	movs	r2, r0
 80034f2:	000b      	movs	r3, r1
 80034f4:	0013      	movs	r3, r2
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034fc:	e00d      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_GetSysClockFreq+0x138>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0b5b      	lsrs	r3, r3, #13
 8003504:	2207      	movs	r2, #7
 8003506:	4013      	ands	r3, r2
 8003508:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	3301      	adds	r3, #1
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	0212      	lsls	r2, r2, #8
 8003512:	409a      	lsls	r2, r3
 8003514:	0013      	movs	r3, r2
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003518:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b00e      	add	sp, #56	; 0x38
 8003522:	bdb0      	pop	{r4, r5, r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	003d0900 	.word	0x003d0900
 800352c:	00f42400 	.word	0x00f42400
 8003530:	007a1200 	.word	0x007a1200
 8003534:	08003e94 	.word	0x08003e94

08003538 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003540:	2017      	movs	r0, #23
 8003542:	183b      	adds	r3, r7, r0
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2220      	movs	r2, #32
 800354e:	4013      	ands	r3, r2
 8003550:	d100      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003552:	e0c2      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003554:	4b90      	ldr	r3, [pc, #576]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	055b      	lsls	r3, r3, #21
 800355c:	4013      	ands	r3, r2
 800355e:	d109      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	4b8d      	ldr	r3, [pc, #564]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003564:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	0549      	lsls	r1, r1, #21
 800356a:	430a      	orrs	r2, r1
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800356e:	183b      	adds	r3, r7, r0
 8003570:	2201      	movs	r2, #1
 8003572:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b89      	ldr	r3, [pc, #548]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4013      	ands	r3, r2
 800357e:	d11a      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003580:	4b86      	ldr	r3, [pc, #536]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	0049      	lsls	r1, r1, #1
 800358a:	430a      	orrs	r2, r1
 800358c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7fd ff05 	bl	800139c <HAL_GetTick>
 8003592:	0003      	movs	r3, r0
 8003594:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	e008      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003598:	f7fd ff00 	bl	800139c <HAL_GetTick>
 800359c:	0002      	movs	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e0f2      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035aa:	4b7c      	ldr	r3, [pc, #496]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4013      	ands	r3, r2
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80035b6:	4b78      	ldr	r3, [pc, #480]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	23c0      	movs	r3, #192	; 0xc0
 80035bc:	039b      	lsls	r3, r3, #14
 80035be:	4013      	ands	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	23c0      	movs	r3, #192	; 0xc0
 80035c8:	039b      	lsls	r3, r3, #14
 80035ca:	4013      	ands	r3, r2
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d013      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	23c0      	movs	r3, #192	; 0xc0
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	401a      	ands	r2, r3
 80035dc:	23c0      	movs	r3, #192	; 0xc0
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d10a      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80035e4:	4b6c      	ldr	r3, [pc, #432]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	029b      	lsls	r3, r3, #10
 80035ec:	401a      	ands	r2, r3
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	029b      	lsls	r3, r3, #10
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d101      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0ca      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80035fa:	4b67      	ldr	r3, [pc, #412]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035fe:	23c0      	movs	r3, #192	; 0xc0
 8003600:	029b      	lsls	r3, r3, #10
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d03b      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	23c0      	movs	r3, #192	; 0xc0
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	4013      	ands	r3, r2
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	429a      	cmp	r2, r3
 800361a:	d033      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2220      	movs	r2, #32
 8003622:	4013      	ands	r3, r2
 8003624:	d02e      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003626:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	4a5d      	ldr	r2, [pc, #372]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003634:	4b58      	ldr	r3, [pc, #352]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	2180      	movs	r1, #128	; 0x80
 8003638:	0309      	lsls	r1, r1, #12
 800363a:	430a      	orrs	r2, r1
 800363c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800363e:	4b56      	ldr	r3, [pc, #344]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003642:	4b55      	ldr	r3, [pc, #340]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003644:	4957      	ldr	r1, [pc, #348]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003646:	400a      	ands	r2, r1
 8003648:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800364a:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4013      	ands	r3, r2
 8003658:	d014      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fd fe9f 	bl	800139c <HAL_GetTick>
 800365e:	0003      	movs	r3, r0
 8003660:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003662:	e009      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003664:	f7fd fe9a 	bl	800139c <HAL_GetTick>
 8003668:	0002      	movs	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	4a4e      	ldr	r2, [pc, #312]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e08b      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003678:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4013      	ands	r3, r2
 8003682:	d0ef      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	23c0      	movs	r3, #192	; 0xc0
 800368a:	029b      	lsls	r3, r3, #10
 800368c:	401a      	ands	r2, r3
 800368e:	23c0      	movs	r3, #192	; 0xc0
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	429a      	cmp	r2, r3
 8003694:	d10c      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003696:	4b40      	ldr	r3, [pc, #256]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a44      	ldr	r2, [pc, #272]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800369c:	4013      	ands	r3, r2
 800369e:	0019      	movs	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	23c0      	movs	r3, #192	; 0xc0
 80036a6:	039b      	lsls	r3, r3, #14
 80036a8:	401a      	ands	r2, r3
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	4b39      	ldr	r3, [pc, #228]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	23c0      	movs	r3, #192	; 0xc0
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	401a      	ands	r2, r3
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c0:	430a      	orrs	r2, r1
 80036c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036c4:	2317      	movs	r3, #23
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ce:	4b32      	ldr	r3, [pc, #200]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d2:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d4:	4936      	ldr	r1, [pc, #216]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80036d6:	400a      	ands	r2, r1
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2201      	movs	r2, #1
 80036e0:	4013      	ands	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036e4:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e8:	2203      	movs	r2, #3
 80036ea:	4393      	bics	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	4b29      	ldr	r3, [pc, #164]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2202      	movs	r2, #2
 80036fe:	4013      	ands	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003702:	4b25      	ldr	r3, [pc, #148]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	220c      	movs	r2, #12
 8003708:	4393      	bics	r3, r2
 800370a:	0019      	movs	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	430a      	orrs	r2, r1
 8003714:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2204      	movs	r2, #4
 800371c:	4013      	ands	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003724:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003726:	4013      	ands	r3, r2
 8003728:	0019      	movs	r1, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003730:	430a      	orrs	r2, r1
 8003732:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2208      	movs	r2, #8
 800373a:	4013      	ands	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800373e:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374e:	430a      	orrs	r2, r1
 8003750:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	4013      	ands	r3, r2
 800375a:	d009      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003762:	4013      	ands	r3, r2
 8003764:	0019      	movs	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376c:	430a      	orrs	r2, r1
 800376e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	4013      	ands	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378a:	430a      	orrs	r2, r1
 800378c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b006      	add	sp, #24
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
 80037a0:	fffcffff 	.word	0xfffcffff
 80037a4:	fff7ffff 	.word	0xfff7ffff
 80037a8:	00001388 	.word	0x00001388
 80037ac:	ffcfffff 	.word	0xffcfffff
 80037b0:	efffffff 	.word	0xefffffff
 80037b4:	fffff3ff 	.word	0xfffff3ff
 80037b8:	ffffcfff 	.word	0xffffcfff
 80037bc:	fbffffff 	.word	0xfbffffff
 80037c0:	fff3ffff 	.word	0xfff3ffff

080037c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e032      	b.n	800383c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2239      	movs	r2, #57	; 0x39
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d107      	bne.n	80037f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2238      	movs	r2, #56	; 0x38
 80037e6:	2100      	movs	r1, #0
 80037e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7fd fd25 	bl	800123c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2239      	movs	r2, #57	; 0x39
 80037f6:	2102      	movs	r1, #2
 80037f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	0019      	movs	r1, r3
 8003804:	0010      	movs	r0, r2
 8003806:	f000 f92d 	bl	8003a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	223e      	movs	r2, #62	; 0x3e
 800380e:	2101      	movs	r1, #1
 8003810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	223a      	movs	r2, #58	; 0x3a
 8003816:	2101      	movs	r1, #1
 8003818:	5499      	strb	r1, [r3, r2]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	223b      	movs	r2, #59	; 0x3b
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	223c      	movs	r2, #60	; 0x3c
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	223d      	movs	r2, #61	; 0x3d
 800382e:	2101      	movs	r1, #1
 8003830:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2239      	movs	r2, #57	; 0x39
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	2b02      	cmp	r3, #2
 8003858:	d124      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2202      	movs	r2, #2
 8003862:	4013      	ands	r3, r2
 8003864:	2b02      	cmp	r3, #2
 8003866:	d11d      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2203      	movs	r2, #3
 800386e:	4252      	negs	r2, r2
 8003870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2203      	movs	r2, #3
 8003880:	4013      	ands	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	0018      	movs	r0, r3
 8003888:	f000 f8d4 	bl	8003a34 <HAL_TIM_IC_CaptureCallback>
 800388c:	e007      	b.n	800389e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0018      	movs	r0, r3
 8003892:	f000 f8c7 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f8d3 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2204      	movs	r2, #4
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d125      	bne.n	80038fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2204      	movs	r2, #4
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d11e      	bne.n	80038fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2205      	movs	r2, #5
 80038c6:	4252      	negs	r2, r2
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	23c0      	movs	r3, #192	; 0xc0
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4013      	ands	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 f8a7 	bl	8003a34 <HAL_TIM_IC_CaptureCallback>
 80038e6:	e007      	b.n	80038f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 f89a 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 f8a6 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2208      	movs	r2, #8
 8003906:	4013      	ands	r3, r2
 8003908:	2b08      	cmp	r3, #8
 800390a:	d124      	bne.n	8003956 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2208      	movs	r2, #8
 8003914:	4013      	ands	r3, r2
 8003916:	2b08      	cmp	r3, #8
 8003918:	d11d      	bne.n	8003956 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2209      	movs	r2, #9
 8003920:	4252      	negs	r2, r2
 8003922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2204      	movs	r2, #4
 8003928:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	2203      	movs	r2, #3
 8003932:	4013      	ands	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f000 f87b 	bl	8003a34 <HAL_TIM_IC_CaptureCallback>
 800393e:	e007      	b.n	8003950 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	0018      	movs	r0, r3
 8003944:	f000 f86e 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0018      	movs	r0, r3
 800394c:	f000 f87a 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2210      	movs	r2, #16
 800395e:	4013      	ands	r3, r2
 8003960:	2b10      	cmp	r3, #16
 8003962:	d125      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2210      	movs	r2, #16
 800396c:	4013      	ands	r3, r2
 800396e:	2b10      	cmp	r3, #16
 8003970:	d11e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2211      	movs	r2, #17
 8003978:	4252      	negs	r2, r2
 800397a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2208      	movs	r2, #8
 8003980:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	23c0      	movs	r3, #192	; 0xc0
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4013      	ands	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0018      	movs	r0, r3
 8003994:	f000 f84e 	bl	8003a34 <HAL_TIM_IC_CaptureCallback>
 8003998:	e007      	b.n	80039aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 f841 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 f84d 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2201      	movs	r2, #1
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d10f      	bne.n	80039de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d108      	bne.n	80039de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2202      	movs	r2, #2
 80039d2:	4252      	negs	r2, r2
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 f81b 	bl	8003a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d10f      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2240      	movs	r2, #64	; 0x40
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d108      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2241      	movs	r2, #65	; 0x41
 8003a00:	4252      	negs	r2, r2
 8003a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 f824 	bl	8003a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b002      	add	sp, #8
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	05db      	lsls	r3, r3, #23
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d007      	beq.n	8003a8e <TIM_Base_SetConfig+0x2a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <TIM_Base_SetConfig+0x9c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_Base_SetConfig+0x2a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1e      	ldr	r2, [pc, #120]	; (8003b04 <TIM_Base_SetConfig+0xa0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2270      	movs	r2, #112	; 0x70
 8003a92:	4393      	bics	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	05db      	lsls	r3, r3, #23
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d007      	beq.n	8003aba <TIM_Base_SetConfig+0x56>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <TIM_Base_SetConfig+0x9c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0x56>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <TIM_Base_SetConfig+0xa0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d108      	bne.n	8003acc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <TIM_Base_SetConfig+0xa4>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	4393      	bics	r3, r2
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	615a      	str	r2, [r3, #20]
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b004      	add	sp, #16
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40010800 	.word	0x40010800
 8003b04:	40011400 	.word	0x40011400
 8003b08:	fffffcff 	.word	0xfffffcff

08003b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2238      	movs	r2, #56	; 0x38
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e042      	b.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2238      	movs	r2, #56	; 0x38
 8003b28:	2101      	movs	r1, #1
 8003b2a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2239      	movs	r2, #57	; 0x39
 8003b30:	2102      	movs	r1, #2
 8003b32:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2270      	movs	r2, #112	; 0x70
 8003b48:	4393      	bics	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	05db      	lsls	r3, r3, #23
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d009      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10c      	bne.n	8003b98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	4393      	bics	r3, r2
 8003b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2239      	movs	r2, #57	; 0x39
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2238      	movs	r2, #56	; 0x38
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b004      	add	sp, #16
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	40010800 	.word	0x40010800
 8003bb8:	40011400 	.word	0x40011400

08003bbc <__libc_init_array>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	4d0c      	ldr	r5, [pc, #48]	; (8003bf4 <__libc_init_array+0x38>)
 8003bc2:	4c0d      	ldr	r4, [pc, #52]	; (8003bf8 <__libc_init_array+0x3c>)
 8003bc4:	1b64      	subs	r4, r4, r5
 8003bc6:	10a4      	asrs	r4, r4, #2
 8003bc8:	42a6      	cmp	r6, r4
 8003bca:	d109      	bne.n	8003be0 <__libc_init_array+0x24>
 8003bcc:	2600      	movs	r6, #0
 8003bce:	f000 f821 	bl	8003c14 <_init>
 8003bd2:	4d0a      	ldr	r5, [pc, #40]	; (8003bfc <__libc_init_array+0x40>)
 8003bd4:	4c0a      	ldr	r4, [pc, #40]	; (8003c00 <__libc_init_array+0x44>)
 8003bd6:	1b64      	subs	r4, r4, r5
 8003bd8:	10a4      	asrs	r4, r4, #2
 8003bda:	42a6      	cmp	r6, r4
 8003bdc:	d105      	bne.n	8003bea <__libc_init_array+0x2e>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	00b3      	lsls	r3, r6, #2
 8003be2:	58eb      	ldr	r3, [r5, r3]
 8003be4:	4798      	blx	r3
 8003be6:	3601      	adds	r6, #1
 8003be8:	e7ee      	b.n	8003bc8 <__libc_init_array+0xc>
 8003bea:	00b3      	lsls	r3, r6, #2
 8003bec:	58eb      	ldr	r3, [r5, r3]
 8003bee:	4798      	blx	r3
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7f2      	b.n	8003bda <__libc_init_array+0x1e>
 8003bf4:	08003ea8 	.word	0x08003ea8
 8003bf8:	08003ea8 	.word	0x08003ea8
 8003bfc:	08003ea8 	.word	0x08003ea8
 8003c00:	08003eac 	.word	0x08003eac

08003c04 <memset>:
 8003c04:	0003      	movs	r3, r0
 8003c06:	1882      	adds	r2, r0, r2
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memset+0xa>
 8003c0c:	4770      	bx	lr
 8003c0e:	7019      	strb	r1, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	e7f9      	b.n	8003c08 <memset+0x4>

08003c14 <_init>:
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1a:	bc08      	pop	{r3}
 8003c1c:	469e      	mov	lr, r3
 8003c1e:	4770      	bx	lr

08003c20 <_fini>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr
