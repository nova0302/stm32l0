
l0_pwm_with_adc_dam_tim6_trig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dfc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005138  08005138  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005140  08005140  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  080051b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080051b8  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc66  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002556  00000000  00000000  0002fcfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00032258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00033038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014db2  00000000  00000000  00033cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012699  00000000  00000000  00048aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dd00  00000000  00000000  0005b13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8e3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003538  00000000  00000000  000d8e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ea4 	.word	0x08004ea4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004ea4 	.word	0x08004ea4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <HAL_ADC_ConvCpltCallback>:
#define N_ADC_CHANNEL (2)

static uint32_t adcValues[N_ADC_CHANNEL];
volatile bool updateAdcValues = false;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	updateAdcValues = true;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x24>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	2110      	movs	r1, #16
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 f806 	bl	80024d6 <HAL_GPIO_TogglePin>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b002      	add	sp, #8
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	20000094 	.word	0x20000094

080004d8 <appSetup>:

void appSetup() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc, adcValues, N_ADC_CHANNEL);
 80004dc:	490d      	ldr	r1, [pc, #52]	; (8000514 <appSetup+0x3c>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <appSetup+0x40>)
 80004e0:	2202      	movs	r2, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 f8ec 	bl	80016c0 <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <appSetup+0x44>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	0018      	movs	r0, r3
 80004ee:	f003 fc01 	bl	8003cf4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2);
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <appSetup+0x48>)
 80004f4:	2104      	movs	r1, #4
 80004f6:	0018      	movs	r0, r3
 80004f8:	f003 fbfc 	bl	8003cf4 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(&htim6);
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <appSetup+0x4c>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f003 fb74 	bl	8003bec <HAL_TIM_Base_Start>
	lcd_init(&hi2c1);
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <appSetup+0x50>)
 8000506:	0018      	movs	r0, r3
 8000508:	f000 f8e4 	bl	80006d4 <lcd_init>
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	2000008c 	.word	0x2000008c
 8000518:	200001fc 	.word	0x200001fc
 800051c:	20000174 	.word	0x20000174
 8000520:	200000f4 	.word	0x200000f4
 8000524:	20000134 	.word	0x20000134
 8000528:	200000a8 	.word	0x200000a8

0800052c <appLoop>:
void appLoop() {
 800052c:	b580      	push	{r7, lr}
 800052e:	b08c      	sub	sp, #48	; 0x30
 8000530:	af00      	add	r7, sp, #0

	static uint32_t last;
	uint32_t now = HAL_GetTick();
 8000532:	f000 ff47 	bl	80013c4 <HAL_GetTick>
 8000536:	0003      	movs	r3, r0
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28

	if (now - last > 1000) {
 800053a:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <appLoop+0xc4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000540:	1ad2      	subs	r2, r2, r3
 8000542:	23fa      	movs	r3, #250	; 0xfa
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	429a      	cmp	r2, r3
 8000548:	d92b      	bls.n	80005a2 <appLoop+0x76>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800054a:	23a0      	movs	r3, #160	; 0xa0
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	2108      	movs	r1, #8
 8000550:	0018      	movs	r0, r3
 8000552:	f001 ffc0 	bl	80024d6 <HAL_GPIO_TogglePin>
		last = now;
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <appLoop+0xc4>)
 8000558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800055a:	601a      	str	r2, [r3, #0]
		OLED_Clear();
 800055c:	f000 f884 	bl	8000668 <OLED_Clear>
		for (int i = 0; i < N_ADC_CHANNEL; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000564:	e01a      	b.n	800059c <appLoop+0x70>
			char pStr[40] = { 0, };
 8000566:	003b      	movs	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	3304      	adds	r3, #4
 800056e:	2224      	movs	r2, #36	; 0x24
 8000570:	2100      	movs	r1, #0
 8000572:	0018      	movs	r0, r3
 8000574:	f004 f868 	bl	8004648 <memset>
			sprintf(pStr, "%d: %d", i, (int) adcValues[i]);
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <appLoop+0xc8>)
 800057a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800057c:	0092      	lsls	r2, r2, #2
 800057e:	58d3      	ldr	r3, [r2, r3]
 8000580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000582:	491d      	ldr	r1, [pc, #116]	; (80005f8 <appLoop+0xcc>)
 8000584:	0038      	movs	r0, r7
 8000586:	f004 f867 	bl	8004658 <siprintf>
			OLED_ShowString(0, i, pStr, 1);
 800058a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800058c:	003a      	movs	r2, r7
 800058e:	2301      	movs	r3, #1
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f987 	bl	80008a4 <OLED_ShowString>
		for (int i = 0; i < N_ADC_CHANNEL; i++) {
 8000596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000598:	3301      	adds	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800059c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800059e:	2b01      	cmp	r3, #1
 80005a0:	dde1      	ble.n	8000566 <appLoop+0x3a>
		}
	}

	if (updateAdcValues) {
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <appLoop+0xd0>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d01c      	beq.n	80005e6 <appLoop+0xba>
		updateAdcValues = false;
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <appLoop+0xd0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
		htim2.Instance->CCR1  = adcValues[0] * 1000 / 4096;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <appLoop+0xc8>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	0013      	movs	r3, r2
 80005b8:	015b      	lsls	r3, r3, #5
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	001a      	movs	r2, r3
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <appLoop+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	0b12      	lsrs	r2, r2, #12
 80005ca:	635a      	str	r2, [r3, #52]	; 0x34
		htim22.Instance->CCR2 = adcValues[1] * 1000 / 4096;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <appLoop+0xc8>)
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	0013      	movs	r3, r2
 80005d2:	015b      	lsls	r3, r3, #5
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	189b      	adds	r3, r3, r2
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	001a      	movs	r2, r3
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <appLoop+0xd8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	0b12      	lsrs	r2, r2, #12
 80005e4:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b00c      	add	sp, #48	; 0x30
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	20000098 	.word	0x20000098
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	08004ebc 	.word	0x08004ebc
 80005fc:	20000094 	.word	0x20000094
 8000600:	20000174 	.word	0x20000174
 8000604:	200000f4 	.word	0x200000f4

08000608 <IIC_Writecmd>:
//
//**************************************************************************************************
//  Send comman to LCD display
//**************************************************************************************************
//
void IIC_Writecmd(uint8_t com) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af04      	add	r7, sp, #16
 800060e:	0002      	movs	r2, r0
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x00, 1, &com, 1, 100);
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <IIC_Writecmd+0x2c>)
 8000616:	2364      	movs	r3, #100	; 0x64
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	2301      	movs	r3, #1
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2301      	movs	r3, #1
 8000624:	2200      	movs	r2, #0
 8000626:	2178      	movs	r1, #120	; 0x78
 8000628:	f002 f806 	bl	8002638 <HAL_I2C_Mem_Write>
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000a8 	.word	0x200000a8

08000638 <IIC_Writedata>:

void IIC_Writedata(uint8_t data) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af04      	add	r7, sp, #16
 800063e:	0002      	movs	r2, r0
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x40, 1, &data, 1, 100);
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <IIC_Writedata+0x2c>)
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	2301      	movs	r3, #1
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	2240      	movs	r2, #64	; 0x40
 8000656:	2178      	movs	r1, #120	; 0x78
 8000658:	f001 ffee 	bl	8002638 <HAL_I2C_Mem_Write>
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b002      	add	sp, #8
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000a8 	.word	0x200000a8

08000668 <OLED_Clear>:

void OLED_Clear(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++) {
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e022      	b.n	80006bc <OLED_Clear+0x54>
		IIC_Writecmd(0xb0 + i);
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	3b50      	subs	r3, #80	; 0x50
 800067c:	b2db      	uxtb	r3, r3
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff ffc2 	bl	8000608 <IIC_Writecmd>
		IIC_Writecmd(0x00);
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ffbf 	bl	8000608 <IIC_Writecmd>
		IIC_Writecmd(0x10);
 800068a:	2010      	movs	r0, #16
 800068c:	f7ff ffbc 	bl	8000608 <IIC_Writecmd>
		for (n = 0; n < 128; n++)
 8000690:	1dbb      	adds	r3, r7, #6
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e007      	b.n	80006a8 <OLED_Clear+0x40>
			IIC_Writedata(0);
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ffcd 	bl	8000638 <IIC_Writedata>
		for (n = 0; n < 128; n++)
 800069e:	1dbb      	adds	r3, r7, #6
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	1dbb      	adds	r3, r7, #6
 80006a4:	3201      	adds	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	1dbb      	adds	r3, r7, #6
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	daf2      	bge.n	8000698 <OLED_Clear+0x30>
	for (i = 0; i < 8; i++) {
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	3201      	adds	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b07      	cmp	r3, #7
 80006c2:	d9d8      	bls.n	8000676 <OLED_Clear+0xe>
	}
	OLED_Set_Pos(0, 0);
 80006c4:	2100      	movs	r1, #0
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f865 	bl	8000796 <OLED_Set_Pos>
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_init>:
//
//**************************************************************************************************
//	LCD display initialization
//**************************************************************************************************
//
void lcd_init(I2C_HandleTypeDef *h) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	IIC_Writecmd(0xAE); //--turn off oled panel
 80006dc:	20ae      	movs	r0, #174	; 0xae
 80006de:	f7ff ff93 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x00); //---set low column address
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff ff90 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x10); //---set high column address
 80006e8:	2010      	movs	r0, #16
 80006ea:	f7ff ff8d 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x40); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80006ee:	2040      	movs	r0, #64	; 0x40
 80006f0:	f7ff ff8a 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x81); //--set contrast control register
 80006f4:	2081      	movs	r0, #129	; 0x81
 80006f6:	f7ff ff87 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xCF); // Set SEG Output Current Brightness
 80006fa:	20cf      	movs	r0, #207	; 0xcf
 80006fc:	f7ff ff84 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xA1); //--Set SEG/Column Mapping
 8000700:	20a1      	movs	r0, #161	; 0xa1
 8000702:	f7ff ff81 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xC8); //Set COM/Row Scan Direction
 8000706:	20c8      	movs	r0, #200	; 0xc8
 8000708:	f7ff ff7e 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xA6); //--set normal display
 800070c:	20a6      	movs	r0, #166	; 0xa6
 800070e:	f7ff ff7b 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xA8); //--set multiplex ratio(1 to 64)
 8000712:	20a8      	movs	r0, #168	; 0xa8
 8000714:	f7ff ff78 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x3f); //--1/64 duty
 8000718:	203f      	movs	r0, #63	; 0x3f
 800071a:	f7ff ff75 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xD3); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800071e:	20d3      	movs	r0, #211	; 0xd3
 8000720:	f7ff ff72 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x00); //-not offset
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff6f 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xd5); //--set display clock divide ratio/oscillator frequency
 800072a:	20d5      	movs	r0, #213	; 0xd5
 800072c:	f7ff ff6c 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x80); //--set divide ratio, Set Clock as 100 Frames/Sec
 8000730:	2080      	movs	r0, #128	; 0x80
 8000732:	f7ff ff69 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xD9); //--set pre-charge period
 8000736:	20d9      	movs	r0, #217	; 0xd9
 8000738:	f7ff ff66 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xF1); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800073c:	20f1      	movs	r0, #241	; 0xf1
 800073e:	f7ff ff63 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xDA); //--set com pins hardware configuration
 8000742:	20da      	movs	r0, #218	; 0xda
 8000744:	f7ff ff60 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x12);
 8000748:	2012      	movs	r0, #18
 800074a:	f7ff ff5d 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xDB); //--set vcomh
 800074e:	20db      	movs	r0, #219	; 0xdb
 8000750:	f7ff ff5a 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x40); //Set VCOM Deselect Level
 8000754:	2040      	movs	r0, #64	; 0x40
 8000756:	f7ff ff57 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x20); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800075a:	2020      	movs	r0, #32
 800075c:	f7ff ff54 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x02); //
 8000760:	2002      	movs	r0, #2
 8000762:	f7ff ff51 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x8D); //--set Charge Pump enable/disable
 8000766:	208d      	movs	r0, #141	; 0x8d
 8000768:	f7ff ff4e 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0x14); //--set(0x10) disable
 800076c:	2014      	movs	r0, #20
 800076e:	f7ff ff4b 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xA4); // Disable Entire Display On (0xa4/0xa5)
 8000772:	20a4      	movs	r0, #164	; 0xa4
 8000774:	f7ff ff48 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xA6); // Disable Inverse Display On (0xa6/a7)
 8000778:	20a6      	movs	r0, #166	; 0xa6
 800077a:	f7ff ff45 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(0xAF); //--turn on oled panel
 800077e:	20af      	movs	r0, #175	; 0xaf
 8000780:	f7ff ff42 	bl	8000608 <IIC_Writecmd>

	IIC_Writecmd(0xAF); /*display ON*/
 8000784:	20af      	movs	r0, #175	; 0xaf
 8000786:	f7ff ff3f 	bl	8000608 <IIC_Writecmd>
	OLED_Clear();
 800078a:	f7ff ff6d 	bl	8000668 <OLED_Clear>
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}

08000796 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y) {
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	0002      	movs	r2, r0
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	1c0a      	adds	r2, r1, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	IIC_Writecmd(0xb0 + y);
 80007a8:	1dbb      	adds	r3, r7, #6
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3b50      	subs	r3, #80	; 0x50
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff ff29 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd(((x & 0xf0) >> 4) | 0x10);
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	091b      	lsrs	r3, r3, #4
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2210      	movs	r2, #16
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff1f 	bl	8000608 <IIC_Writecmd>
	IIC_Writecmd((x & 0x0f) | 0x01);
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	220e      	movs	r2, #14
 80007d2:	4013      	ands	r3, r2
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	2201      	movs	r2, #1
 80007d8:	4313      	orrs	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff ff12 	bl	8000608 <IIC_Writecmd>
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}

080007ec <OLED_ShowChar>:
	else if (p[x + ((y / 8) * 128)] & 0x01 << (y % 8))
		p[x + ((y / 8) * 128)] ^= 0x01 << (y % 8);
	IIC_Writedata(p[x + ((y / 8) * 128)]);
}

void OLED_ShowChar(uint32_t x, uint32_t y, char chr, uint8_t mode) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	0019      	movs	r1, r3
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	1c0a      	adds	r2, r1, #0
 8000800:	701a      	strb	r2, [r3, #0]
	unsigned char c = chr - ' ';
 8000802:	2316      	movs	r3, #22
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	1dfa      	adds	r2, r7, #7
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	3a20      	subs	r2, #32
 800080c:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	if (x > Max_Column - 1) {
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b7f      	cmp	r3, #127	; 0x7f
 8000812:	d904      	bls.n	800081e <OLED_ShowChar+0x32>
		x = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
		y = y + 2;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	3302      	adds	r3, #2
 800081c:	60bb      	str	r3, [r7, #8]
	}
	OLED_Set_Pos(x, y);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff ffb4 	bl	8000796 <OLED_Set_Pos>
	for (i = 0; i < 6; i++)
 800082e:	2317      	movs	r3, #23
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e029      	b.n	800088c <OLED_ShowChar+0xa0>
		IIC_Writedata((mode) ? F6x8[c][i] : ~F6x8[c][i]);
 8000838:	1dbb      	adds	r3, r7, #6
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d00d      	beq.n	800085c <OLED_ShowChar+0x70>
 8000840:	2316      	movs	r3, #22
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781a      	ldrb	r2, [r3, #0]
 8000846:	2317      	movs	r3, #23
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	7819      	ldrb	r1, [r3, #0]
 800084c:	4814      	ldr	r0, [pc, #80]	; (80008a0 <OLED_ShowChar+0xb4>)
 800084e:	0013      	movs	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	189b      	adds	r3, r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	18c3      	adds	r3, r0, r3
 8000858:	5c5b      	ldrb	r3, [r3, r1]
 800085a:	e00e      	b.n	800087a <OLED_ShowChar+0x8e>
 800085c:	2316      	movs	r3, #22
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	2317      	movs	r3, #23
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	7819      	ldrb	r1, [r3, #0]
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <OLED_ShowChar+0xb4>)
 800086a:	0013      	movs	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	189b      	adds	r3, r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	18c3      	adds	r3, r0, r3
 8000874:	5c5b      	ldrb	r3, [r3, r1]
 8000876:	43db      	mvns	r3, r3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff fedc 	bl	8000638 <IIC_Writedata>
	for (i = 0; i < 6; i++)
 8000880:	2117      	movs	r1, #23
 8000882:	187b      	adds	r3, r7, r1
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	187b      	adds	r3, r7, r1
 8000888:	3201      	adds	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	2317      	movs	r3, #23
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b05      	cmp	r3, #5
 8000894:	d9d0      	bls.n	8000838 <OLED_ShowChar+0x4c>
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b006      	add	sp, #24
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	08004ec4 	.word	0x08004ec4

080008a4 <OLED_ShowString>:

void OLED_ShowString(uint32_t x, uint32_t y, char *chr, uint8_t mode) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	001a      	movs	r2, r3
 80008b2:	1cfb      	adds	r3, r7, #3
 80008b4:	701a      	strb	r2, [r3, #0]
	unsigned char j = 0;
 80008b6:	2317      	movs	r3, #23
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
	while (chr[j] != '\0') {
 80008be:	e035      	b.n	800092c <OLED_ShowString+0x88>
		if (chr[j] == '\n') {
 80008c0:	2317      	movs	r3, #23
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b0a      	cmp	r3, #10
 80008ce:	d105      	bne.n	80008dc <OLED_ShowString+0x38>
			x = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
			y++;
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	e021      	b.n	8000920 <OLED_ShowString+0x7c>
		} else if (chr[j] == '\f') {
 80008dc:	2317      	movs	r3, #23
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	18d3      	adds	r3, r2, r3
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b0c      	cmp	r3, #12
 80008ea:	d102      	bne.n	80008f2 <OLED_ShowString+0x4e>
			OLED_Clear();
 80008ec:	f7ff febc 	bl	8000668 <OLED_Clear>
 80008f0:	e016      	b.n	8000920 <OLED_ShowString+0x7c>
		} else {
			OLED_ShowChar(x, y, chr[j], mode);
 80008f2:	2317      	movs	r3, #23
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	1cfb      	adds	r3, r7, #3
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff ff71 	bl	80007ec <OLED_ShowChar>
			x += 6;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	3306      	adds	r3, #6
 800090e:	60fb      	str	r3, [r7, #12]
			if (x > 120) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b78      	cmp	r3, #120	; 0x78
 8000914:	d904      	bls.n	8000920 <OLED_ShowString+0x7c>
				x = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
				y++;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3301      	adds	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
			}
		}
		j++;
 8000920:	2117      	movs	r1, #23
 8000922:	187b      	adds	r3, r7, r1
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	187b      	adds	r3, r7, r1
 8000928:	3201      	adds	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
	while (chr[j] != '\0') {
 800092c:	2317      	movs	r3, #23
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	18d3      	adds	r3, r2, r3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1c1      	bne.n	80008c0 <OLED_ShowString+0x1c>
	}
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b006      	add	sp, #24
 8000944:	bd80      	pop	{r7, pc}

08000946 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f000 fcd5 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f813 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f000 fa83 	bl	8000e5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000956:	f000 fa63 	bl	8000e20 <MX_DMA_Init>
  MX_ADC_Init();
 800095a:	f000 f87f 	bl	8000a5c <MX_ADC_Init>
  MX_TIM2_Init();
 800095e:	f000 f92f 	bl	8000bc0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000962:	f000 f9b5 	bl	8000cd0 <MX_TIM6_Init>
  MX_TIM22_Init();
 8000966:	f000 f9ef 	bl	8000d48 <MX_TIM22_Init>
  MX_I2C1_Init();
 800096a:	f000 f8e9 	bl	8000b40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  appSetup();
 800096e:	f7ff fdb3 	bl	80004d8 <appSetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  appLoop();
 8000972:	f7ff fddb 	bl	800052c <appLoop>
 8000976:	e7fc      	b.n	8000972 <main+0x2c>

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b09d      	sub	sp, #116	; 0x74
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	2438      	movs	r4, #56	; 0x38
 8000980:	193b      	adds	r3, r7, r4
 8000982:	0018      	movs	r0, r3
 8000984:	2338      	movs	r3, #56	; 0x38
 8000986:	001a      	movs	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f003 fe5d 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098e:	2324      	movs	r3, #36	; 0x24
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	0018      	movs	r0, r3
 8000994:	2314      	movs	r3, #20
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f003 fe55 	bl	8004648 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	0018      	movs	r0, r3
 80009a2:	2320      	movs	r3, #32
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f003 fe4e 	bl	8004648 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <SystemClock_Config+0xdc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <SystemClock_Config+0xe0>)
 80009b2:	401a      	ands	r2, r3
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <SystemClock_Config+0xdc>)
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	0109      	lsls	r1, r1, #4
 80009ba:	430a      	orrs	r2, r1
 80009bc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009be:	0021      	movs	r1, r4
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2202      	movs	r2, #2
 80009c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2210      	movs	r2, #16
 80009d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2202      	movs	r2, #2
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	02d2      	lsls	r2, r2, #11
 80009e4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	03d2      	lsls	r2, r2, #15
 80009ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 f9c3 	bl	8002d7c <HAL_RCC_OscConfig>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x86>
  {
    Error_Handler();
 80009fa:	f000 fa73 	bl	8000ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	2124      	movs	r1, #36	; 0x24
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	220f      	movs	r2, #15
 8000a04:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2203      	movs	r2, #3
 8000a0a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2101      	movs	r1, #1
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 fd6e 	bl	8003504 <HAL_RCC_ClockConfig>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a2c:	f000 fa5a 	bl	8000ee4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2208      	movs	r2, #8
 8000a34:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f002 ff4e 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a48:	f000 fa4c 	bl	8000ee4 <Error_Handler>
  }
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b01d      	add	sp, #116	; 0x74
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	40007000 	.word	0x40007000
 8000a58:	ffffe7ff 	.word	0xffffe7ff

08000a5c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	003b      	movs	r3, r7
 8000a64:	0018      	movs	r0, r3
 8000a66:	2308      	movs	r3, #8
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f003 fdec 	bl	8004648 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a70:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000a72:	4a31      	ldr	r2, [pc, #196]	; (8000b38 <MX_ADC_Init+0xdc>)
 8000a74:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	05d2      	lsls	r2, r2, #23
 8000a82:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000aa6:	2221      	movs	r2, #33	; 0x21
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000abc:	222c      	movs	r2, #44	; 0x2c
 8000abe:	2101      	movs	r1, #1
 8000ac0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 fc78 	bl	80013d8 <HAL_ADC_Init>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000aec:	f000 f9fa 	bl	8000ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000af0:	003b      	movs	r3, r7
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000af6:	003b      	movs	r3, r7
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	0152      	lsls	r2, r2, #5
 8000afc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000afe:	003a      	movs	r2, r7
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 ff31 	bl	800196c <HAL_ADC_ConfigChannel>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000b0e:	f000 f9e9 	bl	8000ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b12:	003b      	movs	r3, r7
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <MX_ADC_Init+0xe0>)
 8000b16:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b18:	003a      	movs	r2, r7
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_ADC_Init+0xd8>)
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 ff24 	bl	800196c <HAL_ADC_ConfigChannel>
 8000b24:	1e03      	subs	r3, r0, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000b28:	f000 f9dc 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200001fc 	.word	0x200001fc
 8000b38:	40012400 	.word	0x40012400
 8000b3c:	04000002 	.word	0x04000002

08000b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <MX_I2C1_Init+0x78>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <MX_I2C1_Init+0x7c>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f001 fcc5 	bl	800250c <HAL_I2C_Init>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b86:	f000 f9ad 	bl	8000ee4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f002 f85c 	bl	8002c4c <HAL_I2CEx_ConfigAnalogFilter>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b98:	f000 f9a4 	bl	8000ee4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f002 f89f 	bl	8002ce4 <HAL_I2CEx_ConfigDigitalFilter>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d001      	beq.n	8000bae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000baa:	f000 f99b 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000a8 	.word	0x200000a8
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	00707cbb 	.word	0x00707cbb

08000bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	2318      	movs	r3, #24
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	2310      	movs	r3, #16
 8000bce:	001a      	movs	r2, r3
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f003 fd39 	bl	8004648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2308      	movs	r3, #8
 8000bde:	001a      	movs	r2, r3
 8000be0:	2100      	movs	r1, #0
 8000be2:	f003 fd31 	bl	8004648 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be6:	003b      	movs	r3, r7
 8000be8:	0018      	movs	r0, r3
 8000bea:	2310      	movs	r3, #16
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f003 fd2a 	bl	8004648 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf4:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	05d2      	lsls	r2, r2, #23
 8000bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000bfc:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000bfe:	221f      	movs	r2, #31
 8000c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000c0a:	4a30      	ldr	r2, [pc, #192]	; (8000ccc <MX_TIM2_Init+0x10c>)
 8000c0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 ffa5 	bl	8003b6c <HAL_TIM_Base_Init>
 8000c22:	1e03      	subs	r3, r0, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 f95d 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2a:	2118      	movs	r1, #24
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	0152      	lsls	r2, r2, #5
 8000c32:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c34:	187a      	adds	r2, r7, r1
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f003 f9a2 	bl	8003f84 <HAL_TIM_ConfigClockSource>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000c44:	f000 f94e 	bl	8000ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f003 f812 	bl	8003c74 <HAL_TIM_PWM_Init>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c54:	f000 f946 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c58:	2110      	movs	r1, #16
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c66:	187a      	adds	r2, r7, r1
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f003 fc69 	bl	8004544 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000c76:	f000 f935 	bl	8000ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	2260      	movs	r2, #96	; 0x60
 8000c7e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c80:	003b      	movs	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c86:	003b      	movs	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8c:	003b      	movs	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c92:	0039      	movs	r1, r7
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f003 f8b7 	bl	8003e0c <HAL_TIM_PWM_ConfigChannel>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000ca2:	f000 f91f 	bl	8000ee4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	699a      	ldr	r2, [r3, #24]
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	438a      	bics	r2, r1
 8000cb4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <MX_TIM2_Init+0x108>)
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f000 fa21 	bl	8001100 <HAL_TIM_MspPostInit>

}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b00a      	add	sp, #40	; 0x28
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000174 	.word	0x20000174
 8000ccc:	000003e7 	.word	0x000003e7

08000cd0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	0018      	movs	r0, r3
 8000cda:	2308      	movs	r3, #8
 8000cdc:	001a      	movs	r2, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f003 fcb2 	bl	8004648 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_TIM6_Init+0x6c>)
 8000ce6:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <MX_TIM6_Init+0x70>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_TIM6_Init+0x6c>)
 8000cec:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <MX_TIM6_Init+0x74>)
 8000cee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_TIM6_Init+0x6c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_TIM6_Init+0x6c>)
 8000cf8:	2263      	movs	r2, #99	; 0x63
 8000cfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_TIM6_Init+0x6c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_TIM6_Init+0x6c>)
 8000d04:	0018      	movs	r0, r3
 8000d06:	f002 ff31 	bl	8003b6c <HAL_TIM_Base_Init>
 8000d0a:	1e03      	subs	r3, r0, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d0e:	f000 f8e9 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d12:	003b      	movs	r3, r7
 8000d14:	2220      	movs	r2, #32
 8000d16:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d18:	003b      	movs	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d1e:	003a      	movs	r2, r7
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_TIM6_Init+0x6c>)
 8000d22:	0011      	movs	r1, r2
 8000d24:	0018      	movs	r0, r3
 8000d26:	f003 fc0d 	bl	8004544 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000d2e:	f000 f8d9 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000134 	.word	0x20000134
 8000d40:	40001000 	.word	0x40001000
 8000d44:	00007cff 	.word	0x00007cff

08000d48 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4e:	2310      	movs	r3, #16
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	0018      	movs	r0, r3
 8000d54:	2308      	movs	r3, #8
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f003 fc75 	bl	8004648 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5e:	003b      	movs	r3, r7
 8000d60:	0018      	movs	r0, r3
 8000d62:	2310      	movs	r3, #16
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f003 fc6e 	bl	8004648 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000d6c:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000d6e:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <MX_TIM22_Init+0xcc>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000d74:	221f      	movs	r2, #31
 8000d76:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1000-1;
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000d80:	4a25      	ldr	r2, [pc, #148]	; (8000e18 <MX_TIM22_Init+0xd0>)
 8000d82:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 ff6e 	bl	8003c74 <HAL_TIM_PWM_Init>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f000 f8a2 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da0:	2110      	movs	r1, #16
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000dae:	187a      	adds	r2, r7, r1
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f003 fbc5 	bl	8004544 <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM22_Init+0x7a>
  {
    Error_Handler();
 8000dbe:	f000 f891 	bl	8000ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2260      	movs	r2, #96	; 0x60
 8000dc6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dc8:	003b      	movs	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dda:	0039      	movs	r1, r7
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000dde:	2204      	movs	r2, #4
 8000de0:	0018      	movs	r0, r3
 8000de2:	f003 f813 	bl	8003e0c <HAL_TIM_PWM_ConfigChannel>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 8000dea:	f000 f87b 	bl	8000ee4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim22, TIM_CHANNEL_2);
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	699a      	ldr	r2, [r3, #24]
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4908      	ldr	r1, [pc, #32]	; (8000e1c <MX_TIM22_Init+0xd4>)
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <MX_TIM22_Init+0xc8>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 f97d 	bl	8001100 <HAL_TIM_MspPostInit>

}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b006      	add	sp, #24
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	200000f4 	.word	0x200000f4
 8000e14:	40011400 	.word	0x40011400
 8000e18:	000003e7 	.word	0x000003e7
 8000e1c:	fffff7ff 	.word	0xfffff7ff

08000e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_DMA_Init+0x38>)
 8000e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_DMA_Init+0x38>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_DMA_Init+0x38>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	2201      	movs	r2, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2009      	movs	r0, #9
 8000e44:	f000 ffc8 	bl	8001dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e48:	2009      	movs	r0, #9
 8000e4a:	f000 ffda 	bl	8001e02 <HAL_NVIC_EnableIRQ>

}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	40021000 	.word	0x40021000

08000e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	240c      	movs	r4, #12
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	0018      	movs	r0, r3
 8000e68:	2314      	movs	r3, #20
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f003 fbeb 	bl	8004648 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_GPIO_Init+0x84>)
 8000e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_GPIO_Init+0x84>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_GPIO_Init+0x84>)
 8000e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e82:	2201      	movs	r2, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_GPIO_Init+0x84>)
 8000e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_GPIO_Init+0x84>)
 8000e90:	2102      	movs	r1, #2
 8000e92:	430a      	orrs	r2, r1
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_GPIO_Init+0x84>)
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2118      	movs	r1, #24
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f001 faf6 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 8000eb0:	0021      	movs	r1, r4
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2218      	movs	r2, #24
 8000eb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2201      	movs	r2, #1
 8000ebc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	187a      	adds	r2, r7, r1
 8000ecc:	23a0      	movs	r3, #160	; 0xa0
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f001 f96c 	bl	80021b0 <HAL_GPIO_Init>

}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b009      	add	sp, #36	; 0x24
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_MspInit+0x24>)
 8000ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_MspInit+0x24>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	430a      	orrs	r2, r1
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <HAL_MspInit+0x24>)
 8000f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_MspInit+0x24>)
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	0549      	lsls	r1, r1, #21
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	240c      	movs	r4, #12
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	0018      	movs	r0, r3
 8000f26:	2314      	movs	r3, #20
 8000f28:	001a      	movs	r2, r3
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	f003 fb8c 	bl	8004648 <memset>
  if(hadc->Instance==ADC1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <HAL_ADC_MspInit+0xd8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d155      	bne.n	8000fe6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <HAL_ADC_MspInit+0xdc>)
 8000f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <HAL_ADC_MspInit+0xdc>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0089      	lsls	r1, r1, #2
 8000f44:	430a      	orrs	r2, r1
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <HAL_ADC_MspInit+0xdc>)
 8000f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <HAL_ADC_MspInit+0xdc>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	430a      	orrs	r2, r1
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <HAL_ADC_MspInit+0xdc>)
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2203      	movs	r2, #3
 8000f64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2203      	movs	r2, #3
 8000f6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	193a      	adds	r2, r7, r4
 8000f74:	23a0      	movs	r3, #160	; 0xa0
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f001 f918 	bl	80021b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <HAL_ADC_MspInit+0xe4>)
 8000f84:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	0052      	lsls	r2, r2, #1
 8000fa4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f000 ff3d 	bl	8001e3c <HAL_DMA_Init>
 8000fc2:	1e03      	subs	r3, r0, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000fc6:	f7ff ff8d 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000fce:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_ADC_MspInit+0xe0>)
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	200c      	movs	r0, #12
 8000fdc:	f000 fefc 	bl	8001dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000fe0:	200c      	movs	r0, #12
 8000fe2:	f000 ff0e 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b009      	add	sp, #36	; 0x24
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	40012400 	.word	0x40012400
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	200001b4 	.word	0x200001b4
 8000ffc:	40020008 	.word	0x40020008

08001000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	240c      	movs	r4, #12
 800100a:	193b      	adds	r3, r7, r4
 800100c:	0018      	movs	r0, r3
 800100e:	2314      	movs	r3, #20
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f003 fb18 	bl	8004648 <memset>
  if(hi2c->Instance==I2C1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_I2C_MspInit+0x7c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d128      	bne.n	8001074 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_I2C_MspInit+0x80>)
 8001024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_I2C_MspInit+0x80>)
 8001028:	2102      	movs	r1, #2
 800102a:	430a      	orrs	r2, r1
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_I2C_MspInit+0x80>)
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	2202      	movs	r2, #2
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800103a:	0021      	movs	r1, r4
 800103c:	187b      	adds	r3, r7, r1
 800103e:	22c0      	movs	r2, #192	; 0xc0
 8001040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2212      	movs	r2, #18
 8001046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2201      	movs	r2, #1
 800104c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2203      	movs	r2, #3
 8001052:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2201      	movs	r2, #1
 8001058:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	187b      	adds	r3, r7, r1
 800105c:	4a09      	ldr	r2, [pc, #36]	; (8001084 <HAL_I2C_MspInit+0x84>)
 800105e:	0019      	movs	r1, r3
 8001060:	0010      	movs	r0, r2
 8001062:	f001 f8a5 	bl	80021b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_I2C_MspInit+0x80>)
 8001068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_I2C_MspInit+0x80>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	0389      	lsls	r1, r1, #14
 8001070:	430a      	orrs	r2, r1
 8001072:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b009      	add	sp, #36	; 0x24
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	40005400 	.word	0x40005400
 8001080:	40021000 	.word	0x40021000
 8001084:	50000400 	.word	0x50000400

08001088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	429a      	cmp	r2, r3
 800109a:	d106      	bne.n	80010aa <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_TIM_Base_MspInit+0x40>)
 800109e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_TIM_Base_MspInit+0x40>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	430a      	orrs	r2, r1
 80010a6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010a8:	e00a      	b.n	80010c0 <HAL_TIM_Base_MspInit+0x38>
  else if(htim_base->Instance==TIM6)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_TIM_Base_MspInit+0x44>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d105      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_TIM_Base_MspInit+0x40>)
 80010b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_TIM_Base_MspInit+0x40>)
 80010ba:	2110      	movs	r1, #16
 80010bc:	430a      	orrs	r2, r1
 80010be:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40001000 	.word	0x40001000

080010d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM22)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_TIM_PWM_MspInit+0x28>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d105      	bne.n	80010ee <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM22_MspInit 0 */

  /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_TIM_PWM_MspInit+0x2c>)
 80010e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_TIM_PWM_MspInit+0x2c>)
 80010e8:	2120      	movs	r1, #32
 80010ea:	430a      	orrs	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	40011400 	.word	0x40011400
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b08b      	sub	sp, #44	; 0x2c
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	2414      	movs	r4, #20
 800110a:	193b      	adds	r3, r7, r4
 800110c:	0018      	movs	r0, r3
 800110e:	2314      	movs	r3, #20
 8001110:	001a      	movs	r2, r3
 8001112:	2100      	movs	r1, #0
 8001114:	f003 fa98 	bl	8004648 <memset>
  if(htim->Instance==TIM2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	05db      	lsls	r3, r3, #23
 8001120:	429a      	cmp	r2, r3
 8001122:	d123      	bne.n	800116c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_TIM_MspPostInit+0xc4>)
 8001126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_TIM_MspPostInit+0xc4>)
 800112a:	2101      	movs	r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_TIM_MspPostInit+0xc4>)
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	2201      	movs	r2, #1
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800113c:	0021      	movs	r1, r4
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2220      	movs	r2, #32
 8001142:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2202      	movs	r2, #2
 8001148:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2205      	movs	r2, #5
 800115a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	187a      	adds	r2, r7, r1
 800115e:	23a0      	movs	r3, #160	; 0xa0
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	0011      	movs	r1, r2
 8001164:	0018      	movs	r0, r3
 8001166:	f001 f823 	bl	80021b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 800116a:	e027      	b.n	80011bc <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM22)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <HAL_TIM_MspPostInit+0xc8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d122      	bne.n	80011bc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_TIM_MspPostInit+0xc4>)
 8001178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_TIM_MspPostInit+0xc4>)
 800117c:	2101      	movs	r1, #1
 800117e:	430a      	orrs	r2, r1
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_TIM_MspPostInit+0xc4>)
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	2201      	movs	r2, #1
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800118e:	2114      	movs	r1, #20
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2202      	movs	r2, #2
 800119a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2205      	movs	r2, #5
 80011ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	187a      	adds	r2, r7, r1
 80011b0:	23a0      	movs	r3, #160	; 0xa0
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 fffa 	bl	80021b0 <HAL_GPIO_Init>
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b00b      	add	sp, #44	; 0x2c
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40011400 	.word	0x40011400

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f8d6 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <DMA1_Channel1_IRQHandler+0x14>)
 8001202:	0018      	movs	r0, r3
 8001204:	f000 fef8 	bl	8001ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	200001b4 	.word	0x200001b4

08001214 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <ADC1_COMP_IRQHandler+0x14>)
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fad2 	bl	80017c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	200001fc 	.word	0x200001fc

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f003 f9ca 	bl	80045f4 <__errno>
 8001260:	0003      	movs	r3, r0
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001266:	2301      	movs	r3, #1
 8001268:	425b      	negs	r3, r3
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	18d2      	adds	r2, r2, r3
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <_sbrk+0x64>)
 800127c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	b006      	add	sp, #24
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20002000 	.word	0x20002000
 800128c:	00000400 	.word	0x00000400
 8001290:	2000009c 	.word	0x2000009c
 8001294:	20000270 	.word	0x20000270

08001298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80012a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopForever+0xe>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopForever+0x16>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012ce:	f7ff ffe3 	bl	8001298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f003 f995 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff fb36 	bl	8000946 <main>

080012da <LoopForever>:

LoopForever:
    b LoopForever
 80012da:	e7fe      	b.n	80012da <LoopForever>
   ldr   r0, =_estack
 80012dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012e8:	08005148 	.word	0x08005148
  ldr r2, =_sbss
 80012ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012f0:	2000026c 	.word	0x2000026c

080012f4 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <DMA1_Channel2_3_IRQHandler>
	...

080012f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_Init+0x3c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_Init+0x3c>)
 800130a:	2140      	movs	r1, #64	; 0x40
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f811 	bl	8001338 <HAL_InitTick>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d003      	beq.n	8001322 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e001      	b.n	8001326 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001322:	f7ff fde5 	bl	8000ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
}
 800132a:	0018      	movs	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_InitTick+0x5c>)
 8001342:	681c      	ldr	r4, [r3, #0]
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_InitTick+0x60>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	0019      	movs	r1, r3
 800134a:	23fa      	movs	r3, #250	; 0xfa
 800134c:	0098      	lsls	r0, r3, #2
 800134e:	f7fe fee5 	bl	800011c <__udivsi3>
 8001352:	0003      	movs	r3, r0
 8001354:	0019      	movs	r1, r3
 8001356:	0020      	movs	r0, r4
 8001358:	f7fe fee0 	bl	800011c <__udivsi3>
 800135c:	0003      	movs	r3, r0
 800135e:	0018      	movs	r0, r3
 8001360:	f000 fd5f 	bl	8001e22 <HAL_SYSTICK_Config>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e00f      	b.n	800138c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d80b      	bhi.n	800138a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	2301      	movs	r3, #1
 8001376:	425b      	negs	r3, r3
 8001378:	2200      	movs	r2, #0
 800137a:	0018      	movs	r0, r3
 800137c:	f000 fd2c 	bl	8001dd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_InitTick+0x64>)
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b003      	add	sp, #12
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	20000000 	.word	0x20000000
 8001398:	20000008 	.word	0x20000008
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_IncTick+0x1c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	001a      	movs	r2, r3
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_IncTick+0x20>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	18d2      	adds	r2, r2, r3
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_IncTick+0x20>)
 80013b2:	601a      	str	r2, [r3, #0]
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000258 	.word	0x20000258

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <HAL_GetTick+0x10>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	20000258 	.word	0x20000258

080013d8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e159      	b.n	800169e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10a      	bne.n	8001408 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2250      	movs	r2, #80	; 0x50
 80013fc:	2100      	movs	r1, #0
 80013fe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff fd88 	bl	8000f18 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140c:	2210      	movs	r2, #16
 800140e:	4013      	ands	r3, r2
 8001410:	2b10      	cmp	r3, #16
 8001412:	d005      	beq.n	8001420 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2204      	movs	r2, #4
 800141c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800141e:	d00b      	beq.n	8001438 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	2210      	movs	r2, #16
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2250      	movs	r2, #80	; 0x50
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e132      	b.n	800169e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	4a9a      	ldr	r2, [pc, #616]	; (80016a8 <HAL_ADC_Init+0x2d0>)
 800143e:	4013      	ands	r3, r2
 8001440:	2202      	movs	r2, #2
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2203      	movs	r2, #3
 8001450:	4013      	ands	r3, r2
 8001452:	2b01      	cmp	r3, #1
 8001454:	d108      	bne.n	8001468 <HAL_ADC_Init+0x90>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	4013      	ands	r3, r2
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_ADC_Init+0x90>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_ADC_Init+0x92>
 8001468:	2300      	movs	r3, #0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d149      	bne.n	8001502 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	23c0      	movs	r3, #192	; 0xc0
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	429a      	cmp	r2, r3
 8001478:	d00b      	beq.n	8001492 <HAL_ADC_Init+0xba>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	429a      	cmp	r2, r3
 8001484:	d005      	beq.n	8001492 <HAL_ADC_Init+0xba>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	061b      	lsls	r3, r3, #24
 800148e:	429a      	cmp	r2, r3
 8001490:	d111      	bne.n	80014b6 <HAL_ADC_Init+0xde>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	0892      	lsrs	r2, r2, #2
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	e014      	b.n	80014e0 <HAL_ADC_Init+0x108>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	0892      	lsrs	r2, r2, #2
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	4b79      	ldr	r3, [pc, #484]	; (80016ac <HAL_ADC_Init+0x2d4>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b78      	ldr	r3, [pc, #480]	; (80016ac <HAL_ADC_Init+0x2d4>)
 80014cc:	4978      	ldr	r1, [pc, #480]	; (80016b0 <HAL_ADC_Init+0x2d8>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_ADC_Init+0x2d4>)
 80014d4:	6819      	ldr	r1, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4b74      	ldr	r3, [pc, #464]	; (80016ac <HAL_ADC_Init+0x2d4>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2118      	movs	r1, #24
 80014ec:	438a      	bics	r2, r1
 80014ee:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68d9      	ldr	r1, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001502:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_ADC_Init+0x2d4>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b69      	ldr	r3, [pc, #420]	; (80016ac <HAL_ADC_Init+0x2d4>)
 8001508:	496a      	ldr	r1, [pc, #424]	; (80016b4 <HAL_ADC_Init+0x2dc>)
 800150a:	400a      	ands	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_ADC_Init+0x2d4>)
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001516:	065a      	lsls	r2, r3, #25
 8001518:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HAL_ADC_Init+0x2d4>)
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	055b      	lsls	r3, r3, #21
 8001528:	4013      	ands	r3, r2
 800152a:	d108      	bne.n	800153e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	0549      	lsls	r1, r1, #21
 800153a:	430a      	orrs	r2, r1
 800153c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	495b      	ldr	r1, [pc, #364]	; (80016b8 <HAL_ADC_Init+0x2e0>)
 800154a:	400a      	ands	r2, r1
 800154c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68d9      	ldr	r1, [r3, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d101      	bne.n	8001564 <HAL_ADC_Init+0x18c>
 8001560:	2304      	movs	r3, #4
 8001562:	e000      	b.n	8001566 <HAL_ADC_Init+0x18e>
 8001564:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001566:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2020      	movs	r0, #32
 800156c:	5c1b      	ldrb	r3, [r3, r0]
 800156e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001570:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	202c      	movs	r0, #44	; 0x2c
 8001576:	5c1b      	ldrb	r3, [r3, r0]
 8001578:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800157a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001580:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001588:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001590:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159e:	23c2      	movs	r3, #194	; 0xc2
 80015a0:	33ff      	adds	r3, #255	; 0xff
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d00b      	beq.n	80015be <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68d9      	ldr	r1, [r3, #12]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2221      	movs	r2, #33	; 0x21
 80015c2:	5c9b      	ldrb	r3, [r3, r2]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d11a      	bne.n	80015fe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	5c9b      	ldrb	r3, [r3, r2]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	0249      	lsls	r1, r1, #9
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	e00b      	b.n	80015fe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	2220      	movs	r2, #32
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	2201      	movs	r2, #1
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	2b01      	cmp	r3, #1
 8001604:	d11f      	bne.n	8001646 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	492a      	ldr	r1, [pc, #168]	; (80016bc <HAL_ADC_Init+0x2e4>)
 8001612:	400a      	ands	r2, r1
 8001614:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6919      	ldr	r1, [r3, #16]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001624:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800162a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2101      	movs	r1, #1
 8001640:	430a      	orrs	r2, r1
 8001642:	611a      	str	r2, [r3, #16]
 8001644:	e00e      	b.n	8001664 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2101      	movs	r1, #1
 8001660:	438a      	bics	r2, r1
 8001662:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2107      	movs	r1, #7
 8001670:	438a      	bics	r2, r1
 8001672:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6959      	ldr	r1, [r3, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001690:	2203      	movs	r2, #3
 8001692:	4393      	bics	r3, r2
 8001694:	2201      	movs	r2, #1
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	fffffefd 	.word	0xfffffefd
 80016ac:	40012708 	.word	0x40012708
 80016b0:	ffc3ffff 	.word	0xffc3ffff
 80016b4:	fdffffff 	.word	0xfdffffff
 80016b8:	fffe0219 	.word	0xfffe0219
 80016bc:	fffffc03 	.word	0xfffffc03

080016c0 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2317      	movs	r3, #23
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2204      	movs	r2, #4
 80016dc:	4013      	ands	r3, r2
 80016de:	d15e      	bne.n	800179e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2250      	movs	r2, #80	; 0x50
 80016e4:	5c9b      	ldrb	r3, [r3, r2]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_Start_DMA+0x2e>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e05e      	b.n	80017ac <HAL_ADC_Start_DMA+0xec>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2250      	movs	r2, #80	; 0x50
 80016f2:	2101      	movs	r1, #1
 80016f4:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d007      	beq.n	800171e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800170e:	2317      	movs	r3, #23
 8001710:	18fc      	adds	r4, r7, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	0018      	movs	r0, r3
 8001716:	f000 f9af 	bl	8001a78 <ADC_Enable>
 800171a:	0003      	movs	r3, r0
 800171c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800171e:	2317      	movs	r3, #23
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d13e      	bne.n	80017a6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <HAL_ADC_Start_DMA+0xf4>)
 800172e:	4013      	ands	r3, r2
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	0052      	lsls	r2, r2, #1
 8001734:	431a      	orrs	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2250      	movs	r2, #80	; 0x50
 8001744:	2100      	movs	r1, #0
 8001746:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <HAL_ADC_Start_DMA+0xf8>)
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_ADC_Start_DMA+0xfc>)
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_ADC_Start_DMA+0x100>)
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	221c      	movs	r2, #28
 8001766:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2110      	movs	r1, #16
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3340      	adds	r3, #64	; 0x40
 8001782:	0019      	movs	r1, r3
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f000 fbd0 	bl	8001f2c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2104      	movs	r1, #4
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	e003      	b.n	80017a6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800179e:	2317      	movs	r3, #23
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	2202      	movs	r2, #2
 80017a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017a6:	2317      	movs	r3, #23
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	781b      	ldrb	r3, [r3, #0]
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b007      	add	sp, #28
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	fffff0fe 	.word	0xfffff0fe
 80017b8:	08001b39 	.word	0x08001b39
 80017bc:	08001bed 	.word	0x08001bed
 80017c0:	08001c0b 	.word	0x08001c0b

080017c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2204      	movs	r2, #4
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d106      	bne.n	80017e8 <HAL_ADC_IRQHandler+0x24>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2204      	movs	r2, #4
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d00d      	beq.n	8001804 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2208      	movs	r2, #8
 80017f0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d154      	bne.n	80018a0 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2208      	movs	r2, #8
 80017fe:	4013      	ands	r3, r2
 8001800:	2b08      	cmp	r3, #8
 8001802:	d14d      	bne.n	80018a0 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	2210      	movs	r2, #16
 800180a:	4013      	ands	r3, r2
 800180c:	d106      	bne.n	800181c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	2280      	movs	r2, #128	; 0x80
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	23c0      	movs	r3, #192	; 0xc0
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4013      	ands	r3, r2
 8001828:	d12e      	bne.n	8001888 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2220      	movs	r2, #32
 800182e:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001830:	2b00      	cmp	r3, #0
 8001832:	d129      	bne.n	8001888 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2208      	movs	r2, #8
 800183c:	4013      	ands	r3, r2
 800183e:	2b08      	cmp	r3, #8
 8001840:	d122      	bne.n	8001888 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2204      	movs	r2, #4
 800184a:	4013      	ands	r3, r2
 800184c:	d110      	bne.n	8001870 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	210c      	movs	r1, #12
 800185a:	438a      	bics	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	4a35      	ldr	r2, [pc, #212]	; (8001938 <HAL_ADC_IRQHandler+0x174>)
 8001864:	4013      	ands	r3, r2
 8001866:	2201      	movs	r2, #1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
 800186e:	e00b      	b.n	8001888 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	2220      	movs	r2, #32
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	2201      	movs	r2, #1
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	0018      	movs	r0, r3
 800188c:	f7fe fe10 	bl	80004b0 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d003      	beq.n	80018a0 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	220c      	movs	r2, #12
 800189e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2280      	movs	r2, #128	; 0x80
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b80      	cmp	r3, #128	; 0x80
 80018ac:	d115      	bne.n	80018da <HAL_ADC_IRQHandler+0x116>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b80      	cmp	r3, #128	; 0x80
 80018ba:	d10e      	bne.n	80018da <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	0252      	lsls	r2, r2, #9
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f83d 	bl	800194c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2210      	movs	r2, #16
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b10      	cmp	r3, #16
 80018e6:	d123      	bne.n	8001930 <HAL_ADC_IRQHandler+0x16c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2210      	movs	r2, #16
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d11c      	bne.n	8001930 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001908:	2b01      	cmp	r3, #1
 800190a:	d10d      	bne.n	8001928 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	2202      	movs	r2, #2
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2210      	movs	r2, #16
 800191e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f81a 	bl	800195c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2210      	movs	r2, #16
 800192e:	601a      	str	r2, [r3, #0]
  }
  
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}
 8001938:	fffffefe 	.word	0xfffffefe

0800193c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2250      	movs	r2, #80	; 0x50
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x18>
 8001980:	2302      	movs	r3, #2
 8001982:	e06c      	b.n	8001a5e <HAL_ADC_ConfigChannel+0xf2>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2250      	movs	r2, #80	; 0x50
 8001988:	2101      	movs	r1, #1
 800198a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2204      	movs	r2, #4
 8001994:	4013      	ands	r3, r2
 8001996:	d00b      	beq.n	80019b0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	2220      	movs	r2, #32
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2250      	movs	r2, #80	; 0x50
 80019a8:	2100      	movs	r1, #0
 80019aa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e056      	b.n	8001a5e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a2c      	ldr	r2, [pc, #176]	; (8001a68 <HAL_ADC_ConfigChannel+0xfc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d028      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	035b      	lsls	r3, r3, #13
 80019c6:	0b5a      	lsrs	r2, r3, #13
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	02db      	lsls	r3, r3, #11
 80019d8:	4013      	ands	r3, r2
 80019da:	d009      	beq.n	80019f0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_ADC_ConfigChannel+0x100>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_ADC_ConfigChannel+0x100>)
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	0409      	lsls	r1, r1, #16
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80019ea:	200a      	movs	r0, #10
 80019ec:	f000 f928 	bl	8001c40 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	029b      	lsls	r3, r3, #10
 80019f8:	4013      	ands	r3, r2
 80019fa:	d02b      	beq.n	8001a54 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_ADC_ConfigChannel+0x100>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_ADC_ConfigChannel+0x100>)
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	03c9      	lsls	r1, r1, #15
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e023      	b.n	8001a54 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	035b      	lsls	r3, r3, #13
 8001a18:	0b5b      	lsrs	r3, r3, #13
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	400a      	ands	r2, r1
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	02db      	lsls	r3, r3, #11
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d005      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_ADC_ConfigChannel+0x100>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_ADC_ConfigChannel+0x100>)
 8001a36:	490e      	ldr	r1, [pc, #56]	; (8001a70 <HAL_ADC_ConfigChannel+0x104>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	029b      	lsls	r3, r3, #10
 8001a44:	4013      	ands	r3, r2
 8001a46:	d005      	beq.n	8001a54 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_ADC_ConfigChannel+0x100>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_ADC_ConfigChannel+0x100>)
 8001a4e:	4909      	ldr	r1, [pc, #36]	; (8001a74 <HAL_ADC_ConfigChannel+0x108>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2250      	movs	r2, #80	; 0x50
 8001a58:	2100      	movs	r1, #0
 8001a5a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b002      	add	sp, #8
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	00001001 	.word	0x00001001
 8001a6c:	40012708 	.word	0x40012708
 8001a70:	ff7fffff 	.word	0xff7fffff
 8001a74:	ffbfffff 	.word	0xffbfffff

08001a78 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <ADC_Enable+0x2c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <ADC_Enable+0x2c>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <ADC_Enable+0x2e>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d13f      	bne.n	8001b2a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <ADC_Enable+0xbc>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	2210      	movs	r2, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e02c      	b.n	8001b2c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f000 f8ac 	bl	8001c40 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff fc6c 	bl	80013c4 <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001af0:	e014      	b.n	8001b1c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001af2:	f7ff fc67 	bl	80013c4 <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b0a      	cmp	r3, #10
 8001afe:	d90d      	bls.n	8001b1c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	2210      	movs	r2, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	2201      	movs	r2, #1
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e007      	b.n	8001b2c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d1e3      	bne.n	8001af2 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b004      	add	sp, #16
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	80000017 	.word	0x80000017

08001b38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	2250      	movs	r2, #80	; 0x50
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d141      	bne.n	8001bd4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	23c0      	movs	r3, #192	; 0xc0
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d12e      	bne.n	8001bca <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d129      	bne.n	8001bca <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d122      	bne.n	8001bca <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d110      	bne.n	8001bb2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	210c      	movs	r1, #12
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <ADC_DMAConvCplt+0xb0>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2201      	movs	r2, #1
 8001baa:	431a      	orrs	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
 8001bb0:	e00b      	b.n	8001bca <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe fc6f 	bl	80004b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001bd2:	e005      	b.n	8001be0 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	0010      	movs	r0, r2
 8001bde:	4798      	blx	r3
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b004      	add	sp, #16
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	fffffefe 	.word	0xfffffefe

08001bec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff fe9d 	bl	800193c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b004      	add	sp, #16
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	2240      	movs	r2, #64	; 0x40
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	2204      	movs	r2, #4
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff fe92 	bl	800195c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b004      	add	sp, #16
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <ADC_DelayMicroSecond+0x38>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	490b      	ldr	r1, [pc, #44]	; (8001c7c <ADC_DelayMicroSecond+0x3c>)
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7fe fa64 	bl	800011c <__udivsi3>
 8001c54:	0003      	movs	r3, r0
 8001c56:	001a      	movs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4353      	muls	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001c5e:	e002      	b.n	8001c66 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f9      	bne.n	8001c60 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	000f4240 	.word	0x000f4240

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	0002      	movs	r2, r0
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	1dfb      	adds	r3, r7, #7
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b7f      	cmp	r3, #127	; 0x7f
 8001c92:	d809      	bhi.n	8001ca8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c94:	1dfb      	adds	r3, r7, #7
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	001a      	movs	r2, r3
 8001c9a:	231f      	movs	r3, #31
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_EnableIRQ+0x30>)
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4091      	lsls	r1, r2
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
  }
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	0002      	movs	r2, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cc8:	d828      	bhi.n	8001d1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cca:	4a2f      	ldr	r2, [pc, #188]	; (8001d88 <__NVIC_SetPriority+0xd4>)
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	33c0      	adds	r3, #192	; 0xc0
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	589b      	ldr	r3, [r3, r2]
 8001cda:	1dfa      	adds	r2, r7, #7
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	0011      	movs	r1, r2
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	00d2      	lsls	r2, r2, #3
 8001ce6:	21ff      	movs	r1, #255	; 0xff
 8001ce8:	4091      	lsls	r1, r2
 8001cea:	000a      	movs	r2, r1
 8001cec:	43d2      	mvns	r2, r2
 8001cee:	401a      	ands	r2, r3
 8001cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	22ff      	movs	r2, #255	; 0xff
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	2303      	movs	r3, #3
 8001d02:	4003      	ands	r3, r0
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d08:	481f      	ldr	r0, [pc, #124]	; (8001d88 <__NVIC_SetPriority+0xd4>)
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	430a      	orrs	r2, r1
 8001d14:	33c0      	adds	r3, #192	; 0xc0
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d1a:	e031      	b.n	8001d80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <__NVIC_SetPriority+0xd8>)
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	0019      	movs	r1, r3
 8001d24:	230f      	movs	r3, #15
 8001d26:	400b      	ands	r3, r1
 8001d28:	3b08      	subs	r3, #8
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3306      	adds	r3, #6
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	18d3      	adds	r3, r2, r3
 8001d32:	3304      	adds	r3, #4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1dfa      	adds	r2, r7, #7
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	0011      	movs	r1, r2
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	400a      	ands	r2, r1
 8001d40:	00d2      	lsls	r2, r2, #3
 8001d42:	21ff      	movs	r1, #255	; 0xff
 8001d44:	4091      	lsls	r1, r2
 8001d46:	000a      	movs	r2, r1
 8001d48:	43d2      	mvns	r2, r2
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	22ff      	movs	r2, #255	; 0xff
 8001d54:	401a      	ands	r2, r3
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	4003      	ands	r3, r0
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <__NVIC_SetPriority+0xd8>)
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	001c      	movs	r4, r3
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	4023      	ands	r3, r4
 8001d70:	3b08      	subs	r3, #8
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	430a      	orrs	r2, r1
 8001d76:	3306      	adds	r3, #6
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	18c3      	adds	r3, r0, r3
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	601a      	str	r2, [r3, #0]
}
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b003      	add	sp, #12
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	045b      	lsls	r3, r3, #17
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d301      	bcc.n	8001da8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da4:	2301      	movs	r3, #1
 8001da6:	e010      	b.n	8001dca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <SysTick_Config+0x44>)
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	3a01      	subs	r2, #1
 8001dae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db0:	2301      	movs	r3, #1
 8001db2:	425b      	negs	r3, r3
 8001db4:	2103      	movs	r1, #3
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff ff7c 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <SysTick_Config+0x44>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <SysTick_Config+0x44>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	210f      	movs	r1, #15
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	1c02      	adds	r2, r0, #0
 8001de8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	0011      	movs	r1, r2
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b004      	add	sp, #16
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	0002      	movs	r2, r0
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff ff33 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b002      	add	sp, #8
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff ffaf 	bl	8001d90 <SysTick_Config>
 8001e32:	0003      	movs	r3, r0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e061      	b.n	8001f12 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a32      	ldr	r2, [pc, #200]	; (8001f1c <HAL_DMA_Init+0xe0>)
 8001e54:	4694      	mov	ip, r2
 8001e56:	4463      	add	r3, ip
 8001e58:	2114      	movs	r1, #20
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7fe f95e 	bl	800011c <__udivsi3>
 8001e60:	0003      	movs	r3, r0
 8001e62:	009a      	lsls	r2, r3, #2
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	; (8001f20 <HAL_DMA_Init+0xe4>)
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2225      	movs	r2, #37	; 0x25
 8001e72:	2102      	movs	r1, #2
 8001e74:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <HAL_DMA_Init+0xe8>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	01db      	lsls	r3, r3, #7
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d018      	beq.n	8001efa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_DMA_Init+0xec>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	211c      	movs	r1, #28
 8001ed2:	400b      	ands	r3, r1
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	4099      	lsls	r1, r3
 8001ed8:	000b      	movs	r3, r1
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_DMA_Init+0xec>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_DMA_Init+0xec>)
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	201c      	movs	r0, #28
 8001ef0:	4003      	ands	r3, r0
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_DMA_Init+0xec>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2225      	movs	r2, #37	; 0x25
 8001f04:	2101      	movs	r1, #1
 8001f06:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b004      	add	sp, #16
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	bffdfff8 	.word	0xbffdfff8
 8001f20:	40020000 	.word	0x40020000
 8001f24:	ffff800f 	.word	0xffff800f
 8001f28:	400200a8 	.word	0x400200a8

08001f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2317      	movs	r3, #23
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2224      	movs	r2, #36	; 0x24
 8001f46:	5c9b      	ldrb	r3, [r3, r2]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_DMA_Start_IT+0x24>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e04f      	b.n	8001ff0 <HAL_DMA_Start_IT+0xc4>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2224      	movs	r2, #36	; 0x24
 8001f54:	2101      	movs	r1, #1
 8001f56:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2225      	movs	r2, #37	; 0x25
 8001f5c:	5c9b      	ldrb	r3, [r3, r2]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d13a      	bne.n	8001fda <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2225      	movs	r2, #37	; 0x25
 8001f68:	2102      	movs	r1, #2
 8001f6a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	438a      	bics	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f8e3 	bl	8002154 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d008      	beq.n	8001fa8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	210e      	movs	r1, #14
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e00f      	b.n	8001fc8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	210a      	movs	r1, #10
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e007      	b.n	8001fea <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2224      	movs	r2, #36	; 0x24
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fe2:	2317      	movs	r3, #23
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001fea:	2317      	movs	r3, #23
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	781b      	ldrb	r3, [r3, #0]
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b006      	add	sp, #24
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	221c      	movs	r2, #28
 8002016:	4013      	ands	r3, r2
 8002018:	2204      	movs	r2, #4
 800201a:	409a      	lsls	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	d026      	beq.n	8002072 <HAL_DMA_IRQHandler+0x7a>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2204      	movs	r2, #4
 8002028:	4013      	ands	r3, r2
 800202a:	d022      	beq.n	8002072 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2220      	movs	r2, #32
 8002034:	4013      	ands	r3, r2
 8002036:	d107      	bne.n	8002048 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2104      	movs	r1, #4
 8002044:	438a      	bics	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	221c      	movs	r2, #28
 800204e:	401a      	ands	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	2104      	movs	r1, #4
 8002056:	4091      	lsls	r1, r2
 8002058:	000a      	movs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	2b00      	cmp	r3, #0
 8002062:	d100      	bne.n	8002066 <HAL_DMA_IRQHandler+0x6e>
 8002064:	e071      	b.n	800214a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	0010      	movs	r0, r2
 800206e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002070:	e06b      	b.n	800214a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	221c      	movs	r2, #28
 8002078:	4013      	ands	r3, r2
 800207a:	2202      	movs	r2, #2
 800207c:	409a      	lsls	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	d02d      	beq.n	80020e2 <HAL_DMA_IRQHandler+0xea>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2202      	movs	r2, #2
 800208a:	4013      	ands	r3, r2
 800208c:	d029      	beq.n	80020e2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2220      	movs	r2, #32
 8002096:	4013      	ands	r3, r2
 8002098:	d10b      	bne.n	80020b2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	210a      	movs	r1, #10
 80020a6:	438a      	bics	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2225      	movs	r2, #37	; 0x25
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	221c      	movs	r2, #28
 80020b8:	401a      	ands	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2102      	movs	r1, #2
 80020c0:	4091      	lsls	r1, r2
 80020c2:	000a      	movs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2224      	movs	r2, #36	; 0x24
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d039      	beq.n	800214a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	0010      	movs	r0, r2
 80020de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020e0:	e033      	b.n	800214a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	221c      	movs	r2, #28
 80020e8:	4013      	ands	r3, r2
 80020ea:	2208      	movs	r2, #8
 80020ec:	409a      	lsls	r2, r3
 80020ee:	0013      	movs	r3, r2
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	d02a      	beq.n	800214c <HAL_DMA_IRQHandler+0x154>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2208      	movs	r2, #8
 80020fa:	4013      	ands	r3, r2
 80020fc:	d026      	beq.n	800214c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	210e      	movs	r1, #14
 800210a:	438a      	bics	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	221c      	movs	r2, #28
 8002114:	401a      	ands	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2101      	movs	r1, #1
 800211c:	4091      	lsls	r1, r2
 800211e:	000a      	movs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2225      	movs	r2, #37	; 0x25
 800212c:	2101      	movs	r1, #1
 800212e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	2100      	movs	r1, #0
 8002136:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	0010      	movs	r0, r2
 8002148:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46c0      	nop			; (mov r8, r8)
}
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}

08002154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	221c      	movs	r2, #28
 8002168:	401a      	ands	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2101      	movs	r1, #1
 8002170:	4091      	lsls	r1, r2
 8002172:	000a      	movs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b10      	cmp	r3, #16
 8002184:	d108      	bne.n	8002198 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002196:	e007      	b.n	80021a8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b004      	add	sp, #16
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80021c6:	e14f      	b.n	8002468 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4091      	lsls	r1, r2
 80021d2:	000a      	movs	r2, r1
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d100      	bne.n	80021e0 <HAL_GPIO_Init+0x30>
 80021de:	e140      	b.n	8002462 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d00b      	beq.n	8002200 <HAL_GPIO_Init+0x50>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f4:	2b11      	cmp	r3, #17
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b12      	cmp	r3, #18
 80021fe:	d130      	bne.n	8002262 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	409a      	lsls	r2, r3
 800220e:	0013      	movs	r3, r2
 8002210:	43da      	mvns	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	409a      	lsls	r2, r3
 8002222:	0013      	movs	r3, r2
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002236:	2201      	movs	r2, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	43da      	mvns	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	2201      	movs	r2, #1
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
 8002254:	0013      	movs	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	409a      	lsls	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	43da      	mvns	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	409a      	lsls	r2, r3
 8002284:	0013      	movs	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0xf2>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b12      	cmp	r3, #18
 80022a0:	d123      	bne.n	80022ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	58d3      	ldr	r3, [r2, r3]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2207      	movs	r2, #7
 80022b4:	4013      	ands	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	409a      	lsls	r2, r3
 80022bc:	0013      	movs	r3, r2
 80022be:	43da      	mvns	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2107      	movs	r1, #7
 80022ce:	400b      	ands	r3, r1
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	409a      	lsls	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	6939      	ldr	r1, [r7, #16]
 80022e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	43da      	mvns	r2, r3
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2203      	movs	r2, #3
 8002308:	401a      	ands	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	409a      	lsls	r2, r3
 8002310:	0013      	movs	r3, r2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	055b      	lsls	r3, r3, #21
 8002326:	4013      	ands	r3, r2
 8002328:	d100      	bne.n	800232c <HAL_GPIO_Init+0x17c>
 800232a:	e09a      	b.n	8002462 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232c:	4b54      	ldr	r3, [pc, #336]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 800232e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002330:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 8002332:	2101      	movs	r1, #1
 8002334:	430a      	orrs	r2, r1
 8002336:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_GPIO_Init+0x2d4>)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	3302      	adds	r3, #2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	589b      	ldr	r3, [r3, r2]
 8002344:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2203      	movs	r2, #3
 800234a:	4013      	ands	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	220f      	movs	r2, #15
 8002350:	409a      	lsls	r2, r3
 8002352:	0013      	movs	r3, r2
 8002354:	43da      	mvns	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	23a0      	movs	r3, #160	; 0xa0
 8002360:	05db      	lsls	r3, r3, #23
 8002362:	429a      	cmp	r2, r3
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x1ea>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a47      	ldr	r2, [pc, #284]	; (8002488 <HAL_GPIO_Init+0x2d8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x1e6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a46      	ldr	r2, [pc, #280]	; (800248c <HAL_GPIO_Init+0x2dc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x1e2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a45      	ldr	r2, [pc, #276]	; (8002490 <HAL_GPIO_Init+0x2e0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x1de>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a44      	ldr	r2, [pc, #272]	; (8002494 <HAL_GPIO_Init+0x2e4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x1da>
 8002386:	2305      	movs	r3, #5
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x1ec>
 800238a:	2306      	movs	r3, #6
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x1ec>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x1ec>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x1ec>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x1ec>
 800239a:	2300      	movs	r3, #0
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	2103      	movs	r1, #3
 80023a0:	400a      	ands	r2, r1
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ac:	4935      	ldr	r1, [pc, #212]	; (8002484 <HAL_GPIO_Init+0x2d4>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ba:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_GPIO_Init+0x2e8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43da      	mvns	r2, r3
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	025b      	lsls	r3, r3, #9
 80023d2:	4013      	ands	r3, r2
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023de:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <HAL_GPIO_Init+0x2e8>)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80023e4:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <HAL_GPIO_Init+0x2e8>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	029b      	lsls	r3, r3, #10
 80023fc:	4013      	ands	r3, r2
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_GPIO_Init+0x2e8>)
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_GPIO_Init+0x2e8>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43da      	mvns	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	035b      	lsls	r3, r3, #13
 8002426:	4013      	ands	r3, r2
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_GPIO_Init+0x2e8>)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_GPIO_Init+0x2e8>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43da      	mvns	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	039b      	lsls	r3, r3, #14
 8002450:	4013      	ands	r3, r2
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_GPIO_Init+0x2e8>)
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	40da      	lsrs	r2, r3
 8002470:	1e13      	subs	r3, r2, #0
 8002472:	d000      	beq.n	8002476 <HAL_GPIO_Init+0x2c6>
 8002474:	e6a8      	b.n	80021c8 <HAL_GPIO_Init+0x18>
  }
}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b006      	add	sp, #24
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	40010000 	.word	0x40010000
 8002488:	50000400 	.word	0x50000400
 800248c:	50000800 	.word	0x50000800
 8002490:	50000c00 	.word	0x50000c00
 8002494:	50001c00 	.word	0x50001c00
 8002498:	40010400 	.word	0x40010400

0800249c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	0008      	movs	r0, r1
 80024a6:	0011      	movs	r1, r2
 80024a8:	1cbb      	adds	r3, r7, #2
 80024aa:	1c02      	adds	r2, r0, #0
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	1c7b      	adds	r3, r7, #1
 80024b0:	1c0a      	adds	r2, r1, #0
 80024b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b4:	1c7b      	adds	r3, r7, #1
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024bc:	1cbb      	adds	r3, r7, #2
 80024be:	881a      	ldrh	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80024c4:	e003      	b.n	80024ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80024c6:	1cbb      	adds	r3, r7, #2
 80024c8:	881a      	ldrh	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	000a      	movs	r2, r1
 80024e0:	1cbb      	adds	r3, r7, #2
 80024e2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ea:	1cbb      	adds	r3, r7, #2
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	041a      	lsls	r2, r3, #16
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	1cb9      	adds	r1, r7, #2
 80024fa:	8809      	ldrh	r1, [r1, #0]
 80024fc:	400b      	ands	r3, r1
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e082      	b.n	8002624 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2241      	movs	r2, #65	; 0x41
 8002522:	5c9b      	ldrb	r3, [r3, r2]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2240      	movs	r2, #64	; 0x40
 800252e:	2100      	movs	r1, #0
 8002530:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	0018      	movs	r0, r3
 8002536:	f7fe fd63 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2241      	movs	r2, #65	; 0x41
 800253e:	2124      	movs	r1, #36	; 0x24
 8002540:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	438a      	bics	r2, r1
 8002550:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4934      	ldr	r1, [pc, #208]	; (800262c <HAL_I2C_Init+0x120>)
 800255c:	400a      	ands	r2, r1
 800255e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4931      	ldr	r1, [pc, #196]	; (8002630 <HAL_I2C_Init+0x124>)
 800256c:	400a      	ands	r2, r1
 800256e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	0209      	lsls	r1, r1, #8
 8002584:	430a      	orrs	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	e007      	b.n	800259a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2184      	movs	r1, #132	; 0x84
 8002594:	0209      	lsls	r1, r1, #8
 8002596:	430a      	orrs	r2, r1
 8002598:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d104      	bne.n	80025ac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	491f      	ldr	r1, [pc, #124]	; (8002634 <HAL_I2C_Init+0x128>)
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	491a      	ldr	r1, [pc, #104]	; (8002630 <HAL_I2C_Init+0x124>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	0011      	movs	r1, r2
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	021a      	lsls	r2, r3, #8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69d9      	ldr	r1, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2241      	movs	r2, #65	; 0x41
 8002610:	2120      	movs	r1, #32
 8002612:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2242      	movs	r2, #66	; 0x42
 800261e:	2100      	movs	r1, #0
 8002620:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}
 800262c:	f0ffffff 	.word	0xf0ffffff
 8002630:	ffff7fff 	.word	0xffff7fff
 8002634:	02008000 	.word	0x02008000

08002638 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	000c      	movs	r4, r1
 8002642:	0010      	movs	r0, r2
 8002644:	0019      	movs	r1, r3
 8002646:	230a      	movs	r3, #10
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	1c22      	adds	r2, r4, #0
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	2308      	movs	r3, #8
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	1c02      	adds	r2, r0, #0
 8002654:	801a      	strh	r2, [r3, #0]
 8002656:	1dbb      	adds	r3, r7, #6
 8002658:	1c0a      	adds	r2, r1, #0
 800265a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2241      	movs	r2, #65	; 0x41
 8002660:	5c9b      	ldrb	r3, [r3, r2]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b20      	cmp	r3, #32
 8002666:	d000      	beq.n	800266a <HAL_I2C_Mem_Write+0x32>
 8002668:	e10c      	b.n	8002884 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <HAL_I2C_Mem_Write+0x42>
 8002670:	232c      	movs	r3, #44	; 0x2c
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0ff      	b.n	8002886 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2240      	movs	r2, #64	; 0x40
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_I2C_Mem_Write+0x5c>
 8002690:	2302      	movs	r3, #2
 8002692:	e0f8      	b.n	8002886 <HAL_I2C_Mem_Write+0x24e>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	2101      	movs	r1, #1
 800269a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800269c:	f7fe fe92 	bl	80013c4 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	0219      	lsls	r1, r3, #8
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2319      	movs	r3, #25
 80026b0:	2201      	movs	r2, #1
 80026b2:	f000 f975 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	1e03      	subs	r3, r0, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0e3      	b.n	8002886 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2241      	movs	r2, #65	; 0x41
 80026c2:	2121      	movs	r1, #33	; 0x21
 80026c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2242      	movs	r2, #66	; 0x42
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	222c      	movs	r2, #44	; 0x2c
 80026de:	18ba      	adds	r2, r7, r2
 80026e0:	8812      	ldrh	r2, [r2, #0]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ea:	1dbb      	adds	r3, r7, #6
 80026ec:	881c      	ldrh	r4, [r3, #0]
 80026ee:	2308      	movs	r3, #8
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	881a      	ldrh	r2, [r3, #0]
 80026f4:	230a      	movs	r3, #10
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	8819      	ldrh	r1, [r3, #0]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	0023      	movs	r3, r4
 8002706:	f000 f8c5 	bl	8002894 <I2C_RequestMemoryWrite>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d005      	beq.n	800271a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	2100      	movs	r1, #0
 8002714:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0b5      	b.n	8002886 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	2bff      	cmp	r3, #255	; 0xff
 8002722:	d911      	bls.n	8002748 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	22ff      	movs	r2, #255	; 0xff
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	b2da      	uxtb	r2, r3
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	045c      	lsls	r4, r3, #17
 8002734:	230a      	movs	r3, #10
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	8819      	ldrh	r1, [r3, #0]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	2300      	movs	r3, #0
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	0023      	movs	r3, r4
 8002742:	f000 fa4d 	bl	8002be0 <I2C_TransferConfig>
 8002746:	e012      	b.n	800276e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	b2da      	uxtb	r2, r3
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	049c      	lsls	r4, r3, #18
 800275c:	230a      	movs	r3, #10
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	8819      	ldrh	r1, [r3, #0]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	2300      	movs	r3, #0
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	0023      	movs	r3, r4
 800276a:	f000 fa39 	bl	8002be0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f952 	bl	8002a1e <I2C_WaitOnTXISFlagUntilTimeout>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e081      	b.n	8002886 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d03a      	beq.n	8002832 <HAL_I2C_Mem_Write+0x1fa>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d136      	bne.n	8002832 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	0013      	movs	r3, r2
 80027ce:	2200      	movs	r2, #0
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	f000 f8e5 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e053      	b.n	8002886 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2bff      	cmp	r3, #255	; 0xff
 80027e6:	d911      	bls.n	800280c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	22ff      	movs	r2, #255	; 0xff
 80027ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	045c      	lsls	r4, r3, #17
 80027f8:	230a      	movs	r3, #10
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	8819      	ldrh	r1, [r3, #0]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	0023      	movs	r3, r4
 8002806:	f000 f9eb 	bl	8002be0 <I2C_TransferConfig>
 800280a:	e012      	b.n	8002832 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	b2da      	uxtb	r2, r3
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	049c      	lsls	r4, r3, #18
 8002820:	230a      	movs	r3, #10
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	8819      	ldrh	r1, [r3, #0]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	2300      	movs	r3, #0
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	0023      	movs	r3, r4
 800282e:	f000 f9d7 	bl	8002be0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d198      	bne.n	800276e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f92a 	bl	8002a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d001      	beq.n	8002850 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e01a      	b.n	8002886 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2220      	movs	r2, #32
 8002856:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	490b      	ldr	r1, [pc, #44]	; (8002890 <HAL_I2C_Mem_Write+0x258>)
 8002864:	400a      	ands	r2, r1
 8002866:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2241      	movs	r2, #65	; 0x41
 800286c:	2120      	movs	r1, #32
 800286e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2242      	movs	r2, #66	; 0x42
 8002874:	2100      	movs	r1, #0
 8002876:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2240      	movs	r2, #64	; 0x40
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b007      	add	sp, #28
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	fe00e800 	.word	0xfe00e800

08002894 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	000c      	movs	r4, r1
 800289e:	0010      	movs	r0, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	250a      	movs	r5, #10
 80028a4:	197b      	adds	r3, r7, r5
 80028a6:	1c22      	adds	r2, r4, #0
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	2308      	movs	r3, #8
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	1c02      	adds	r2, r0, #0
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	1dbb      	adds	r3, r7, #6
 80028b4:	1c0a      	adds	r2, r1, #0
 80028b6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028b8:	1dbb      	adds	r3, r7, #6
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	045c      	lsls	r4, r3, #17
 80028c2:	197b      	adds	r3, r7, r5
 80028c4:	8819      	ldrh	r1, [r3, #0]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	4b23      	ldr	r3, [pc, #140]	; (8002958 <I2C_RequestMemoryWrite+0xc4>)
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	0023      	movs	r3, r4
 80028ce:	f000 f987 	bl	8002be0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 f8a0 	bl	8002a1e <I2C_WaitOnTXISFlagUntilTimeout>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e033      	b.n	800294e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e6:	1dbb      	adds	r3, r7, #6
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d107      	bne.n	80028fe <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ee:	2308      	movs	r3, #8
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
 80028fc:	e019      	b.n	8002932 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028fe:	2308      	movs	r3, #8
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	b29b      	uxth	r3, r3
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002912:	6a39      	ldr	r1, [r7, #32]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f881 	bl	8002a1e <I2C_WaitOnTXISFlagUntilTimeout>
 800291c:	1e03      	subs	r3, r0, #0
 800291e:	d001      	beq.n	8002924 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e014      	b.n	800294e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002924:	2308      	movs	r3, #8
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002932:	6a3a      	ldr	r2, [r7, #32]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	0013      	movs	r3, r2
 800293c:	2200      	movs	r2, #0
 800293e:	2180      	movs	r1, #128	; 0x80
 8002940:	f000 f82e 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 8002944:	1e03      	subs	r3, r0, #0
 8002946:	d001      	beq.n	800294c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b004      	add	sp, #16
 8002954:	bdb0      	pop	{r4, r5, r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	80002000 	.word	0x80002000

0800295c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d103      	bne.n	800297a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2201      	movs	r2, #1
 8002982:	4013      	ands	r3, r2
 8002984:	2b01      	cmp	r3, #1
 8002986:	d007      	beq.n	8002998 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2101      	movs	r1, #1
 8002994:	430a      	orrs	r2, r1
 8002996:	619a      	str	r2, [r3, #24]
  }
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b0:	e021      	b.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	d01e      	beq.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b8:	f7fe fd04 	bl	80013c4 <HAL_GetTick>
 80029bc:	0002      	movs	r2, r0
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d302      	bcc.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x2e>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	2220      	movs	r2, #32
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2241      	movs	r2, #65	; 0x41
 80029de:	2120      	movs	r1, #32
 80029e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2242      	movs	r2, #66	; 0x42
 80029e6:	2100      	movs	r1, #0
 80029e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2240      	movs	r2, #64	; 0x40
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00f      	b.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	4013      	ands	r3, r2
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	425a      	negs	r2, r3
 8002a06:	4153      	adcs	r3, r2
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	1dfb      	adds	r3, r7, #7
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d0ce      	beq.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	0018      	movs	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a2a:	e02b      	b.n	8002a84 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f86e 	bl	8002b14 <I2C_IsAcknowledgeFailed>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d001      	beq.n	8002a40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e029      	b.n	8002a94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	3301      	adds	r3, #1
 8002a44:	d01e      	beq.n	8002a84 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7fe fcbd 	bl	80013c4 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d113      	bne.n	8002a84 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	2220      	movs	r2, #32
 8002a62:	431a      	orrs	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2241      	movs	r2, #65	; 0x41
 8002a6c:	2120      	movs	r1, #32
 8002a6e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2242      	movs	r2, #66	; 0x42
 8002a74:	2100      	movs	r1, #0
 8002a76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e007      	b.n	8002a94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d1cc      	bne.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b004      	add	sp, #16
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa8:	e028      	b.n	8002afc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 f82f 	bl	8002b14 <I2C_IsAcknowledgeFailed>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e026      	b.n	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7fe fc81 	bl	80013c4 <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d113      	bne.n	8002afc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	2220      	movs	r2, #32
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2241      	movs	r2, #65	; 0x41
 8002ae4:	2120      	movs	r1, #32
 8002ae6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2242      	movs	r2, #66	; 0x42
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e007      	b.n	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2220      	movs	r2, #32
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d1cf      	bne.n	8002aaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2210      	movs	r2, #16
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d151      	bne.n	8002bd2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b2e:	e021      	b.n	8002b74 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3301      	adds	r3, #1
 8002b34:	d01e      	beq.n	8002b74 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7fe fc45 	bl	80013c4 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_IsAcknowledgeFailed+0x38>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d113      	bne.n	8002b74 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	2220      	movs	r2, #32
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2241      	movs	r2, #65	; 0x41
 8002b5c:	2120      	movs	r1, #32
 8002b5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2242      	movs	r2, #66	; 0x42
 8002b64:	2100      	movs	r1, #0
 8002b66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2240      	movs	r2, #64	; 0x40
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e02f      	b.n	8002bd4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d1d6      	bne.n	8002b30 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2210      	movs	r2, #16
 8002b88:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7ff fee1 	bl	800295c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	490d      	ldr	r1, [pc, #52]	; (8002bdc <I2C_IsAcknowledgeFailed+0xc8>)
 8002ba6:	400a      	ands	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	2204      	movs	r2, #4
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2241      	movs	r2, #65	; 0x41
 8002bba:	2120      	movs	r1, #32
 8002bbc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2242      	movs	r2, #66	; 0x42
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2240      	movs	r2, #64	; 0x40
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b004      	add	sp, #16
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	fe00e800 	.word	0xfe00e800

08002be0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	0008      	movs	r0, r1
 8002bea:	0011      	movs	r1, r2
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	240a      	movs	r4, #10
 8002bf0:	193b      	adds	r3, r7, r4
 8002bf2:	1c02      	adds	r2, r0, #0
 8002bf4:	801a      	strh	r2, [r3, #0]
 8002bf6:	2009      	movs	r0, #9
 8002bf8:	183b      	adds	r3, r7, r0
 8002bfa:	1c0a      	adds	r2, r1, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	0d51      	lsrs	r1, r2, #21
 8002c08:	2280      	movs	r2, #128	; 0x80
 8002c0a:	00d2      	lsls	r2, r2, #3
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	490e      	ldr	r1, [pc, #56]	; (8002c48 <I2C_TransferConfig+0x68>)
 8002c10:	430a      	orrs	r2, r1
 8002c12:	43d2      	mvns	r2, r2
 8002c14:	401a      	ands	r2, r3
 8002c16:	0011      	movs	r1, r2
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	059b      	lsls	r3, r3, #22
 8002c1e:	0d9a      	lsrs	r2, r3, #22
 8002c20:	183b      	adds	r3, r7, r0
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	0418      	lsls	r0, r3, #16
 8002c26:	23ff      	movs	r3, #255	; 0xff
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	4003      	ands	r3, r0
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b005      	add	sp, #20
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	03ff63ff 	.word	0x03ff63ff

08002c4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2241      	movs	r2, #65	; 0x41
 8002c5a:	5c9b      	ldrb	r3, [r3, r2]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d138      	bne.n	8002cd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2240      	movs	r2, #64	; 0x40
 8002c66:	5c9b      	ldrb	r3, [r3, r2]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e032      	b.n	8002cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	2101      	movs	r1, #1
 8002c76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2241      	movs	r2, #65	; 0x41
 8002c7c:	2124      	movs	r1, #36	; 0x24
 8002c7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4911      	ldr	r1, [pc, #68]	; (8002ce0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2241      	movs	r2, #65	; 0x41
 8002cc4:	2120      	movs	r1, #32
 8002cc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2240      	movs	r2, #64	; 0x40
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e000      	b.n	8002cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
  }
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b002      	add	sp, #8
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	ffffefff 	.word	0xffffefff

08002ce4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2241      	movs	r2, #65	; 0x41
 8002cf2:	5c9b      	ldrb	r3, [r3, r2]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d139      	bne.n	8002d6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e033      	b.n	8002d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2241      	movs	r2, #65	; 0x41
 8002d14:	2124      	movs	r1, #36	; 0x24
 8002d16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2101      	movs	r1, #1
 8002d24:	438a      	bics	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2241      	movs	r2, #65	; 0x41
 8002d5e:	2120      	movs	r1, #32
 8002d60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2240      	movs	r2, #64	; 0x40
 8002d66:	2100      	movs	r1, #0
 8002d68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b004      	add	sp, #16
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	fffff0ff 	.word	0xfffff0ff

08002d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d7c:	b5b0      	push	{r4, r5, r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f000 fbaf 	bl	80034ee <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d90:	4bcf      	ldr	r3, [pc, #828]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	220c      	movs	r2, #12
 8002d96:	4013      	ands	r3, r2
 8002d98:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d9a:	4bcd      	ldr	r3, [pc, #820]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	025b      	lsls	r3, r3, #9
 8002da2:	4013      	ands	r3, r2
 8002da4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2201      	movs	r2, #1
 8002dac:	4013      	ands	r3, r2
 8002dae:	d100      	bne.n	8002db2 <HAL_RCC_OscConfig+0x36>
 8002db0:	e07e      	b.n	8002eb0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d007      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	d112      	bne.n	8002de4 <HAL_RCC_OscConfig+0x68>
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	025b      	lsls	r3, r3, #9
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d10d      	bne.n	8002de4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	4bc1      	ldr	r3, [pc, #772]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	029b      	lsls	r3, r3, #10
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d100      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x5a>
 8002dd4:	e06b      	b.n	8002eae <HAL_RCC_OscConfig+0x132>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d167      	bne.n	8002eae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f000 fb85 	bl	80034ee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	025b      	lsls	r3, r3, #9
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_OscConfig+0x84>
 8002df0:	4bb7      	ldr	r3, [pc, #732]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4bb6      	ldr	r3, [pc, #728]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	0249      	lsls	r1, r1, #9
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e027      	b.n	8002e50 <HAL_RCC_OscConfig+0xd4>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	23a0      	movs	r3, #160	; 0xa0
 8002e06:	02db      	lsls	r3, r3, #11
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d10e      	bne.n	8002e2a <HAL_RCC_OscConfig+0xae>
 8002e0c:	4bb0      	ldr	r3, [pc, #704]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4baf      	ldr	r3, [pc, #700]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	02c9      	lsls	r1, r1, #11
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	4bad      	ldr	r3, [pc, #692]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4bac      	ldr	r3, [pc, #688]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	0249      	lsls	r1, r1, #9
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e012      	b.n	8002e50 <HAL_RCC_OscConfig+0xd4>
 8002e2a:	4ba9      	ldr	r3, [pc, #676]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4ba8      	ldr	r3, [pc, #672]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e30:	49a8      	ldr	r1, [pc, #672]	; (80030d4 <HAL_RCC_OscConfig+0x358>)
 8002e32:	400a      	ands	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	4ba6      	ldr	r3, [pc, #664]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	025b      	lsls	r3, r3, #9
 8002e3e:	4013      	ands	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4ba2      	ldr	r3, [pc, #648]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4ba1      	ldr	r3, [pc, #644]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e4a:	49a3      	ldr	r1, [pc, #652]	; (80030d8 <HAL_RCC_OscConfig+0x35c>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d015      	beq.n	8002e84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fab4 	bl	80013c4 <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e60:	e009      	b.n	8002e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e62:	f7fe faaf 	bl	80013c4 <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b64      	cmp	r3, #100	; 0x64
 8002e6e:	d902      	bls.n	8002e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	f000 fb3c 	bl	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e76:	4b96      	ldr	r3, [pc, #600]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d0ef      	beq.n	8002e62 <HAL_RCC_OscConfig+0xe6>
 8002e82:	e015      	b.n	8002eb0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe fa9e 	bl	80013c4 <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8e:	f7fe fa99 	bl	80013c4 <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b64      	cmp	r3, #100	; 0x64
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e326      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ea0:	4b8b      	ldr	r3, [pc, #556]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x112>
 8002eac:	e000      	b.n	8002eb0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d100      	bne.n	8002ebc <HAL_RCC_OscConfig+0x140>
 8002eba:	e08b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d13e      	bne.n	8002f4c <HAL_RCC_OscConfig+0x1d0>
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d13b      	bne.n	8002f4c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002ed4:	4b7e      	ldr	r3, [pc, #504]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	4013      	ands	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x16c>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e302      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee8:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a7b      	ldr	r2, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x360>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	021a      	lsls	r2, r3, #8
 8002ef8:	4b75      	ldr	r3, [pc, #468]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002efe:	4b74      	ldr	r3, [pc, #464]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2209      	movs	r2, #9
 8002f04:	4393      	bics	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	4b71      	ldr	r3, [pc, #452]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f10:	f000 fc40 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8002f14:	0001      	movs	r1, r0
 8002f16:	4b6e      	ldr	r3, [pc, #440]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	4013      	ands	r3, r2
 8002f20:	4a6f      	ldr	r2, [pc, #444]	; (80030e0 <HAL_RCC_OscConfig+0x364>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	000a      	movs	r2, r1
 8002f26:	40da      	lsrs	r2, r3
 8002f28:	4b6e      	ldr	r3, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x368>)
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002f2c:	4b6e      	ldr	r3, [pc, #440]	; (80030e8 <HAL_RCC_OscConfig+0x36c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2513      	movs	r5, #19
 8002f32:	197c      	adds	r4, r7, r5
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7fe f9ff 	bl	8001338 <HAL_InitTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002f3e:	197b      	adds	r3, r7, r5
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d046      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002f46:	197b      	adds	r3, r7, r5
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	e2d0      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d027      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f52:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2209      	movs	r2, #9
 8002f58:	4393      	bics	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe fa2e 	bl	80013c4 <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6e:	f7fe fa29 	bl	80013c4 <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e2b6      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f80:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2204      	movs	r2, #4
 8002f86:	4013      	ands	r3, r2
 8002f88:	d0f1      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	4b51      	ldr	r3, [pc, #324]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4a53      	ldr	r2, [pc, #332]	; (80030dc <HAL_RCC_OscConfig+0x360>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	e018      	b.n	8002fd4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa2:	4b4b      	ldr	r3, [pc, #300]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002fa8:	2101      	movs	r1, #1
 8002faa:	438a      	bics	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fe fa09 	bl	80013c4 <HAL_GetTick>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fa04 	bl	80013c4 <HAL_GetTick>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e291      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d1f1      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d100      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x264>
 8002fde:	e0a1      	b.n	8003124 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d140      	bne.n	8003068 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fe6:	4b3a      	ldr	r3, [pc, #232]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x282>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e277      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a3a      	ldr	r2, [pc, #232]	; (80030ec <HAL_RCC_OscConfig+0x370>)
 8003004:	4013      	ands	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300c:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003012:	4b2f      	ldr	r3, [pc, #188]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	0a19      	lsrs	r1, r3, #8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	061a      	lsls	r2, r3, #24
 8003020:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	0b5b      	lsrs	r3, r3, #13
 800302c:	3301      	adds	r3, #1
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	0212      	lsls	r2, r2, #8
 8003032:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003034:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	210f      	movs	r1, #15
 800303c:	400b      	ands	r3, r1
 800303e:	4928      	ldr	r1, [pc, #160]	; (80030e0 <HAL_RCC_OscConfig+0x364>)
 8003040:	5ccb      	ldrb	r3, [r1, r3]
 8003042:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x368>)
 8003046:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_OscConfig+0x36c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2513      	movs	r5, #19
 800304e:	197c      	adds	r4, r7, r5
 8003050:	0018      	movs	r0, r3
 8003052:	f7fe f971 	bl	8001338 <HAL_InitTick>
 8003056:	0003      	movs	r3, r0
 8003058:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800305a:	197b      	adds	r3, r7, r5
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d060      	beq.n	8003124 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003062:	197b      	adds	r3, r7, r5
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	e242      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03f      	beq.n	80030f0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0049      	lsls	r1, r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe f9a1 	bl	80013c4 <HAL_GetTick>
 8003082:	0003      	movs	r3, r0
 8003084:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003088:	f7fe f99c 	bl	80013c4 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e229      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a10      	ldr	r2, [pc, #64]	; (80030ec <HAL_RCC_OscConfig+0x370>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	0a19      	lsrs	r1, r3, #8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	061a      	lsls	r2, r3, #24
 80030c8:	4b01      	ldr	r3, [pc, #4]	; (80030d0 <HAL_RCC_OscConfig+0x354>)
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	e029      	b.n	8003124 <HAL_RCC_OscConfig+0x3a8>
 80030d0:	40021000 	.word	0x40021000
 80030d4:	fffeffff 	.word	0xfffeffff
 80030d8:	fffbffff 	.word	0xfffbffff
 80030dc:	ffffe0ff 	.word	0xffffe0ff
 80030e0:	080050ec 	.word	0x080050ec
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000004 	.word	0x20000004
 80030ec:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030f0:	4bbd      	ldr	r3, [pc, #756]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4bbc      	ldr	r3, [pc, #752]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80030f6:	49bd      	ldr	r1, [pc, #756]	; (80033ec <HAL_RCC_OscConfig+0x670>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe f962 	bl	80013c4 <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003106:	f7fe f95d 	bl	80013c4 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1ea      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003118:	4bb3      	ldr	r3, [pc, #716]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4013      	ands	r3, r2
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2208      	movs	r2, #8
 800312a:	4013      	ands	r3, r2
 800312c:	d036      	beq.n	800319c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d019      	beq.n	800316a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4bac      	ldr	r3, [pc, #688]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800313a:	4bab      	ldr	r3, [pc, #684]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800313c:	2101      	movs	r1, #1
 800313e:	430a      	orrs	r2, r1
 8003140:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7fe f93f 	bl	80013c4 <HAL_GetTick>
 8003146:	0003      	movs	r3, r0
 8003148:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314c:	f7fe f93a 	bl	80013c4 <HAL_GetTick>
 8003150:	0002      	movs	r2, r0
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1c7      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800315e:	4ba2      	ldr	r3, [pc, #648]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	d0f1      	beq.n	800314c <HAL_RCC_OscConfig+0x3d0>
 8003168:	e018      	b.n	800319c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316a:	4b9f      	ldr	r3, [pc, #636]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800316c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800316e:	4b9e      	ldr	r3, [pc, #632]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003170:	2101      	movs	r1, #1
 8003172:	438a      	bics	r2, r1
 8003174:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe f925 	bl	80013c4 <HAL_GetTick>
 800317a:	0003      	movs	r3, r0
 800317c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003180:	f7fe f920 	bl	80013c4 <HAL_GetTick>
 8003184:	0002      	movs	r2, r0
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1ad      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003192:	4b95      	ldr	r3, [pc, #596]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	2202      	movs	r2, #2
 8003198:	4013      	ands	r3, r2
 800319a:	d1f1      	bne.n	8003180 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2204      	movs	r2, #4
 80031a2:	4013      	ands	r3, r2
 80031a4:	d100      	bne.n	80031a8 <HAL_RCC_OscConfig+0x42c>
 80031a6:	e0ae      	b.n	8003306 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a8:	2027      	movs	r0, #39	; 0x27
 80031aa:	183b      	adds	r3, r7, r0
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b0:	4b8d      	ldr	r3, [pc, #564]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80031b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	055b      	lsls	r3, r3, #21
 80031b8:	4013      	ands	r3, r2
 80031ba:	d109      	bne.n	80031d0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4b8a      	ldr	r3, [pc, #552]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80031be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c0:	4b89      	ldr	r3, [pc, #548]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	0549      	lsls	r1, r1, #21
 80031c6:	430a      	orrs	r2, r1
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031ca:	183b      	adds	r3, r7, r0
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	4b87      	ldr	r3, [pc, #540]	; (80033f0 <HAL_RCC_OscConfig+0x674>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4013      	ands	r3, r2
 80031da:	d11a      	bne.n	8003212 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031dc:	4b84      	ldr	r3, [pc, #528]	; (80033f0 <HAL_RCC_OscConfig+0x674>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b83      	ldr	r3, [pc, #524]	; (80033f0 <HAL_RCC_OscConfig+0x674>)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	0049      	lsls	r1, r1, #1
 80031e6:	430a      	orrs	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe f8eb 	bl	80013c4 <HAL_GetTick>
 80031ee:	0003      	movs	r3, r0
 80031f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f4:	f7fe f8e6 	bl	80013c4 <HAL_GetTick>
 80031f8:	0002      	movs	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e173      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003206:	4b7a      	ldr	r3, [pc, #488]	; (80033f0 <HAL_RCC_OscConfig+0x674>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4013      	ands	r3, r2
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	429a      	cmp	r2, r3
 800321c:	d107      	bne.n	800322e <HAL_RCC_OscConfig+0x4b2>
 800321e:	4b72      	ldr	r3, [pc, #456]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003222:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0049      	lsls	r1, r1, #1
 8003228:	430a      	orrs	r2, r1
 800322a:	651a      	str	r2, [r3, #80]	; 0x50
 800322c:	e031      	b.n	8003292 <HAL_RCC_OscConfig+0x516>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x4d4>
 8003236:	4b6c      	ldr	r3, [pc, #432]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800323a:	4b6b      	ldr	r3, [pc, #428]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800323c:	496b      	ldr	r1, [pc, #428]	; (80033ec <HAL_RCC_OscConfig+0x670>)
 800323e:	400a      	ands	r2, r1
 8003240:	651a      	str	r2, [r3, #80]	; 0x50
 8003242:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003246:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003248:	496a      	ldr	r1, [pc, #424]	; (80033f4 <HAL_RCC_OscConfig+0x678>)
 800324a:	400a      	ands	r2, r1
 800324c:	651a      	str	r2, [r3, #80]	; 0x50
 800324e:	e020      	b.n	8003292 <HAL_RCC_OscConfig+0x516>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	23a0      	movs	r3, #160	; 0xa0
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	429a      	cmp	r2, r3
 800325a:	d10e      	bne.n	800327a <HAL_RCC_OscConfig+0x4fe>
 800325c:	4b62      	ldr	r3, [pc, #392]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800325e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003260:	4b61      	ldr	r3, [pc, #388]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	00c9      	lsls	r1, r1, #3
 8003266:	430a      	orrs	r2, r1
 8003268:	651a      	str	r2, [r3, #80]	; 0x50
 800326a:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800326c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800326e:	4b5e      	ldr	r3, [pc, #376]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	0049      	lsls	r1, r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	651a      	str	r2, [r3, #80]	; 0x50
 8003278:	e00b      	b.n	8003292 <HAL_RCC_OscConfig+0x516>
 800327a:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800327c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800327e:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003280:	495a      	ldr	r1, [pc, #360]	; (80033ec <HAL_RCC_OscConfig+0x670>)
 8003282:	400a      	ands	r2, r1
 8003284:	651a      	str	r2, [r3, #80]	; 0x50
 8003286:	4b58      	ldr	r3, [pc, #352]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800328a:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800328c:	4959      	ldr	r1, [pc, #356]	; (80033f4 <HAL_RCC_OscConfig+0x678>)
 800328e:	400a      	ands	r2, r1
 8003290:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d015      	beq.n	80032c6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329a:	f7fe f893 	bl	80013c4 <HAL_GetTick>
 800329e:	0003      	movs	r3, r0
 80032a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032a2:	e009      	b.n	80032b8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe f88e 	bl	80013c4 <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_RCC_OscConfig+0x67c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e11a      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032b8:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80032ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4013      	ands	r3, r2
 80032c2:	d0ef      	beq.n	80032a4 <HAL_RCC_OscConfig+0x528>
 80032c4:	e014      	b.n	80032f0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fe f87d 	bl	80013c4 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032ce:	e009      	b.n	80032e4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fe f878 	bl	80013c4 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	4a47      	ldr	r2, [pc, #284]	; (80033f8 <HAL_RCC_OscConfig+0x67c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e104      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032e4:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80032e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4013      	ands	r3, r2
 80032ee:	d1ef      	bne.n	80032d0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032f0:	2327      	movs	r3, #39	; 0x27
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80032fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fe:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003300:	493e      	ldr	r1, [pc, #248]	; (80033fc <HAL_RCC_OscConfig+0x680>)
 8003302:	400a      	ands	r2, r1
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2220      	movs	r2, #32
 800330c:	4013      	ands	r3, r2
 800330e:	d049      	beq.n	80033a4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d026      	beq.n	8003366 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003318:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800331e:	2101      	movs	r1, #1
 8003320:	430a      	orrs	r2, r1
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003328:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800332a:	2101      	movs	r1, #1
 800332c:	430a      	orrs	r2, r1
 800332e:	635a      	str	r2, [r3, #52]	; 0x34
 8003330:	4b33      	ldr	r3, [pc, #204]	; (8003400 <HAL_RCC_OscConfig+0x684>)
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	4b32      	ldr	r3, [pc, #200]	; (8003400 <HAL_RCC_OscConfig+0x684>)
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	0189      	lsls	r1, r1, #6
 800333a:	430a      	orrs	r2, r1
 800333c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fe f841 	bl	80013c4 <HAL_GetTick>
 8003342:	0003      	movs	r3, r0
 8003344:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003348:	f7fe f83c 	bl	80013c4 <HAL_GetTick>
 800334c:	0002      	movs	r2, r0
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e0c9      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800335a:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2202      	movs	r2, #2
 8003360:	4013      	ands	r3, r2
 8003362:	d0f1      	beq.n	8003348 <HAL_RCC_OscConfig+0x5cc>
 8003364:	e01e      	b.n	80033a4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800336c:	2101      	movs	r1, #1
 800336e:	438a      	bics	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_RCC_OscConfig+0x684>)
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_RCC_OscConfig+0x684>)
 8003378:	4922      	ldr	r1, [pc, #136]	; (8003404 <HAL_RCC_OscConfig+0x688>)
 800337a:	400a      	ands	r2, r1
 800337c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7fe f821 	bl	80013c4 <HAL_GetTick>
 8003382:	0003      	movs	r3, r0
 8003384:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003388:	f7fe f81c 	bl	80013c4 <HAL_GetTick>
 800338c:	0002      	movs	r2, r0
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0a9      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2202      	movs	r2, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	d1f1      	bne.n	8003388 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d100      	bne.n	80033ae <HAL_RCC_OscConfig+0x632>
 80033ac:	e09e      	b.n	80034ec <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d100      	bne.n	80033b6 <HAL_RCC_OscConfig+0x63a>
 80033b4:	e077      	b.n	80034a6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d158      	bne.n	8003470 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_OscConfig+0x66c>)
 80033c4:	4910      	ldr	r1, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x68c>)
 80033c6:	400a      	ands	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fd fffb 	bl	80013c4 <HAL_GetTick>
 80033ce:	0003      	movs	r3, r0
 80033d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033d2:	e01b      	b.n	800340c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fd fff6 	bl	80013c4 <HAL_GetTick>
 80033d8:	0002      	movs	r2, r0
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d914      	bls.n	800340c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e083      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	40021000 	.word	0x40021000
 80033ec:	fffffeff 	.word	0xfffffeff
 80033f0:	40007000 	.word	0x40007000
 80033f4:	fffffbff 	.word	0xfffffbff
 80033f8:	00001388 	.word	0x00001388
 80033fc:	efffffff 	.word	0xefffffff
 8003400:	40010000 	.word	0x40010000
 8003404:	ffffdfff 	.word	0xffffdfff
 8003408:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	049b      	lsls	r3, r3, #18
 8003414:	4013      	ands	r3, r2
 8003416:	d1dd      	bne.n	80033d4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003418:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a37      	ldr	r2, [pc, #220]	; (80034fc <HAL_RCC_OscConfig+0x780>)
 800341e:	4013      	ands	r3, r2
 8003420:	0019      	movs	r1, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	431a      	orrs	r2, r3
 8003432:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 8003434:	430a      	orrs	r2, r1
 8003436:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	0449      	lsls	r1, r1, #17
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7fd ffbd 	bl	80013c4 <HAL_GetTick>
 800344a:	0003      	movs	r3, r0
 800344c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd ffb8 	bl	80013c4 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e045      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003462:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	049b      	lsls	r3, r3, #18
 800346a:	4013      	ands	r3, r2
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x6d4>
 800346e:	e03d      	b.n	80034ec <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 8003476:	4922      	ldr	r1, [pc, #136]	; (8003500 <HAL_RCC_OscConfig+0x784>)
 8003478:	400a      	ands	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd ffa2 	bl	80013c4 <HAL_GetTick>
 8003480:	0003      	movs	r3, r0
 8003482:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003486:	f7fd ff9d 	bl	80013c4 <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e02a      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	049b      	lsls	r3, r3, #18
 80034a0:	4013      	ands	r3, r2
 80034a2:	d1f0      	bne.n	8003486 <HAL_RCC_OscConfig+0x70a>
 80034a4:	e022      	b.n	80034ec <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e01d      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCC_OscConfig+0x77c>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	025b      	lsls	r3, r3, #9
 80034be:	401a      	ands	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d10f      	bne.n	80034e8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	23f0      	movs	r3, #240	; 0xf0
 80034cc:	039b      	lsls	r3, r3, #14
 80034ce:	401a      	ands	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	23c0      	movs	r3, #192	; 0xc0
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	401a      	ands	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b00a      	add	sp, #40	; 0x28
 80034f4:	bdb0      	pop	{r4, r5, r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	40021000 	.word	0x40021000
 80034fc:	ff02ffff 	.word	0xff02ffff
 8003500:	feffffff 	.word	0xfeffffff

08003504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003504:	b5b0      	push	{r4, r5, r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e128      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003518:	4b96      	ldr	r3, [pc, #600]	; (8003774 <HAL_RCC_ClockConfig+0x270>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2201      	movs	r2, #1
 800351e:	4013      	ands	r3, r2
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d91e      	bls.n	8003564 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b93      	ldr	r3, [pc, #588]	; (8003774 <HAL_RCC_ClockConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2201      	movs	r2, #1
 800352c:	4393      	bics	r3, r2
 800352e:	0019      	movs	r1, r3
 8003530:	4b90      	ldr	r3, [pc, #576]	; (8003774 <HAL_RCC_ClockConfig+0x270>)
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003538:	f7fd ff44 	bl	80013c4 <HAL_GetTick>
 800353c:	0003      	movs	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003540:	e009      	b.n	8003556 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003542:	f7fd ff3f 	bl	80013c4 <HAL_GetTick>
 8003546:	0002      	movs	r2, r0
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	4a8a      	ldr	r2, [pc, #552]	; (8003778 <HAL_RCC_ClockConfig+0x274>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e109      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b87      	ldr	r3, [pc, #540]	; (8003774 <HAL_RCC_ClockConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	4013      	ands	r3, r2
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d1ee      	bne.n	8003542 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356e:	4b83      	ldr	r3, [pc, #524]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	22f0      	movs	r2, #240	; 0xf0
 8003574:	4393      	bics	r3, r2
 8003576:	0019      	movs	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	4b7f      	ldr	r3, [pc, #508]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 800357e:	430a      	orrs	r2, r1
 8003580:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2201      	movs	r2, #1
 8003588:	4013      	ands	r3, r2
 800358a:	d100      	bne.n	800358e <HAL_RCC_ClockConfig+0x8a>
 800358c:	e089      	b.n	80036a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003596:	4b79      	ldr	r3, [pc, #484]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	4013      	ands	r3, r2
 80035a0:	d120      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0e1      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035ae:	4b73      	ldr	r3, [pc, #460]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	049b      	lsls	r3, r3, #18
 80035b6:	4013      	ands	r3, r2
 80035b8:	d114      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0d5      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035c6:	4b6d      	ldr	r3, [pc, #436]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2204      	movs	r2, #4
 80035cc:	4013      	ands	r3, r2
 80035ce:	d109      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0ca      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035d4:	4b69      	ldr	r3, [pc, #420]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4013      	ands	r3, r2
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0c2      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e4:	4b65      	ldr	r3, [pc, #404]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2203      	movs	r2, #3
 80035ea:	4393      	bics	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	4b62      	ldr	r3, [pc, #392]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 80035f4:	430a      	orrs	r2, r1
 80035f6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fd fee4 	bl	80013c4 <HAL_GetTick>
 80035fc:	0003      	movs	r3, r0
 80035fe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d111      	bne.n	800362c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003608:	e009      	b.n	800361e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360a:	f7fd fedb 	bl	80013c4 <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	4a58      	ldr	r2, [pc, #352]	; (8003778 <HAL_RCC_ClockConfig+0x274>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0a5      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800361e:	4b57      	ldr	r3, [pc, #348]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	220c      	movs	r2, #12
 8003624:	4013      	ands	r3, r2
 8003626:	2b08      	cmp	r3, #8
 8003628:	d1ef      	bne.n	800360a <HAL_RCC_ClockConfig+0x106>
 800362a:	e03a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d111      	bne.n	8003658 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003634:	e009      	b.n	800364a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003636:	f7fd fec5 	bl	80013c4 <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	4a4d      	ldr	r2, [pc, #308]	; (8003778 <HAL_RCC_ClockConfig+0x274>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e08f      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364a:	4b4c      	ldr	r3, [pc, #304]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	220c      	movs	r2, #12
 8003650:	4013      	ands	r3, r2
 8003652:	2b0c      	cmp	r3, #12
 8003654:	d1ef      	bne.n	8003636 <HAL_RCC_ClockConfig+0x132>
 8003656:	e024      	b.n	80036a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d11b      	bne.n	8003698 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003660:	e009      	b.n	8003676 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003662:	f7fd feaf 	bl	80013c4 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	4a42      	ldr	r2, [pc, #264]	; (8003778 <HAL_RCC_ClockConfig+0x274>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e079      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003676:	4b41      	ldr	r3, [pc, #260]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	220c      	movs	r2, #12
 800367c:	4013      	ands	r3, r2
 800367e:	2b04      	cmp	r3, #4
 8003680:	d1ef      	bne.n	8003662 <HAL_RCC_ClockConfig+0x15e>
 8003682:	e00e      	b.n	80036a2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fd fe9e 	bl	80013c4 <HAL_GetTick>
 8003688:	0002      	movs	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <HAL_RCC_ClockConfig+0x274>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e068      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003698:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	220c      	movs	r2, #12
 800369e:	4013      	ands	r3, r2
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a2:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_RCC_ClockConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2201      	movs	r2, #1
 80036a8:	4013      	ands	r3, r2
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d21e      	bcs.n	80036ee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_RCC_ClockConfig+0x270>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4393      	bics	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <HAL_RCC_ClockConfig+0x270>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036c2:	f7fd fe7f 	bl	80013c4 <HAL_GetTick>
 80036c6:	0003      	movs	r3, r0
 80036c8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	e009      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036cc:	f7fd fe7a 	bl	80013c4 <HAL_GetTick>
 80036d0:	0002      	movs	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	4a28      	ldr	r2, [pc, #160]	; (8003778 <HAL_RCC_ClockConfig+0x274>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e044      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_ClockConfig+0x270>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2201      	movs	r2, #1
 80036e6:	4013      	ands	r3, r2
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d1ee      	bne.n	80036cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2204      	movs	r2, #4
 80036f4:	4013      	ands	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a20      	ldr	r2, [pc, #128]	; (8003780 <HAL_RCC_ClockConfig+0x27c>)
 80036fe:	4013      	ands	r3, r2
 8003700:	0019      	movs	r1, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 8003708:	430a      	orrs	r2, r1
 800370a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2208      	movs	r2, #8
 8003712:	4013      	ands	r3, r2
 8003714:	d00a      	beq.n	800372c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003716:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4a1a      	ldr	r2, [pc, #104]	; (8003784 <HAL_RCC_ClockConfig+0x280>)
 800371c:	4013      	ands	r3, r2
 800371e:	0019      	movs	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00da      	lsls	r2, r3, #3
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 8003728:	430a      	orrs	r2, r1
 800372a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372c:	f000 f832 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003730:	0001      	movs	r1, r0
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_RCC_ClockConfig+0x278>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	220f      	movs	r2, #15
 800373a:	4013      	ands	r3, r2
 800373c:	4a12      	ldr	r2, [pc, #72]	; (8003788 <HAL_RCC_ClockConfig+0x284>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	000a      	movs	r2, r1
 8003742:	40da      	lsrs	r2, r3
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_ClockConfig+0x288>)
 8003746:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_RCC_ClockConfig+0x28c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	250b      	movs	r5, #11
 800374e:	197c      	adds	r4, r7, r5
 8003750:	0018      	movs	r0, r3
 8003752:	f7fd fdf1 	bl	8001338 <HAL_InitTick>
 8003756:	0003      	movs	r3, r0
 8003758:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800375a:	197b      	adds	r3, r7, r5
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003762:	197b      	adds	r3, r7, r5
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	e000      	b.n	800376a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bdb0      	pop	{r4, r5, r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	40022000 	.word	0x40022000
 8003778:	00001388 	.word	0x00001388
 800377c:	40021000 	.word	0x40021000
 8003780:	fffff8ff 	.word	0xfffff8ff
 8003784:	ffffc7ff 	.word	0xffffc7ff
 8003788:	080050ec 	.word	0x080050ec
 800378c:	20000000 	.word	0x20000000
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	b5b0      	push	{r4, r5, r7, lr}
 8003796:	b08e      	sub	sp, #56	; 0x38
 8003798:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800379a:	4b4c      	ldr	r3, [pc, #304]	; (80038cc <HAL_RCC_GetSysClockFreq+0x138>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a2:	230c      	movs	r3, #12
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d014      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x40>
 80037aa:	d900      	bls.n	80037ae <HAL_RCC_GetSysClockFreq+0x1a>
 80037ac:	e07b      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x112>
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d002      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x24>
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d00b      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x3a>
 80037b6:	e076      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80037b8:	4b44      	ldr	r3, [pc, #272]	; (80038cc <HAL_RCC_GetSysClockFreq+0x138>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2210      	movs	r2, #16
 80037be:	4013      	ands	r3, r2
 80037c0:	d002      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80037c2:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80037c6:	e07c      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x140>)
 80037ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037cc:	e079      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037ce:	4b42      	ldr	r3, [pc, #264]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x144>)
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037d2:	e076      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	0c9a      	lsrs	r2, r3, #18
 80037d8:	230f      	movs	r3, #15
 80037da:	401a      	ands	r2, r3
 80037dc:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_RCC_GetSysClockFreq+0x148>)
 80037de:	5c9b      	ldrb	r3, [r3, r2]
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	0d9a      	lsrs	r2, r3, #22
 80037e6:	2303      	movs	r3, #3
 80037e8:	4013      	ands	r3, r2
 80037ea:	3301      	adds	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ee:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_RCC_GetSysClockFreq+0x138>)
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	025b      	lsls	r3, r3, #9
 80037f6:	4013      	ands	r3, r2
 80037f8:	d01a      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	4a35      	ldr	r2, [pc, #212]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003804:	2300      	movs	r3, #0
 8003806:	69b8      	ldr	r0, [r7, #24]
 8003808:	69f9      	ldr	r1, [r7, #28]
 800380a:	f7fc fd33 	bl	8000274 <__aeabi_lmul>
 800380e:	0002      	movs	r2, r0
 8003810:	000b      	movs	r3, r1
 8003812:	0010      	movs	r0, r2
 8003814:	0019      	movs	r1, r3
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f7fc fd07 	bl	8000234 <__aeabi_uldivmod>
 8003826:	0002      	movs	r2, r0
 8003828:	000b      	movs	r3, r1
 800382a:	0013      	movs	r3, r2
 800382c:	637b      	str	r3, [r7, #52]	; 0x34
 800382e:	e037      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003830:	4b26      	ldr	r3, [pc, #152]	; (80038cc <HAL_RCC_GetSysClockFreq+0x138>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2210      	movs	r2, #16
 8003836:	4013      	ands	r3, r2
 8003838:	d01a      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4a23      	ldr	r2, [pc, #140]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003844:	2300      	movs	r3, #0
 8003846:	68b8      	ldr	r0, [r7, #8]
 8003848:	68f9      	ldr	r1, [r7, #12]
 800384a:	f7fc fd13 	bl	8000274 <__aeabi_lmul>
 800384e:	0002      	movs	r2, r0
 8003850:	000b      	movs	r3, r1
 8003852:	0010      	movs	r0, r2
 8003854:	0019      	movs	r1, r3
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f7fc fce7 	bl	8000234 <__aeabi_uldivmod>
 8003866:	0002      	movs	r2, r0
 8003868:	000b      	movs	r3, r1
 800386a:	0013      	movs	r3, r2
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
 800386e:	e017      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	0018      	movs	r0, r3
 8003874:	2300      	movs	r3, #0
 8003876:	0019      	movs	r1, r3
 8003878:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x140>)
 800387a:	2300      	movs	r3, #0
 800387c:	f7fc fcfa 	bl	8000274 <__aeabi_lmul>
 8003880:	0002      	movs	r2, r0
 8003882:	000b      	movs	r3, r1
 8003884:	0010      	movs	r0, r2
 8003886:	0019      	movs	r1, r3
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	001c      	movs	r4, r3
 800388c:	2300      	movs	r3, #0
 800388e:	001d      	movs	r5, r3
 8003890:	0022      	movs	r2, r4
 8003892:	002b      	movs	r3, r5
 8003894:	f7fc fcce 	bl	8000234 <__aeabi_uldivmod>
 8003898:	0002      	movs	r2, r0
 800389a:	000b      	movs	r3, r1
 800389c:	0013      	movs	r3, r2
 800389e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80038a4:	e00d      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_GetSysClockFreq+0x138>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0b5b      	lsrs	r3, r3, #13
 80038ac:	2207      	movs	r2, #7
 80038ae:	4013      	ands	r3, r2
 80038b0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	3301      	adds	r3, #1
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	0212      	lsls	r2, r2, #8
 80038ba:	409a      	lsls	r2, r3
 80038bc:	0013      	movs	r3, r2
 80038be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80038c0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80038c4:	0018      	movs	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b00e      	add	sp, #56	; 0x38
 80038ca:	bdb0      	pop	{r4, r5, r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	003d0900 	.word	0x003d0900
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	007a1200 	.word	0x007a1200
 80038dc:	080050fc 	.word	0x080050fc

080038e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80038e8:	2017      	movs	r0, #23
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2220      	movs	r2, #32
 80038f6:	4013      	ands	r3, r2
 80038f8:	d100      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80038fa:	e0c2      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fc:	4b90      	ldr	r3, [pc, #576]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	055b      	lsls	r3, r3, #21
 8003904:	4013      	ands	r3, r2
 8003906:	d109      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003908:	4b8d      	ldr	r3, [pc, #564]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390c:	4b8c      	ldr	r3, [pc, #560]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	0549      	lsls	r1, r1, #21
 8003912:	430a      	orrs	r2, r1
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003916:	183b      	adds	r3, r7, r0
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	4b89      	ldr	r3, [pc, #548]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4013      	ands	r3, r2
 8003926:	d11a      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003928:	4b86      	ldr	r3, [pc, #536]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b85      	ldr	r3, [pc, #532]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	0049      	lsls	r1, r1, #1
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003936:	f7fd fd45 	bl	80013c4 <HAL_GetTick>
 800393a:	0003      	movs	r3, r0
 800393c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	e008      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003940:	f7fd fd40 	bl	80013c4 <HAL_GetTick>
 8003944:	0002      	movs	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e0f2      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	4b7c      	ldr	r3, [pc, #496]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4013      	ands	r3, r2
 800395c:	d0f0      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800395e:	4b78      	ldr	r3, [pc, #480]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	23c0      	movs	r3, #192	; 0xc0
 8003964:	039b      	lsls	r3, r3, #14
 8003966:	4013      	ands	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	23c0      	movs	r3, #192	; 0xc0
 8003970:	039b      	lsls	r3, r3, #14
 8003972:	4013      	ands	r3, r2
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	429a      	cmp	r2, r3
 8003978:	d013      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	23c0      	movs	r3, #192	; 0xc0
 8003980:	029b      	lsls	r3, r3, #10
 8003982:	401a      	ands	r2, r3
 8003984:	23c0      	movs	r3, #192	; 0xc0
 8003986:	029b      	lsls	r3, r3, #10
 8003988:	429a      	cmp	r2, r3
 800398a:	d10a      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800398c:	4b6c      	ldr	r3, [pc, #432]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	029b      	lsls	r3, r3, #10
 8003994:	401a      	ands	r2, r3
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	029b      	lsls	r3, r3, #10
 800399a:	429a      	cmp	r2, r3
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0ca      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80039a2:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039a6:	23c0      	movs	r3, #192	; 0xc0
 80039a8:	029b      	lsls	r3, r3, #10
 80039aa:	4013      	ands	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d03b      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	23c0      	movs	r3, #192	; 0xc0
 80039ba:	029b      	lsls	r3, r3, #10
 80039bc:	4013      	ands	r3, r2
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d033      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2220      	movs	r2, #32
 80039ca:	4013      	ands	r3, r2
 80039cc:	d02e      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039ce:	4b5c      	ldr	r3, [pc, #368]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d2:	4a5d      	ldr	r2, [pc, #372]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d8:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039dc:	4b58      	ldr	r3, [pc, #352]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	0309      	lsls	r1, r1, #12
 80039e2:	430a      	orrs	r2, r1
 80039e4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e6:	4b56      	ldr	r3, [pc, #344]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039ea:	4b55      	ldr	r3, [pc, #340]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ec:	4957      	ldr	r1, [pc, #348]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80039ee:	400a      	ands	r2, r1
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80039f2:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4013      	ands	r3, r2
 8003a00:	d014      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fd fcdf 	bl	80013c4 <HAL_GetTick>
 8003a06:	0003      	movs	r3, r0
 8003a08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a0a:	e009      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fcda 	bl	80013c4 <HAL_GetTick>
 8003a10:	0002      	movs	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	4a4e      	ldr	r2, [pc, #312]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e08b      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a20:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d0ef      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	23c0      	movs	r3, #192	; 0xc0
 8003a32:	029b      	lsls	r3, r3, #10
 8003a34:	401a      	ands	r2, r3
 8003a36:	23c0      	movs	r3, #192	; 0xc0
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003a3e:	4b40      	ldr	r3, [pc, #256]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a44      	ldr	r2, [pc, #272]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	23c0      	movs	r3, #192	; 0xc0
 8003a4e:	039b      	lsls	r3, r3, #14
 8003a50:	401a      	ands	r2, r3
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	4b39      	ldr	r3, [pc, #228]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	23c0      	movs	r3, #192	; 0xc0
 8003a62:	029b      	lsls	r3, r3, #10
 8003a64:	401a      	ands	r2, r3
 8003a66:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a6c:	2317      	movs	r3, #23
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d105      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a76:	4b32      	ldr	r3, [pc, #200]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7a:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7c:	4936      	ldr	r1, [pc, #216]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003a7e:	400a      	ands	r2, r1
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a8c:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	2203      	movs	r2, #3
 8003a92:	4393      	bics	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aaa:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	220c      	movs	r2, #12
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	430a      	orrs	r2, r1
 8003abc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	4a23      	ldr	r2, [pc, #140]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ae6:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2240      	movs	r2, #64	; 0x40
 8003b00:	4013      	ands	r3, r2
 8003b02:	d009      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b08:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b32:	430a      	orrs	r2, r1
 8003b34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	0018      	movs	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b006      	add	sp, #24
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	fffcffff 	.word	0xfffcffff
 8003b4c:	fff7ffff 	.word	0xfff7ffff
 8003b50:	00001388 	.word	0x00001388
 8003b54:	ffcfffff 	.word	0xffcfffff
 8003b58:	efffffff 	.word	0xefffffff
 8003b5c:	fffff3ff 	.word	0xfffff3ff
 8003b60:	ffffcfff 	.word	0xffffcfff
 8003b64:	fbffffff 	.word	0xfbffffff
 8003b68:	fff3ffff 	.word	0xfff3ffff

08003b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e032      	b.n	8003be4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2239      	movs	r2, #57	; 0x39
 8003b82:	5c9b      	ldrb	r3, [r3, r2]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2238      	movs	r2, #56	; 0x38
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7fd fa77 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2239      	movs	r2, #57	; 0x39
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	0019      	movs	r1, r3
 8003bac:	0010      	movs	r0, r2
 8003bae:	f000 fab3 	bl	8004118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	223e      	movs	r2, #62	; 0x3e
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	223a      	movs	r2, #58	; 0x3a
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	5499      	strb	r1, [r3, r2]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	223b      	movs	r2, #59	; 0x3b
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	5499      	strb	r1, [r3, r2]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	223c      	movs	r2, #60	; 0x3c
 8003bce:	2101      	movs	r1, #1
 8003bd0:	5499      	strb	r1, [r3, r2]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	223d      	movs	r2, #61	; 0x3d
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2239      	movs	r2, #57	; 0x39
 8003bde:	2101      	movs	r1, #1
 8003be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2239      	movs	r2, #57	; 0x39
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e02e      	b.n	8003c62 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2239      	movs	r2, #57	; 0x39
 8003c08:	2102      	movs	r1, #2
 8003c0a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	05db      	lsls	r3, r3, #23
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d009      	beq.n	8003c2c <HAL_TIM_Base_Start+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <HAL_TIM_Base_Start+0x80>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_Base_Start+0x40>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <HAL_TIM_Base_Start+0x84>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d111      	bne.n	8003c50 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2207      	movs	r2, #7
 8003c34:	4013      	ands	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d010      	beq.n	8003c60 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4e:	e007      	b.n	8003c60 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b004      	add	sp, #16
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	40010800 	.word	0x40010800
 8003c70:	40011400 	.word	0x40011400

08003c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e032      	b.n	8003cec <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2239      	movs	r2, #57	; 0x39
 8003c8a:	5c9b      	ldrb	r3, [r3, r2]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2238      	movs	r2, #56	; 0x38
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7fd fa17 	bl	80010d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2239      	movs	r2, #57	; 0x39
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	0010      	movs	r0, r2
 8003cb6:	f000 fa2f 	bl	8004118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	223e      	movs	r2, #62	; 0x3e
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	223a      	movs	r2, #58	; 0x3a
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	5499      	strb	r1, [r3, r2]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	223b      	movs	r2, #59	; 0x3b
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	223c      	movs	r2, #60	; 0x3c
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	5499      	strb	r1, [r3, r2]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223d      	movs	r2, #61	; 0x3d
 8003cde:	2101      	movs	r1, #1
 8003ce0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2239      	movs	r2, #57	; 0x39
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d108      	bne.n	8003d16 <HAL_TIM_PWM_Start+0x22>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	223a      	movs	r2, #58	; 0x3a
 8003d08:	5c9b      	ldrb	r3, [r3, r2]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	1e5a      	subs	r2, r3, #1
 8003d10:	4193      	sbcs	r3, r2
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	e01f      	b.n	8003d56 <HAL_TIM_PWM_Start+0x62>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d108      	bne.n	8003d2e <HAL_TIM_PWM_Start+0x3a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	223b      	movs	r2, #59	; 0x3b
 8003d20:	5c9b      	ldrb	r3, [r3, r2]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	1e5a      	subs	r2, r3, #1
 8003d28:	4193      	sbcs	r3, r2
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	e013      	b.n	8003d56 <HAL_TIM_PWM_Start+0x62>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d108      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x52>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	223c      	movs	r2, #60	; 0x3c
 8003d38:	5c9b      	ldrb	r3, [r3, r2]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	1e5a      	subs	r2, r3, #1
 8003d40:	4193      	sbcs	r3, r2
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	e007      	b.n	8003d56 <HAL_TIM_PWM_Start+0x62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	223d      	movs	r2, #61	; 0x3d
 8003d4a:	5c9b      	ldrb	r3, [r3, r2]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	1e5a      	subs	r2, r3, #1
 8003d52:	4193      	sbcs	r3, r2
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e04d      	b.n	8003dfa <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x7a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	223a      	movs	r2, #58	; 0x3a
 8003d68:	2102      	movs	r1, #2
 8003d6a:	5499      	strb	r1, [r3, r2]
 8003d6c:	e013      	b.n	8003d96 <HAL_TIM_PWM_Start+0xa2>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0x8a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	223b      	movs	r2, #59	; 0x3b
 8003d78:	2102      	movs	r1, #2
 8003d7a:	5499      	strb	r1, [r3, r2]
 8003d7c:	e00b      	b.n	8003d96 <HAL_TIM_PWM_Start+0xa2>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x9a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	223c      	movs	r2, #60	; 0x3c
 8003d88:	2102      	movs	r1, #2
 8003d8a:	5499      	strb	r1, [r3, r2]
 8003d8c:	e003      	b.n	8003d96 <HAL_TIM_PWM_Start+0xa2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	223d      	movs	r2, #61	; 0x3d
 8003d92:	2102      	movs	r1, #2
 8003d94:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 fbac 	bl	80044fc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	05db      	lsls	r3, r3, #23
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d009      	beq.n	8003dc4 <HAL_TIM_PWM_Start+0xd0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <HAL_TIM_PWM_Start+0x110>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_TIM_PWM_Start+0xd0>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <HAL_TIM_PWM_Start+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d111      	bne.n	8003de8 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2207      	movs	r2, #7
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d010      	beq.n	8003df8 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2101      	movs	r1, #1
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de6:	e007      	b.n	8003df8 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2101      	movs	r1, #1
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b004      	add	sp, #16
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	40010800 	.word	0x40010800
 8003e08:	40011400 	.word	0x40011400

08003e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2238      	movs	r2, #56	; 0x38
 8003e1c:	5c9b      	ldrb	r3, [r3, r2]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e0a7      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2238      	movs	r2, #56	; 0x38
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b0c      	cmp	r3, #12
 8003e32:	d100      	bne.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003e34:	e076      	b.n	8003f24 <HAL_TIM_PWM_ConfigChannel+0x118>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d900      	bls.n	8003e3e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003e3c:	e095      	b.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x15e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d04e      	beq.n	8003ee2 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d900      	bls.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x40>
 8003e4a:	e08e      	b.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x15e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d021      	beq.n	8003e9c <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003e58:	e087      	b.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	0011      	movs	r1, r2
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 f9ac 	bl	80041c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2108      	movs	r1, #8
 8003e74:	430a      	orrs	r2, r1
 8003e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2104      	movs	r1, #4
 8003e84:	438a      	bics	r2, r1
 8003e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6999      	ldr	r1, [r3, #24]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	619a      	str	r2, [r3, #24]
      break;
 8003e9a:	e067      	b.n	8003f6c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 f9c7 	bl	8004238 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2180      	movs	r1, #128	; 0x80
 8003eb6:	0109      	lsls	r1, r1, #4
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	492e      	ldr	r1, [pc, #184]	; (8003f80 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6999      	ldr	r1, [r3, #24]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	021a      	lsls	r2, r3, #8
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	619a      	str	r2, [r3, #24]
      break;
 8003ee0:	e044      	b.n	8003f6c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	0011      	movs	r1, r2
 8003eea:	0018      	movs	r0, r3
 8003eec:	f000 f9e6 	bl	80042bc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2108      	movs	r1, #8
 8003efc:	430a      	orrs	r2, r1
 8003efe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69d9      	ldr	r1, [r3, #28]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	61da      	str	r2, [r3, #28]
      break;
 8003f22:	e023      	b.n	8003f6c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 fa05 	bl	800433c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	0109      	lsls	r1, r1, #4
 8003f40:	430a      	orrs	r2, r1
 8003f42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	490c      	ldr	r1, [pc, #48]	; (8003f80 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69d9      	ldr	r1, [r3, #28]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	021a      	lsls	r2, r3, #8
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]
      break;
 8003f68:	e000      	b.n	8003f6c <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8003f6a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2238      	movs	r2, #56	; 0x38
 8003f70:	2100      	movs	r1, #0
 8003f72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b004      	add	sp, #16
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	fffffbff 	.word	0xfffffbff

08003f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2238      	movs	r2, #56	; 0x38
 8003f92:	5c9b      	ldrb	r3, [r3, r2]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_TIM_ConfigClockSource+0x18>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e0b7      	b.n	800410c <HAL_TIM_ConfigClockSource+0x188>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2238      	movs	r2, #56	; 0x38
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2239      	movs	r2, #57	; 0x39
 8003fa8:	2102      	movs	r1, #2
 8003faa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2277      	movs	r2, #119	; 0x77
 8003fb8:	4393      	bics	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a55      	ldr	r2, [pc, #340]	; (8004114 <HAL_TIM_ConfigClockSource+0x190>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	0192      	lsls	r2, r2, #6
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d040      	beq.n	800405a <HAL_TIM_ConfigClockSource+0xd6>
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	0192      	lsls	r2, r2, #6
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d900      	bls.n	8003fe2 <HAL_TIM_ConfigClockSource+0x5e>
 8003fe0:	e088      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x170>
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	0152      	lsls	r2, r2, #5
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d100      	bne.n	8003fec <HAL_TIM_ConfigClockSource+0x68>
 8003fea:	e085      	b.n	80040f8 <HAL_TIM_ConfigClockSource+0x174>
 8003fec:	2280      	movs	r2, #128	; 0x80
 8003fee:	0152      	lsls	r2, r2, #5
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d900      	bls.n	8003ff6 <HAL_TIM_ConfigClockSource+0x72>
 8003ff4:	e07e      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x170>
 8003ff6:	2b70      	cmp	r3, #112	; 0x70
 8003ff8:	d018      	beq.n	800402c <HAL_TIM_ConfigClockSource+0xa8>
 8003ffa:	d900      	bls.n	8003ffe <HAL_TIM_ConfigClockSource+0x7a>
 8003ffc:	e07a      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x170>
 8003ffe:	2b60      	cmp	r3, #96	; 0x60
 8004000:	d04f      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x11e>
 8004002:	d900      	bls.n	8004006 <HAL_TIM_ConfigClockSource+0x82>
 8004004:	e076      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x170>
 8004006:	2b50      	cmp	r3, #80	; 0x50
 8004008:	d03b      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0xfe>
 800400a:	d900      	bls.n	800400e <HAL_TIM_ConfigClockSource+0x8a>
 800400c:	e072      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x170>
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d057      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x13e>
 8004012:	d900      	bls.n	8004016 <HAL_TIM_ConfigClockSource+0x92>
 8004014:	e06e      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x170>
 8004016:	2b30      	cmp	r3, #48	; 0x30
 8004018:	d063      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15e>
 800401a:	d86b      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x170>
 800401c:	2b20      	cmp	r3, #32
 800401e:	d060      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004020:	d868      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x170>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d05d      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004026:	2b10      	cmp	r3, #16
 8004028:	d05b      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800402a:	e063      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6899      	ldr	r1, [r3, #8]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f000 fa3e 	bl	80044bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2277      	movs	r2, #119	; 0x77
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]
      break;
 8004058:	e04f      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6899      	ldr	r1, [r3, #8]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f000 fa27 	bl	80044bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	01c9      	lsls	r1, r1, #7
 800407c:	430a      	orrs	r2, r1
 800407e:	609a      	str	r2, [r3, #8]
      break;
 8004080:	e03b      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	001a      	movs	r2, r3
 8004090:	f000 f99a 	bl	80043c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2150      	movs	r1, #80	; 0x50
 800409a:	0018      	movs	r0, r3
 800409c:	f000 f9f4 	bl	8004488 <TIM_ITRx_SetConfig>
      break;
 80040a0:	e02b      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	001a      	movs	r2, r3
 80040b0:	f000 f9b8 	bl	8004424 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2160      	movs	r1, #96	; 0x60
 80040ba:	0018      	movs	r0, r3
 80040bc:	f000 f9e4 	bl	8004488 <TIM_ITRx_SetConfig>
      break;
 80040c0:	e01b      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	001a      	movs	r2, r3
 80040d0:	f000 f97a 	bl	80043c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2140      	movs	r1, #64	; 0x40
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 f9d4 	bl	8004488 <TIM_ITRx_SetConfig>
      break;
 80040e0:	e00b      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	0019      	movs	r1, r3
 80040ec:	0010      	movs	r0, r2
 80040ee:	f000 f9cb 	bl	8004488 <TIM_ITRx_SetConfig>
        break;
 80040f2:	e002      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x176>
      break;
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	e000      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x176>
      break;
 80040f8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2239      	movs	r2, #57	; 0x39
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2238      	movs	r2, #56	; 0x38
 8004106:	2100      	movs	r1, #0
 8004108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b004      	add	sp, #16
 8004112:	bd80      	pop	{r7, pc}
 8004114:	ffff00ff 	.word	0xffff00ff

08004118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	05db      	lsls	r3, r3, #23
 800412e:	429a      	cmp	r2, r3
 8004130:	d007      	beq.n	8004142 <TIM_Base_SetConfig+0x2a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <TIM_Base_SetConfig+0x9c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <TIM_Base_SetConfig+0x2a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <TIM_Base_SetConfig+0xa0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d108      	bne.n	8004154 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2270      	movs	r2, #112	; 0x70
 8004146:	4393      	bics	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	05db      	lsls	r3, r3, #23
 800415a:	429a      	cmp	r2, r3
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0x56>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <TIM_Base_SetConfig+0x9c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0x56>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <TIM_Base_SetConfig+0xa0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a12      	ldr	r2, [pc, #72]	; (80041bc <TIM_Base_SetConfig+0xa4>)
 8004172:	4013      	ands	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2280      	movs	r2, #128	; 0x80
 8004184:	4393      	bics	r3, r2
 8004186:	001a      	movs	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	615a      	str	r2, [r3, #20]
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b004      	add	sp, #16
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40010800 	.word	0x40010800
 80041b8:	40011400 	.word	0x40011400
 80041bc:	fffffcff 	.word	0xfffffcff

080041c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	2201      	movs	r2, #1
 80041d0:	4393      	bics	r3, r2
 80041d2:	001a      	movs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2270      	movs	r2, #112	; 0x70
 80041ee:	4393      	bics	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2203      	movs	r2, #3
 80041f6:	4393      	bics	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2202      	movs	r2, #2
 8004208:	4393      	bics	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b006      	add	sp, #24
 8004236:	bd80      	pop	{r7, pc}

08004238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	2210      	movs	r2, #16
 8004248:	4393      	bics	r3, r2
 800424a:	001a      	movs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <TIM_OC2_SetConfig+0x7c>)
 8004266:	4013      	ands	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <TIM_OC2_SetConfig+0x80>)
 800426e:	4013      	ands	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2220      	movs	r2, #32
 8004282:	4393      	bics	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	621a      	str	r2, [r3, #32]
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b006      	add	sp, #24
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	ffff8fff 	.word	0xffff8fff
 80042b8:	fffffcff 	.word	0xfffffcff

080042bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	4a1a      	ldr	r2, [pc, #104]	; (8004334 <TIM_OC3_SetConfig+0x78>)
 80042cc:	401a      	ands	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2270      	movs	r2, #112	; 0x70
 80042e8:	4393      	bics	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2203      	movs	r2, #3
 80042f0:	4393      	bics	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <TIM_OC3_SetConfig+0x7c>)
 8004302:	4013      	ands	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	621a      	str	r2, [r3, #32]
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b006      	add	sp, #24
 8004332:	bd80      	pop	{r7, pc}
 8004334:	fffffeff 	.word	0xfffffeff
 8004338:	fffffdff 	.word	0xfffffdff

0800433c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <TIM_OC4_SetConfig+0x7c>)
 800434c:	401a      	ands	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a15      	ldr	r2, [pc, #84]	; (80043bc <TIM_OC4_SetConfig+0x80>)
 8004368:	4013      	ands	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <TIM_OC4_SetConfig+0x84>)
 8004370:	4013      	ands	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	4a10      	ldr	r2, [pc, #64]	; (80043c4 <TIM_OC4_SetConfig+0x88>)
 8004384:	4013      	ands	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	031b      	lsls	r3, r3, #12
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b006      	add	sp, #24
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	ffffefff 	.word	0xffffefff
 80043bc:	ffff8fff 	.word	0xffff8fff
 80043c0:	fffffcff 	.word	0xfffffcff
 80043c4:	ffffdfff 	.word	0xffffdfff

080043c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	2201      	movs	r2, #1
 80043e0:	4393      	bics	r3, r2
 80043e2:	001a      	movs	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	22f0      	movs	r2, #240	; 0xf0
 80043f2:	4393      	bics	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	220a      	movs	r2, #10
 8004404:	4393      	bics	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	621a      	str	r2, [r3, #32]
}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b006      	add	sp, #24
 8004422:	bd80      	pop	{r7, pc}

08004424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	2210      	movs	r2, #16
 8004436:	4393      	bics	r3, r2
 8004438:	001a      	movs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4a0d      	ldr	r2, [pc, #52]	; (8004484 <TIM_TI2_ConfigInputStage+0x60>)
 800444e:	4013      	ands	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	031b      	lsls	r3, r3, #12
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	22a0      	movs	r2, #160	; 0xa0
 8004460:	4393      	bics	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b006      	add	sp, #24
 8004480:	bd80      	pop	{r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	ffff0fff 	.word	0xffff0fff

08004488 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2270      	movs	r2, #112	; 0x70
 800449c:	4393      	bics	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	2207      	movs	r2, #7
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	609a      	str	r2, [r3, #8]
}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b004      	add	sp, #16
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <TIM_ETR_SetConfig+0x3c>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	021a      	lsls	r2, r3, #8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	431a      	orrs	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	609a      	str	r2, [r3, #8]
}
 80044f0:	46c0      	nop			; (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b006      	add	sp, #24
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	ffff00ff 	.word	0xffff00ff

080044fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	221f      	movs	r2, #31
 800450c:	4013      	ands	r3, r2
 800450e:	2201      	movs	r2, #1
 8004510:	409a      	lsls	r2, r3
 8004512:	0013      	movs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	43d2      	mvns	r2, r2
 800451e:	401a      	ands	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1a      	ldr	r2, [r3, #32]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	211f      	movs	r1, #31
 800452c:	400b      	ands	r3, r1
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4099      	lsls	r1, r3
 8004532:	000b      	movs	r3, r1
 8004534:	431a      	orrs	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	621a      	str	r2, [r3, #32]
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	b006      	add	sp, #24
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2238      	movs	r2, #56	; 0x38
 8004552:	5c9b      	ldrb	r3, [r3, r2]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004558:	2302      	movs	r3, #2
 800455a:	e042      	b.n	80045e2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2238      	movs	r2, #56	; 0x38
 8004560:	2101      	movs	r1, #1
 8004562:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2239      	movs	r2, #57	; 0x39
 8004568:	2102      	movs	r1, #2
 800456a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2270      	movs	r2, #112	; 0x70
 8004580:	4393      	bics	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	05db      	lsls	r3, r3, #23
 800459e:	429a      	cmp	r2, r3
 80045a0:	d009      	beq.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a11      	ldr	r2, [pc, #68]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0f      	ldr	r2, [pc, #60]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d10c      	bne.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2280      	movs	r2, #128	; 0x80
 80045ba:	4393      	bics	r3, r2
 80045bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2239      	movs	r2, #57	; 0x39
 80045d4:	2101      	movs	r1, #1
 80045d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2238      	movs	r2, #56	; 0x38
 80045dc:	2100      	movs	r1, #0
 80045de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b004      	add	sp, #16
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	40010800 	.word	0x40010800
 80045f0:	40011400 	.word	0x40011400

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	2000000c 	.word	0x2000000c

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	2600      	movs	r6, #0
 8004604:	4d0c      	ldr	r5, [pc, #48]	; (8004638 <__libc_init_array+0x38>)
 8004606:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004608:	1b64      	subs	r4, r4, r5
 800460a:	10a4      	asrs	r4, r4, #2
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	2600      	movs	r6, #0
 8004612:	f000 fc47 	bl	8004ea4 <_init>
 8004616:	4d0a      	ldr	r5, [pc, #40]	; (8004640 <__libc_init_array+0x40>)
 8004618:	4c0a      	ldr	r4, [pc, #40]	; (8004644 <__libc_init_array+0x44>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	00b3      	lsls	r3, r6, #2
 8004626:	58eb      	ldr	r3, [r5, r3]
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	00b3      	lsls	r3, r6, #2
 8004630:	58eb      	ldr	r3, [r5, r3]
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08005140 	.word	0x08005140
 800463c:	08005140 	.word	0x08005140
 8004640:	08005140 	.word	0x08005140
 8004644:	08005144 	.word	0x08005144

08004648 <memset>:
 8004648:	0003      	movs	r3, r0
 800464a:	1882      	adds	r2, r0, r2
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	7019      	strb	r1, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <siprintf>:
 8004658:	b40e      	push	{r1, r2, r3}
 800465a:	b500      	push	{lr}
 800465c:	490b      	ldr	r1, [pc, #44]	; (800468c <siprintf+0x34>)
 800465e:	b09c      	sub	sp, #112	; 0x70
 8004660:	ab1d      	add	r3, sp, #116	; 0x74
 8004662:	9002      	str	r0, [sp, #8]
 8004664:	9006      	str	r0, [sp, #24]
 8004666:	9107      	str	r1, [sp, #28]
 8004668:	9104      	str	r1, [sp, #16]
 800466a:	4809      	ldr	r0, [pc, #36]	; (8004690 <siprintf+0x38>)
 800466c:	4909      	ldr	r1, [pc, #36]	; (8004694 <siprintf+0x3c>)
 800466e:	cb04      	ldmia	r3!, {r2}
 8004670:	9105      	str	r1, [sp, #20]
 8004672:	6800      	ldr	r0, [r0, #0]
 8004674:	a902      	add	r1, sp, #8
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	f000 f870 	bl	800475c <_svfiprintf_r>
 800467c:	2300      	movs	r3, #0
 800467e:	9a02      	ldr	r2, [sp, #8]
 8004680:	7013      	strb	r3, [r2, #0]
 8004682:	b01c      	add	sp, #112	; 0x70
 8004684:	bc08      	pop	{r3}
 8004686:	b003      	add	sp, #12
 8004688:	4718      	bx	r3
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	7fffffff 	.word	0x7fffffff
 8004690:	2000000c 	.word	0x2000000c
 8004694:	ffff0208 	.word	0xffff0208

08004698 <__ssputs_r>:
 8004698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469a:	688e      	ldr	r6, [r1, #8]
 800469c:	b085      	sub	sp, #20
 800469e:	0007      	movs	r7, r0
 80046a0:	000c      	movs	r4, r1
 80046a2:	9203      	str	r2, [sp, #12]
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	429e      	cmp	r6, r3
 80046a8:	d83c      	bhi.n	8004724 <__ssputs_r+0x8c>
 80046aa:	2390      	movs	r3, #144	; 0x90
 80046ac:	898a      	ldrh	r2, [r1, #12]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	421a      	tst	r2, r3
 80046b2:	d034      	beq.n	800471e <__ssputs_r+0x86>
 80046b4:	2503      	movs	r5, #3
 80046b6:	6909      	ldr	r1, [r1, #16]
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	1a5b      	subs	r3, r3, r1
 80046bc:	9302      	str	r3, [sp, #8]
 80046be:	6963      	ldr	r3, [r4, #20]
 80046c0:	9802      	ldr	r0, [sp, #8]
 80046c2:	435d      	muls	r5, r3
 80046c4:	0feb      	lsrs	r3, r5, #31
 80046c6:	195d      	adds	r5, r3, r5
 80046c8:	9b01      	ldr	r3, [sp, #4]
 80046ca:	106d      	asrs	r5, r5, #1
 80046cc:	3301      	adds	r3, #1
 80046ce:	181b      	adds	r3, r3, r0
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	d900      	bls.n	80046d6 <__ssputs_r+0x3e>
 80046d4:	001d      	movs	r5, r3
 80046d6:	0553      	lsls	r3, r2, #21
 80046d8:	d532      	bpl.n	8004740 <__ssputs_r+0xa8>
 80046da:	0029      	movs	r1, r5
 80046dc:	0038      	movs	r0, r7
 80046de:	f000 fb31 	bl	8004d44 <_malloc_r>
 80046e2:	1e06      	subs	r6, r0, #0
 80046e4:	d109      	bne.n	80046fa <__ssputs_r+0x62>
 80046e6:	230c      	movs	r3, #12
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	2340      	movs	r3, #64	; 0x40
 80046ec:	2001      	movs	r0, #1
 80046ee:	89a2      	ldrh	r2, [r4, #12]
 80046f0:	4240      	negs	r0, r0
 80046f2:	4313      	orrs	r3, r2
 80046f4:	81a3      	strh	r3, [r4, #12]
 80046f6:	b005      	add	sp, #20
 80046f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046fa:	9a02      	ldr	r2, [sp, #8]
 80046fc:	6921      	ldr	r1, [r4, #16]
 80046fe:	f000 faba 	bl	8004c76 <memcpy>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <__ssputs_r+0xc0>)
 8004706:	401a      	ands	r2, r3
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	4313      	orrs	r3, r2
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	9b02      	ldr	r3, [sp, #8]
 8004710:	6126      	str	r6, [r4, #16]
 8004712:	18f6      	adds	r6, r6, r3
 8004714:	6026      	str	r6, [r4, #0]
 8004716:	6165      	str	r5, [r4, #20]
 8004718:	9e01      	ldr	r6, [sp, #4]
 800471a:	1aed      	subs	r5, r5, r3
 800471c:	60a5      	str	r5, [r4, #8]
 800471e:	9b01      	ldr	r3, [sp, #4]
 8004720:	429e      	cmp	r6, r3
 8004722:	d900      	bls.n	8004726 <__ssputs_r+0x8e>
 8004724:	9e01      	ldr	r6, [sp, #4]
 8004726:	0032      	movs	r2, r6
 8004728:	9903      	ldr	r1, [sp, #12]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	f000 faac 	bl	8004c88 <memmove>
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	2000      	movs	r0, #0
 8004734:	1b9b      	subs	r3, r3, r6
 8004736:	60a3      	str	r3, [r4, #8]
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	199e      	adds	r6, r3, r6
 800473c:	6026      	str	r6, [r4, #0]
 800473e:	e7da      	b.n	80046f6 <__ssputs_r+0x5e>
 8004740:	002a      	movs	r2, r5
 8004742:	0038      	movs	r0, r7
 8004744:	f000 fb5c 	bl	8004e00 <_realloc_r>
 8004748:	1e06      	subs	r6, r0, #0
 800474a:	d1e0      	bne.n	800470e <__ssputs_r+0x76>
 800474c:	0038      	movs	r0, r7
 800474e:	6921      	ldr	r1, [r4, #16]
 8004750:	f000 faae 	bl	8004cb0 <_free_r>
 8004754:	e7c7      	b.n	80046e6 <__ssputs_r+0x4e>
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	fffffb7f 	.word	0xfffffb7f

0800475c <_svfiprintf_r>:
 800475c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475e:	b0a1      	sub	sp, #132	; 0x84
 8004760:	9003      	str	r0, [sp, #12]
 8004762:	001d      	movs	r5, r3
 8004764:	898b      	ldrh	r3, [r1, #12]
 8004766:	000f      	movs	r7, r1
 8004768:	0016      	movs	r6, r2
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	d511      	bpl.n	8004792 <_svfiprintf_r+0x36>
 800476e:	690b      	ldr	r3, [r1, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10e      	bne.n	8004792 <_svfiprintf_r+0x36>
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	f000 fae5 	bl	8004d44 <_malloc_r>
 800477a:	6038      	str	r0, [r7, #0]
 800477c:	6138      	str	r0, [r7, #16]
 800477e:	2800      	cmp	r0, #0
 8004780:	d105      	bne.n	800478e <_svfiprintf_r+0x32>
 8004782:	230c      	movs	r3, #12
 8004784:	9a03      	ldr	r2, [sp, #12]
 8004786:	3801      	subs	r0, #1
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	b021      	add	sp, #132	; 0x84
 800478c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800478e:	2340      	movs	r3, #64	; 0x40
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	2300      	movs	r3, #0
 8004794:	ac08      	add	r4, sp, #32
 8004796:	6163      	str	r3, [r4, #20]
 8004798:	3320      	adds	r3, #32
 800479a:	7663      	strb	r3, [r4, #25]
 800479c:	3310      	adds	r3, #16
 800479e:	76a3      	strb	r3, [r4, #26]
 80047a0:	9507      	str	r5, [sp, #28]
 80047a2:	0035      	movs	r5, r6
 80047a4:	782b      	ldrb	r3, [r5, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <_svfiprintf_r+0x52>
 80047aa:	2b25      	cmp	r3, #37	; 0x25
 80047ac:	d147      	bne.n	800483e <_svfiprintf_r+0xe2>
 80047ae:	1bab      	subs	r3, r5, r6
 80047b0:	9305      	str	r3, [sp, #20]
 80047b2:	42b5      	cmp	r5, r6
 80047b4:	d00c      	beq.n	80047d0 <_svfiprintf_r+0x74>
 80047b6:	0032      	movs	r2, r6
 80047b8:	0039      	movs	r1, r7
 80047ba:	9803      	ldr	r0, [sp, #12]
 80047bc:	f7ff ff6c 	bl	8004698 <__ssputs_r>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d100      	bne.n	80047c6 <_svfiprintf_r+0x6a>
 80047c4:	e0ae      	b.n	8004924 <_svfiprintf_r+0x1c8>
 80047c6:	6962      	ldr	r2, [r4, #20]
 80047c8:	9b05      	ldr	r3, [sp, #20]
 80047ca:	4694      	mov	ip, r2
 80047cc:	4463      	add	r3, ip
 80047ce:	6163      	str	r3, [r4, #20]
 80047d0:	782b      	ldrb	r3, [r5, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d100      	bne.n	80047d8 <_svfiprintf_r+0x7c>
 80047d6:	e0a5      	b.n	8004924 <_svfiprintf_r+0x1c8>
 80047d8:	2201      	movs	r2, #1
 80047da:	2300      	movs	r3, #0
 80047dc:	4252      	negs	r2, r2
 80047de:	6062      	str	r2, [r4, #4]
 80047e0:	a904      	add	r1, sp, #16
 80047e2:	3254      	adds	r2, #84	; 0x54
 80047e4:	1852      	adds	r2, r2, r1
 80047e6:	1c6e      	adds	r6, r5, #1
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	60e3      	str	r3, [r4, #12]
 80047ec:	60a3      	str	r3, [r4, #8]
 80047ee:	7013      	strb	r3, [r2, #0]
 80047f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80047f2:	2205      	movs	r2, #5
 80047f4:	7831      	ldrb	r1, [r6, #0]
 80047f6:	4854      	ldr	r0, [pc, #336]	; (8004948 <_svfiprintf_r+0x1ec>)
 80047f8:	f000 fa32 	bl	8004c60 <memchr>
 80047fc:	1c75      	adds	r5, r6, #1
 80047fe:	2800      	cmp	r0, #0
 8004800:	d11f      	bne.n	8004842 <_svfiprintf_r+0xe6>
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	06d3      	lsls	r3, r2, #27
 8004806:	d504      	bpl.n	8004812 <_svfiprintf_r+0xb6>
 8004808:	2353      	movs	r3, #83	; 0x53
 800480a:	a904      	add	r1, sp, #16
 800480c:	185b      	adds	r3, r3, r1
 800480e:	2120      	movs	r1, #32
 8004810:	7019      	strb	r1, [r3, #0]
 8004812:	0713      	lsls	r3, r2, #28
 8004814:	d504      	bpl.n	8004820 <_svfiprintf_r+0xc4>
 8004816:	2353      	movs	r3, #83	; 0x53
 8004818:	a904      	add	r1, sp, #16
 800481a:	185b      	adds	r3, r3, r1
 800481c:	212b      	movs	r1, #43	; 0x2b
 800481e:	7019      	strb	r1, [r3, #0]
 8004820:	7833      	ldrb	r3, [r6, #0]
 8004822:	2b2a      	cmp	r3, #42	; 0x2a
 8004824:	d016      	beq.n	8004854 <_svfiprintf_r+0xf8>
 8004826:	0035      	movs	r5, r6
 8004828:	2100      	movs	r1, #0
 800482a:	200a      	movs	r0, #10
 800482c:	68e3      	ldr	r3, [r4, #12]
 800482e:	782a      	ldrb	r2, [r5, #0]
 8004830:	1c6e      	adds	r6, r5, #1
 8004832:	3a30      	subs	r2, #48	; 0x30
 8004834:	2a09      	cmp	r2, #9
 8004836:	d94e      	bls.n	80048d6 <_svfiprintf_r+0x17a>
 8004838:	2900      	cmp	r1, #0
 800483a:	d111      	bne.n	8004860 <_svfiprintf_r+0x104>
 800483c:	e017      	b.n	800486e <_svfiprintf_r+0x112>
 800483e:	3501      	adds	r5, #1
 8004840:	e7b0      	b.n	80047a4 <_svfiprintf_r+0x48>
 8004842:	4b41      	ldr	r3, [pc, #260]	; (8004948 <_svfiprintf_r+0x1ec>)
 8004844:	6822      	ldr	r2, [r4, #0]
 8004846:	1ac0      	subs	r0, r0, r3
 8004848:	2301      	movs	r3, #1
 800484a:	4083      	lsls	r3, r0
 800484c:	4313      	orrs	r3, r2
 800484e:	002e      	movs	r6, r5
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	e7ce      	b.n	80047f2 <_svfiprintf_r+0x96>
 8004854:	9b07      	ldr	r3, [sp, #28]
 8004856:	1d19      	adds	r1, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	9107      	str	r1, [sp, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db01      	blt.n	8004864 <_svfiprintf_r+0x108>
 8004860:	930b      	str	r3, [sp, #44]	; 0x2c
 8004862:	e004      	b.n	800486e <_svfiprintf_r+0x112>
 8004864:	425b      	negs	r3, r3
 8004866:	60e3      	str	r3, [r4, #12]
 8004868:	2302      	movs	r3, #2
 800486a:	4313      	orrs	r3, r2
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	782b      	ldrb	r3, [r5, #0]
 8004870:	2b2e      	cmp	r3, #46	; 0x2e
 8004872:	d10a      	bne.n	800488a <_svfiprintf_r+0x12e>
 8004874:	786b      	ldrb	r3, [r5, #1]
 8004876:	2b2a      	cmp	r3, #42	; 0x2a
 8004878:	d135      	bne.n	80048e6 <_svfiprintf_r+0x18a>
 800487a:	9b07      	ldr	r3, [sp, #28]
 800487c:	3502      	adds	r5, #2
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	9207      	str	r2, [sp, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	db2b      	blt.n	80048e0 <_svfiprintf_r+0x184>
 8004888:	9309      	str	r3, [sp, #36]	; 0x24
 800488a:	4e30      	ldr	r6, [pc, #192]	; (800494c <_svfiprintf_r+0x1f0>)
 800488c:	2203      	movs	r2, #3
 800488e:	0030      	movs	r0, r6
 8004890:	7829      	ldrb	r1, [r5, #0]
 8004892:	f000 f9e5 	bl	8004c60 <memchr>
 8004896:	2800      	cmp	r0, #0
 8004898:	d006      	beq.n	80048a8 <_svfiprintf_r+0x14c>
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	1b80      	subs	r0, r0, r6
 800489e:	4083      	lsls	r3, r0
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	3501      	adds	r5, #1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	6023      	str	r3, [r4, #0]
 80048a8:	7829      	ldrb	r1, [r5, #0]
 80048aa:	2206      	movs	r2, #6
 80048ac:	4828      	ldr	r0, [pc, #160]	; (8004950 <_svfiprintf_r+0x1f4>)
 80048ae:	1c6e      	adds	r6, r5, #1
 80048b0:	7621      	strb	r1, [r4, #24]
 80048b2:	f000 f9d5 	bl	8004c60 <memchr>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d03c      	beq.n	8004934 <_svfiprintf_r+0x1d8>
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <_svfiprintf_r+0x1f8>)
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d125      	bne.n	800490c <_svfiprintf_r+0x1b0>
 80048c0:	2207      	movs	r2, #7
 80048c2:	9b07      	ldr	r3, [sp, #28]
 80048c4:	3307      	adds	r3, #7
 80048c6:	4393      	bics	r3, r2
 80048c8:	3308      	adds	r3, #8
 80048ca:	9307      	str	r3, [sp, #28]
 80048cc:	6963      	ldr	r3, [r4, #20]
 80048ce:	9a04      	ldr	r2, [sp, #16]
 80048d0:	189b      	adds	r3, r3, r2
 80048d2:	6163      	str	r3, [r4, #20]
 80048d4:	e765      	b.n	80047a2 <_svfiprintf_r+0x46>
 80048d6:	4343      	muls	r3, r0
 80048d8:	0035      	movs	r5, r6
 80048da:	2101      	movs	r1, #1
 80048dc:	189b      	adds	r3, r3, r2
 80048de:	e7a6      	b.n	800482e <_svfiprintf_r+0xd2>
 80048e0:	2301      	movs	r3, #1
 80048e2:	425b      	negs	r3, r3
 80048e4:	e7d0      	b.n	8004888 <_svfiprintf_r+0x12c>
 80048e6:	2300      	movs	r3, #0
 80048e8:	200a      	movs	r0, #10
 80048ea:	001a      	movs	r2, r3
 80048ec:	3501      	adds	r5, #1
 80048ee:	6063      	str	r3, [r4, #4]
 80048f0:	7829      	ldrb	r1, [r5, #0]
 80048f2:	1c6e      	adds	r6, r5, #1
 80048f4:	3930      	subs	r1, #48	; 0x30
 80048f6:	2909      	cmp	r1, #9
 80048f8:	d903      	bls.n	8004902 <_svfiprintf_r+0x1a6>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0c5      	beq.n	800488a <_svfiprintf_r+0x12e>
 80048fe:	9209      	str	r2, [sp, #36]	; 0x24
 8004900:	e7c3      	b.n	800488a <_svfiprintf_r+0x12e>
 8004902:	4342      	muls	r2, r0
 8004904:	0035      	movs	r5, r6
 8004906:	2301      	movs	r3, #1
 8004908:	1852      	adds	r2, r2, r1
 800490a:	e7f1      	b.n	80048f0 <_svfiprintf_r+0x194>
 800490c:	ab07      	add	r3, sp, #28
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	003a      	movs	r2, r7
 8004912:	0021      	movs	r1, r4
 8004914:	4b10      	ldr	r3, [pc, #64]	; (8004958 <_svfiprintf_r+0x1fc>)
 8004916:	9803      	ldr	r0, [sp, #12]
 8004918:	e000      	b.n	800491c <_svfiprintf_r+0x1c0>
 800491a:	bf00      	nop
 800491c:	9004      	str	r0, [sp, #16]
 800491e:	9b04      	ldr	r3, [sp, #16]
 8004920:	3301      	adds	r3, #1
 8004922:	d1d3      	bne.n	80048cc <_svfiprintf_r+0x170>
 8004924:	89bb      	ldrh	r3, [r7, #12]
 8004926:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004928:	065b      	lsls	r3, r3, #25
 800492a:	d400      	bmi.n	800492e <_svfiprintf_r+0x1d2>
 800492c:	e72d      	b.n	800478a <_svfiprintf_r+0x2e>
 800492e:	2001      	movs	r0, #1
 8004930:	4240      	negs	r0, r0
 8004932:	e72a      	b.n	800478a <_svfiprintf_r+0x2e>
 8004934:	ab07      	add	r3, sp, #28
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	003a      	movs	r2, r7
 800493a:	0021      	movs	r1, r4
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <_svfiprintf_r+0x1fc>)
 800493e:	9803      	ldr	r0, [sp, #12]
 8004940:	f000 f87c 	bl	8004a3c <_printf_i>
 8004944:	e7ea      	b.n	800491c <_svfiprintf_r+0x1c0>
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	08005105 	.word	0x08005105
 800494c:	0800510b 	.word	0x0800510b
 8004950:	0800510f 	.word	0x0800510f
 8004954:	00000000 	.word	0x00000000
 8004958:	08004699 	.word	0x08004699

0800495c <_printf_common>:
 800495c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800495e:	0015      	movs	r5, r2
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	688a      	ldr	r2, [r1, #8]
 8004964:	690b      	ldr	r3, [r1, #16]
 8004966:	000c      	movs	r4, r1
 8004968:	9000      	str	r0, [sp, #0]
 800496a:	4293      	cmp	r3, r2
 800496c:	da00      	bge.n	8004970 <_printf_common+0x14>
 800496e:	0013      	movs	r3, r2
 8004970:	0022      	movs	r2, r4
 8004972:	602b      	str	r3, [r5, #0]
 8004974:	3243      	adds	r2, #67	; 0x43
 8004976:	7812      	ldrb	r2, [r2, #0]
 8004978:	2a00      	cmp	r2, #0
 800497a:	d001      	beq.n	8004980 <_printf_common+0x24>
 800497c:	3301      	adds	r3, #1
 800497e:	602b      	str	r3, [r5, #0]
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	069b      	lsls	r3, r3, #26
 8004984:	d502      	bpl.n	800498c <_printf_common+0x30>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	3302      	adds	r3, #2
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	6822      	ldr	r2, [r4, #0]
 800498e:	2306      	movs	r3, #6
 8004990:	0017      	movs	r7, r2
 8004992:	401f      	ands	r7, r3
 8004994:	421a      	tst	r2, r3
 8004996:	d027      	beq.n	80049e8 <_printf_common+0x8c>
 8004998:	0023      	movs	r3, r4
 800499a:	3343      	adds	r3, #67	; 0x43
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	1e5a      	subs	r2, r3, #1
 80049a0:	4193      	sbcs	r3, r2
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	0692      	lsls	r2, r2, #26
 80049a6:	d430      	bmi.n	8004a0a <_printf_common+0xae>
 80049a8:	0022      	movs	r2, r4
 80049aa:	9901      	ldr	r1, [sp, #4]
 80049ac:	9800      	ldr	r0, [sp, #0]
 80049ae:	9e08      	ldr	r6, [sp, #32]
 80049b0:	3243      	adds	r2, #67	; 0x43
 80049b2:	47b0      	blx	r6
 80049b4:	1c43      	adds	r3, r0, #1
 80049b6:	d025      	beq.n	8004a04 <_printf_common+0xa8>
 80049b8:	2306      	movs	r3, #6
 80049ba:	6820      	ldr	r0, [r4, #0]
 80049bc:	682a      	ldr	r2, [r5, #0]
 80049be:	68e1      	ldr	r1, [r4, #12]
 80049c0:	2500      	movs	r5, #0
 80049c2:	4003      	ands	r3, r0
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d103      	bne.n	80049d0 <_printf_common+0x74>
 80049c8:	1a8d      	subs	r5, r1, r2
 80049ca:	43eb      	mvns	r3, r5
 80049cc:	17db      	asrs	r3, r3, #31
 80049ce:	401d      	ands	r5, r3
 80049d0:	68a3      	ldr	r3, [r4, #8]
 80049d2:	6922      	ldr	r2, [r4, #16]
 80049d4:	4293      	cmp	r3, r2
 80049d6:	dd01      	ble.n	80049dc <_printf_common+0x80>
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	18ed      	adds	r5, r5, r3
 80049dc:	2700      	movs	r7, #0
 80049de:	42bd      	cmp	r5, r7
 80049e0:	d120      	bne.n	8004a24 <_printf_common+0xc8>
 80049e2:	2000      	movs	r0, #0
 80049e4:	e010      	b.n	8004a08 <_printf_common+0xac>
 80049e6:	3701      	adds	r7, #1
 80049e8:	68e3      	ldr	r3, [r4, #12]
 80049ea:	682a      	ldr	r2, [r5, #0]
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	42bb      	cmp	r3, r7
 80049f0:	ddd2      	ble.n	8004998 <_printf_common+0x3c>
 80049f2:	0022      	movs	r2, r4
 80049f4:	2301      	movs	r3, #1
 80049f6:	9901      	ldr	r1, [sp, #4]
 80049f8:	9800      	ldr	r0, [sp, #0]
 80049fa:	9e08      	ldr	r6, [sp, #32]
 80049fc:	3219      	adds	r2, #25
 80049fe:	47b0      	blx	r6
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d1f0      	bne.n	80049e6 <_printf_common+0x8a>
 8004a04:	2001      	movs	r0, #1
 8004a06:	4240      	negs	r0, r0
 8004a08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a0a:	2030      	movs	r0, #48	; 0x30
 8004a0c:	18e1      	adds	r1, r4, r3
 8004a0e:	3143      	adds	r1, #67	; 0x43
 8004a10:	7008      	strb	r0, [r1, #0]
 8004a12:	0021      	movs	r1, r4
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	3145      	adds	r1, #69	; 0x45
 8004a18:	7809      	ldrb	r1, [r1, #0]
 8004a1a:	18a2      	adds	r2, r4, r2
 8004a1c:	3243      	adds	r2, #67	; 0x43
 8004a1e:	3302      	adds	r3, #2
 8004a20:	7011      	strb	r1, [r2, #0]
 8004a22:	e7c1      	b.n	80049a8 <_printf_common+0x4c>
 8004a24:	0022      	movs	r2, r4
 8004a26:	2301      	movs	r3, #1
 8004a28:	9901      	ldr	r1, [sp, #4]
 8004a2a:	9800      	ldr	r0, [sp, #0]
 8004a2c:	9e08      	ldr	r6, [sp, #32]
 8004a2e:	321a      	adds	r2, #26
 8004a30:	47b0      	blx	r6
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	d0e6      	beq.n	8004a04 <_printf_common+0xa8>
 8004a36:	3701      	adds	r7, #1
 8004a38:	e7d1      	b.n	80049de <_printf_common+0x82>
	...

08004a3c <_printf_i>:
 8004a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3e:	b08b      	sub	sp, #44	; 0x2c
 8004a40:	9206      	str	r2, [sp, #24]
 8004a42:	000a      	movs	r2, r1
 8004a44:	3243      	adds	r2, #67	; 0x43
 8004a46:	9307      	str	r3, [sp, #28]
 8004a48:	9005      	str	r0, [sp, #20]
 8004a4a:	9204      	str	r2, [sp, #16]
 8004a4c:	7e0a      	ldrb	r2, [r1, #24]
 8004a4e:	000c      	movs	r4, r1
 8004a50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a52:	2a78      	cmp	r2, #120	; 0x78
 8004a54:	d806      	bhi.n	8004a64 <_printf_i+0x28>
 8004a56:	2a62      	cmp	r2, #98	; 0x62
 8004a58:	d808      	bhi.n	8004a6c <_printf_i+0x30>
 8004a5a:	2a00      	cmp	r2, #0
 8004a5c:	d100      	bne.n	8004a60 <_printf_i+0x24>
 8004a5e:	e0c0      	b.n	8004be2 <_printf_i+0x1a6>
 8004a60:	2a58      	cmp	r2, #88	; 0x58
 8004a62:	d052      	beq.n	8004b0a <_printf_i+0xce>
 8004a64:	0026      	movs	r6, r4
 8004a66:	3642      	adds	r6, #66	; 0x42
 8004a68:	7032      	strb	r2, [r6, #0]
 8004a6a:	e022      	b.n	8004ab2 <_printf_i+0x76>
 8004a6c:	0010      	movs	r0, r2
 8004a6e:	3863      	subs	r0, #99	; 0x63
 8004a70:	2815      	cmp	r0, #21
 8004a72:	d8f7      	bhi.n	8004a64 <_printf_i+0x28>
 8004a74:	f7fb fb48 	bl	8000108 <__gnu_thumb1_case_shi>
 8004a78:	001f0016 	.word	0x001f0016
 8004a7c:	fff6fff6 	.word	0xfff6fff6
 8004a80:	fff6fff6 	.word	0xfff6fff6
 8004a84:	fff6001f 	.word	0xfff6001f
 8004a88:	fff6fff6 	.word	0xfff6fff6
 8004a8c:	00a8fff6 	.word	0x00a8fff6
 8004a90:	009a0036 	.word	0x009a0036
 8004a94:	fff6fff6 	.word	0xfff6fff6
 8004a98:	fff600b9 	.word	0xfff600b9
 8004a9c:	fff60036 	.word	0xfff60036
 8004aa0:	009efff6 	.word	0x009efff6
 8004aa4:	0026      	movs	r6, r4
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	3642      	adds	r6, #66	; 0x42
 8004aaa:	1d11      	adds	r1, r2, #4
 8004aac:	6019      	str	r1, [r3, #0]
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	7033      	strb	r3, [r6, #0]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0a7      	b.n	8004c06 <_printf_i+0x1ca>
 8004ab6:	6808      	ldr	r0, [r1, #0]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	1d0a      	adds	r2, r1, #4
 8004abc:	0605      	lsls	r5, r0, #24
 8004abe:	d50b      	bpl.n	8004ad8 <_printf_i+0x9c>
 8004ac0:	680d      	ldr	r5, [r1, #0]
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	da03      	bge.n	8004ad0 <_printf_i+0x94>
 8004ac8:	232d      	movs	r3, #45	; 0x2d
 8004aca:	9a04      	ldr	r2, [sp, #16]
 8004acc:	426d      	negs	r5, r5
 8004ace:	7013      	strb	r3, [r2, #0]
 8004ad0:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <_printf_i+0x21c>)
 8004ad2:	270a      	movs	r7, #10
 8004ad4:	9303      	str	r3, [sp, #12]
 8004ad6:	e032      	b.n	8004b3e <_printf_i+0x102>
 8004ad8:	680d      	ldr	r5, [r1, #0]
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	0641      	lsls	r1, r0, #25
 8004ade:	d5f1      	bpl.n	8004ac4 <_printf_i+0x88>
 8004ae0:	b22d      	sxth	r5, r5
 8004ae2:	e7ef      	b.n	8004ac4 <_printf_i+0x88>
 8004ae4:	680d      	ldr	r5, [r1, #0]
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	1d08      	adds	r0, r1, #4
 8004aea:	6018      	str	r0, [r3, #0]
 8004aec:	062e      	lsls	r6, r5, #24
 8004aee:	d501      	bpl.n	8004af4 <_printf_i+0xb8>
 8004af0:	680d      	ldr	r5, [r1, #0]
 8004af2:	e003      	b.n	8004afc <_printf_i+0xc0>
 8004af4:	066d      	lsls	r5, r5, #25
 8004af6:	d5fb      	bpl.n	8004af0 <_printf_i+0xb4>
 8004af8:	680d      	ldr	r5, [r1, #0]
 8004afa:	b2ad      	uxth	r5, r5
 8004afc:	4b56      	ldr	r3, [pc, #344]	; (8004c58 <_printf_i+0x21c>)
 8004afe:	270a      	movs	r7, #10
 8004b00:	9303      	str	r3, [sp, #12]
 8004b02:	2a6f      	cmp	r2, #111	; 0x6f
 8004b04:	d117      	bne.n	8004b36 <_printf_i+0xfa>
 8004b06:	2708      	movs	r7, #8
 8004b08:	e015      	b.n	8004b36 <_printf_i+0xfa>
 8004b0a:	3145      	adds	r1, #69	; 0x45
 8004b0c:	700a      	strb	r2, [r1, #0]
 8004b0e:	4a52      	ldr	r2, [pc, #328]	; (8004c58 <_printf_i+0x21c>)
 8004b10:	9203      	str	r2, [sp, #12]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6821      	ldr	r1, [r4, #0]
 8004b16:	ca20      	ldmia	r2!, {r5}
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	0608      	lsls	r0, r1, #24
 8004b1c:	d550      	bpl.n	8004bc0 <_printf_i+0x184>
 8004b1e:	07cb      	lsls	r3, r1, #31
 8004b20:	d502      	bpl.n	8004b28 <_printf_i+0xec>
 8004b22:	2320      	movs	r3, #32
 8004b24:	4319      	orrs	r1, r3
 8004b26:	6021      	str	r1, [r4, #0]
 8004b28:	2710      	movs	r7, #16
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	d103      	bne.n	8004b36 <_printf_i+0xfa>
 8004b2e:	2320      	movs	r3, #32
 8004b30:	6822      	ldr	r2, [r4, #0]
 8004b32:	439a      	bics	r2, r3
 8004b34:	6022      	str	r2, [r4, #0]
 8004b36:	0023      	movs	r3, r4
 8004b38:	2200      	movs	r2, #0
 8004b3a:	3343      	adds	r3, #67	; 0x43
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	60a3      	str	r3, [r4, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	db03      	blt.n	8004b4e <_printf_i+0x112>
 8004b46:	2204      	movs	r2, #4
 8004b48:	6821      	ldr	r1, [r4, #0]
 8004b4a:	4391      	bics	r1, r2
 8004b4c:	6021      	str	r1, [r4, #0]
 8004b4e:	2d00      	cmp	r5, #0
 8004b50:	d102      	bne.n	8004b58 <_printf_i+0x11c>
 8004b52:	9e04      	ldr	r6, [sp, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00c      	beq.n	8004b72 <_printf_i+0x136>
 8004b58:	9e04      	ldr	r6, [sp, #16]
 8004b5a:	0028      	movs	r0, r5
 8004b5c:	0039      	movs	r1, r7
 8004b5e:	f7fb fb63 	bl	8000228 <__aeabi_uidivmod>
 8004b62:	9b03      	ldr	r3, [sp, #12]
 8004b64:	3e01      	subs	r6, #1
 8004b66:	5c5b      	ldrb	r3, [r3, r1]
 8004b68:	7033      	strb	r3, [r6, #0]
 8004b6a:	002b      	movs	r3, r5
 8004b6c:	0005      	movs	r5, r0
 8004b6e:	429f      	cmp	r7, r3
 8004b70:	d9f3      	bls.n	8004b5a <_printf_i+0x11e>
 8004b72:	2f08      	cmp	r7, #8
 8004b74:	d109      	bne.n	8004b8a <_printf_i+0x14e>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	07db      	lsls	r3, r3, #31
 8004b7a:	d506      	bpl.n	8004b8a <_printf_i+0x14e>
 8004b7c:	6863      	ldr	r3, [r4, #4]
 8004b7e:	6922      	ldr	r2, [r4, #16]
 8004b80:	4293      	cmp	r3, r2
 8004b82:	dc02      	bgt.n	8004b8a <_printf_i+0x14e>
 8004b84:	2330      	movs	r3, #48	; 0x30
 8004b86:	3e01      	subs	r6, #1
 8004b88:	7033      	strb	r3, [r6, #0]
 8004b8a:	9b04      	ldr	r3, [sp, #16]
 8004b8c:	1b9b      	subs	r3, r3, r6
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	9b07      	ldr	r3, [sp, #28]
 8004b92:	0021      	movs	r1, r4
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	9805      	ldr	r0, [sp, #20]
 8004b98:	9b06      	ldr	r3, [sp, #24]
 8004b9a:	aa09      	add	r2, sp, #36	; 0x24
 8004b9c:	f7ff fede 	bl	800495c <_printf_common>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d135      	bne.n	8004c10 <_printf_i+0x1d4>
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	4240      	negs	r0, r0
 8004ba8:	b00b      	add	sp, #44	; 0x2c
 8004baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bac:	2220      	movs	r2, #32
 8004bae:	6809      	ldr	r1, [r1, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	6022      	str	r2, [r4, #0]
 8004bb4:	0022      	movs	r2, r4
 8004bb6:	2178      	movs	r1, #120	; 0x78
 8004bb8:	3245      	adds	r2, #69	; 0x45
 8004bba:	7011      	strb	r1, [r2, #0]
 8004bbc:	4a27      	ldr	r2, [pc, #156]	; (8004c5c <_printf_i+0x220>)
 8004bbe:	e7a7      	b.n	8004b10 <_printf_i+0xd4>
 8004bc0:	0648      	lsls	r0, r1, #25
 8004bc2:	d5ac      	bpl.n	8004b1e <_printf_i+0xe2>
 8004bc4:	b2ad      	uxth	r5, r5
 8004bc6:	e7aa      	b.n	8004b1e <_printf_i+0xe2>
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	680d      	ldr	r5, [r1, #0]
 8004bcc:	1d10      	adds	r0, r2, #4
 8004bce:	6949      	ldr	r1, [r1, #20]
 8004bd0:	6018      	str	r0, [r3, #0]
 8004bd2:	6813      	ldr	r3, [r2, #0]
 8004bd4:	062e      	lsls	r6, r5, #24
 8004bd6:	d501      	bpl.n	8004bdc <_printf_i+0x1a0>
 8004bd8:	6019      	str	r1, [r3, #0]
 8004bda:	e002      	b.n	8004be2 <_printf_i+0x1a6>
 8004bdc:	066d      	lsls	r5, r5, #25
 8004bde:	d5fb      	bpl.n	8004bd8 <_printf_i+0x19c>
 8004be0:	8019      	strh	r1, [r3, #0]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9e04      	ldr	r6, [sp, #16]
 8004be6:	6123      	str	r3, [r4, #16]
 8004be8:	e7d2      	b.n	8004b90 <_printf_i+0x154>
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	1d11      	adds	r1, r2, #4
 8004bee:	6019      	str	r1, [r3, #0]
 8004bf0:	6816      	ldr	r6, [r2, #0]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	0030      	movs	r0, r6
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	f000 f832 	bl	8004c60 <memchr>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d001      	beq.n	8004c04 <_printf_i+0x1c8>
 8004c00:	1b80      	subs	r0, r0, r6
 8004c02:	6060      	str	r0, [r4, #4]
 8004c04:	6863      	ldr	r3, [r4, #4]
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9a04      	ldr	r2, [sp, #16]
 8004c0c:	7013      	strb	r3, [r2, #0]
 8004c0e:	e7bf      	b.n	8004b90 <_printf_i+0x154>
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	0032      	movs	r2, r6
 8004c14:	9906      	ldr	r1, [sp, #24]
 8004c16:	9805      	ldr	r0, [sp, #20]
 8004c18:	9d07      	ldr	r5, [sp, #28]
 8004c1a:	47a8      	blx	r5
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d0c1      	beq.n	8004ba4 <_printf_i+0x168>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	079b      	lsls	r3, r3, #30
 8004c24:	d415      	bmi.n	8004c52 <_printf_i+0x216>
 8004c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c28:	68e0      	ldr	r0, [r4, #12]
 8004c2a:	4298      	cmp	r0, r3
 8004c2c:	dabc      	bge.n	8004ba8 <_printf_i+0x16c>
 8004c2e:	0018      	movs	r0, r3
 8004c30:	e7ba      	b.n	8004ba8 <_printf_i+0x16c>
 8004c32:	0022      	movs	r2, r4
 8004c34:	2301      	movs	r3, #1
 8004c36:	9906      	ldr	r1, [sp, #24]
 8004c38:	9805      	ldr	r0, [sp, #20]
 8004c3a:	9e07      	ldr	r6, [sp, #28]
 8004c3c:	3219      	adds	r2, #25
 8004c3e:	47b0      	blx	r6
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d0af      	beq.n	8004ba4 <_printf_i+0x168>
 8004c44:	3501      	adds	r5, #1
 8004c46:	68e3      	ldr	r3, [r4, #12]
 8004c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	42ab      	cmp	r3, r5
 8004c4e:	dcf0      	bgt.n	8004c32 <_printf_i+0x1f6>
 8004c50:	e7e9      	b.n	8004c26 <_printf_i+0x1ea>
 8004c52:	2500      	movs	r5, #0
 8004c54:	e7f7      	b.n	8004c46 <_printf_i+0x20a>
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	08005116 	.word	0x08005116
 8004c5c:	08005127 	.word	0x08005127

08004c60 <memchr>:
 8004c60:	b2c9      	uxtb	r1, r1
 8004c62:	1882      	adds	r2, r0, r2
 8004c64:	4290      	cmp	r0, r2
 8004c66:	d101      	bne.n	8004c6c <memchr+0xc>
 8004c68:	2000      	movs	r0, #0
 8004c6a:	4770      	bx	lr
 8004c6c:	7803      	ldrb	r3, [r0, #0]
 8004c6e:	428b      	cmp	r3, r1
 8004c70:	d0fb      	beq.n	8004c6a <memchr+0xa>
 8004c72:	3001      	adds	r0, #1
 8004c74:	e7f6      	b.n	8004c64 <memchr+0x4>

08004c76 <memcpy>:
 8004c76:	2300      	movs	r3, #0
 8004c78:	b510      	push	{r4, lr}
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d100      	bne.n	8004c80 <memcpy+0xa>
 8004c7e:	bd10      	pop	{r4, pc}
 8004c80:	5ccc      	ldrb	r4, [r1, r3]
 8004c82:	54c4      	strb	r4, [r0, r3]
 8004c84:	3301      	adds	r3, #1
 8004c86:	e7f8      	b.n	8004c7a <memcpy+0x4>

08004c88 <memmove>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4288      	cmp	r0, r1
 8004c8c:	d902      	bls.n	8004c94 <memmove+0xc>
 8004c8e:	188b      	adds	r3, r1, r2
 8004c90:	4298      	cmp	r0, r3
 8004c92:	d303      	bcc.n	8004c9c <memmove+0x14>
 8004c94:	2300      	movs	r3, #0
 8004c96:	e007      	b.n	8004ca8 <memmove+0x20>
 8004c98:	5c8b      	ldrb	r3, [r1, r2]
 8004c9a:	5483      	strb	r3, [r0, r2]
 8004c9c:	3a01      	subs	r2, #1
 8004c9e:	d2fb      	bcs.n	8004c98 <memmove+0x10>
 8004ca0:	bd10      	pop	{r4, pc}
 8004ca2:	5ccc      	ldrb	r4, [r1, r3]
 8004ca4:	54c4      	strb	r4, [r0, r3]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d1fa      	bne.n	8004ca2 <memmove+0x1a>
 8004cac:	e7f8      	b.n	8004ca0 <memmove+0x18>
	...

08004cb0 <_free_r>:
 8004cb0:	b570      	push	{r4, r5, r6, lr}
 8004cb2:	0005      	movs	r5, r0
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d010      	beq.n	8004cda <_free_r+0x2a>
 8004cb8:	1f0c      	subs	r4, r1, #4
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	da00      	bge.n	8004cc2 <_free_r+0x12>
 8004cc0:	18e4      	adds	r4, r4, r3
 8004cc2:	0028      	movs	r0, r5
 8004cc4:	f000 f8d4 	bl	8004e70 <__malloc_lock>
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <_free_r+0x90>)
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d105      	bne.n	8004cdc <_free_r+0x2c>
 8004cd0:	6063      	str	r3, [r4, #4]
 8004cd2:	6014      	str	r4, [r2, #0]
 8004cd4:	0028      	movs	r0, r5
 8004cd6:	f000 f8d3 	bl	8004e80 <__malloc_unlock>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	d908      	bls.n	8004cf2 <_free_r+0x42>
 8004ce0:	6821      	ldr	r1, [r4, #0]
 8004ce2:	1860      	adds	r0, r4, r1
 8004ce4:	4283      	cmp	r3, r0
 8004ce6:	d1f3      	bne.n	8004cd0 <_free_r+0x20>
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	1841      	adds	r1, r0, r1
 8004cee:	6021      	str	r1, [r4, #0]
 8004cf0:	e7ee      	b.n	8004cd0 <_free_r+0x20>
 8004cf2:	001a      	movs	r2, r3
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <_free_r+0x4e>
 8004cfa:	42a3      	cmp	r3, r4
 8004cfc:	d9f9      	bls.n	8004cf2 <_free_r+0x42>
 8004cfe:	6811      	ldr	r1, [r2, #0]
 8004d00:	1850      	adds	r0, r2, r1
 8004d02:	42a0      	cmp	r0, r4
 8004d04:	d10b      	bne.n	8004d1e <_free_r+0x6e>
 8004d06:	6820      	ldr	r0, [r4, #0]
 8004d08:	1809      	adds	r1, r1, r0
 8004d0a:	1850      	adds	r0, r2, r1
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	4283      	cmp	r3, r0
 8004d10:	d1e0      	bne.n	8004cd4 <_free_r+0x24>
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	1841      	adds	r1, r0, r1
 8004d18:	6011      	str	r1, [r2, #0]
 8004d1a:	6053      	str	r3, [r2, #4]
 8004d1c:	e7da      	b.n	8004cd4 <_free_r+0x24>
 8004d1e:	42a0      	cmp	r0, r4
 8004d20:	d902      	bls.n	8004d28 <_free_r+0x78>
 8004d22:	230c      	movs	r3, #12
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	e7d5      	b.n	8004cd4 <_free_r+0x24>
 8004d28:	6821      	ldr	r1, [r4, #0]
 8004d2a:	1860      	adds	r0, r4, r1
 8004d2c:	4283      	cmp	r3, r0
 8004d2e:	d103      	bne.n	8004d38 <_free_r+0x88>
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	1841      	adds	r1, r0, r1
 8004d36:	6021      	str	r1, [r4, #0]
 8004d38:	6063      	str	r3, [r4, #4]
 8004d3a:	6054      	str	r4, [r2, #4]
 8004d3c:	e7ca      	b.n	8004cd4 <_free_r+0x24>
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	200000a0 	.word	0x200000a0

08004d44 <_malloc_r>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	2303      	movs	r3, #3
 8004d48:	1ccd      	adds	r5, r1, #3
 8004d4a:	439d      	bics	r5, r3
 8004d4c:	3508      	adds	r5, #8
 8004d4e:	0006      	movs	r6, r0
 8004d50:	2d0c      	cmp	r5, #12
 8004d52:	d21f      	bcs.n	8004d94 <_malloc_r+0x50>
 8004d54:	250c      	movs	r5, #12
 8004d56:	42a9      	cmp	r1, r5
 8004d58:	d81e      	bhi.n	8004d98 <_malloc_r+0x54>
 8004d5a:	0030      	movs	r0, r6
 8004d5c:	f000 f888 	bl	8004e70 <__malloc_lock>
 8004d60:	4925      	ldr	r1, [pc, #148]	; (8004df8 <_malloc_r+0xb4>)
 8004d62:	680a      	ldr	r2, [r1, #0]
 8004d64:	0014      	movs	r4, r2
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	d11a      	bne.n	8004da0 <_malloc_r+0x5c>
 8004d6a:	4f24      	ldr	r7, [pc, #144]	; (8004dfc <_malloc_r+0xb8>)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <_malloc_r+0x38>
 8004d72:	0021      	movs	r1, r4
 8004d74:	0030      	movs	r0, r6
 8004d76:	f000 f869 	bl	8004e4c <_sbrk_r>
 8004d7a:	6038      	str	r0, [r7, #0]
 8004d7c:	0029      	movs	r1, r5
 8004d7e:	0030      	movs	r0, r6
 8004d80:	f000 f864 	bl	8004e4c <_sbrk_r>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d12b      	bne.n	8004de0 <_malloc_r+0x9c>
 8004d88:	230c      	movs	r3, #12
 8004d8a:	0030      	movs	r0, r6
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	f000 f877 	bl	8004e80 <__malloc_unlock>
 8004d92:	e003      	b.n	8004d9c <_malloc_r+0x58>
 8004d94:	2d00      	cmp	r5, #0
 8004d96:	dade      	bge.n	8004d56 <_malloc_r+0x12>
 8004d98:	230c      	movs	r3, #12
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	1b5b      	subs	r3, r3, r5
 8004da4:	d419      	bmi.n	8004dda <_malloc_r+0x96>
 8004da6:	2b0b      	cmp	r3, #11
 8004da8:	d903      	bls.n	8004db2 <_malloc_r+0x6e>
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	18e4      	adds	r4, r4, r3
 8004dae:	6025      	str	r5, [r4, #0]
 8004db0:	e003      	b.n	8004dba <_malloc_r+0x76>
 8004db2:	6863      	ldr	r3, [r4, #4]
 8004db4:	42a2      	cmp	r2, r4
 8004db6:	d10e      	bne.n	8004dd6 <_malloc_r+0x92>
 8004db8:	600b      	str	r3, [r1, #0]
 8004dba:	0030      	movs	r0, r6
 8004dbc:	f000 f860 	bl	8004e80 <__malloc_unlock>
 8004dc0:	0020      	movs	r0, r4
 8004dc2:	2207      	movs	r2, #7
 8004dc4:	300b      	adds	r0, #11
 8004dc6:	1d23      	adds	r3, r4, #4
 8004dc8:	4390      	bics	r0, r2
 8004dca:	1ac2      	subs	r2, r0, r3
 8004dcc:	4298      	cmp	r0, r3
 8004dce:	d0e6      	beq.n	8004d9e <_malloc_r+0x5a>
 8004dd0:	1a1b      	subs	r3, r3, r0
 8004dd2:	50a3      	str	r3, [r4, r2]
 8004dd4:	e7e3      	b.n	8004d9e <_malloc_r+0x5a>
 8004dd6:	6053      	str	r3, [r2, #4]
 8004dd8:	e7ef      	b.n	8004dba <_malloc_r+0x76>
 8004dda:	0022      	movs	r2, r4
 8004ddc:	6864      	ldr	r4, [r4, #4]
 8004dde:	e7c2      	b.n	8004d66 <_malloc_r+0x22>
 8004de0:	2303      	movs	r3, #3
 8004de2:	1cc4      	adds	r4, r0, #3
 8004de4:	439c      	bics	r4, r3
 8004de6:	42a0      	cmp	r0, r4
 8004de8:	d0e1      	beq.n	8004dae <_malloc_r+0x6a>
 8004dea:	1a21      	subs	r1, r4, r0
 8004dec:	0030      	movs	r0, r6
 8004dee:	f000 f82d 	bl	8004e4c <_sbrk_r>
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	d1db      	bne.n	8004dae <_malloc_r+0x6a>
 8004df6:	e7c7      	b.n	8004d88 <_malloc_r+0x44>
 8004df8:	200000a0 	.word	0x200000a0
 8004dfc:	200000a4 	.word	0x200000a4

08004e00 <_realloc_r>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	0007      	movs	r7, r0
 8004e04:	000d      	movs	r5, r1
 8004e06:	0016      	movs	r6, r2
 8004e08:	2900      	cmp	r1, #0
 8004e0a:	d105      	bne.n	8004e18 <_realloc_r+0x18>
 8004e0c:	0011      	movs	r1, r2
 8004e0e:	f7ff ff99 	bl	8004d44 <_malloc_r>
 8004e12:	0004      	movs	r4, r0
 8004e14:	0020      	movs	r0, r4
 8004e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e18:	2a00      	cmp	r2, #0
 8004e1a:	d103      	bne.n	8004e24 <_realloc_r+0x24>
 8004e1c:	f7ff ff48 	bl	8004cb0 <_free_r>
 8004e20:	0034      	movs	r4, r6
 8004e22:	e7f7      	b.n	8004e14 <_realloc_r+0x14>
 8004e24:	f000 f834 	bl	8004e90 <_malloc_usable_size_r>
 8004e28:	002c      	movs	r4, r5
 8004e2a:	42b0      	cmp	r0, r6
 8004e2c:	d2f2      	bcs.n	8004e14 <_realloc_r+0x14>
 8004e2e:	0031      	movs	r1, r6
 8004e30:	0038      	movs	r0, r7
 8004e32:	f7ff ff87 	bl	8004d44 <_malloc_r>
 8004e36:	1e04      	subs	r4, r0, #0
 8004e38:	d0ec      	beq.n	8004e14 <_realloc_r+0x14>
 8004e3a:	0029      	movs	r1, r5
 8004e3c:	0032      	movs	r2, r6
 8004e3e:	f7ff ff1a 	bl	8004c76 <memcpy>
 8004e42:	0029      	movs	r1, r5
 8004e44:	0038      	movs	r0, r7
 8004e46:	f7ff ff33 	bl	8004cb0 <_free_r>
 8004e4a:	e7e3      	b.n	8004e14 <_realloc_r+0x14>

08004e4c <_sbrk_r>:
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	b570      	push	{r4, r5, r6, lr}
 8004e50:	4d06      	ldr	r5, [pc, #24]	; (8004e6c <_sbrk_r+0x20>)
 8004e52:	0004      	movs	r4, r0
 8004e54:	0008      	movs	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fc f9e8 	bl	800122c <_sbrk>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d103      	bne.n	8004e68 <_sbrk_r+0x1c>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d000      	beq.n	8004e68 <_sbrk_r+0x1c>
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	2000025c 	.word	0x2000025c

08004e70 <__malloc_lock>:
 8004e70:	b510      	push	{r4, lr}
 8004e72:	4802      	ldr	r0, [pc, #8]	; (8004e7c <__malloc_lock+0xc>)
 8004e74:	f000 f814 	bl	8004ea0 <__retarget_lock_acquire_recursive>
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	20000264 	.word	0x20000264

08004e80 <__malloc_unlock>:
 8004e80:	b510      	push	{r4, lr}
 8004e82:	4802      	ldr	r0, [pc, #8]	; (8004e8c <__malloc_unlock+0xc>)
 8004e84:	f000 f80d 	bl	8004ea2 <__retarget_lock_release_recursive>
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	20000264 	.word	0x20000264

08004e90 <_malloc_usable_size_r>:
 8004e90:	1f0b      	subs	r3, r1, #4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	1f18      	subs	r0, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da01      	bge.n	8004e9e <_malloc_usable_size_r+0xe>
 8004e9a:	580b      	ldr	r3, [r1, r0]
 8004e9c:	18c0      	adds	r0, r0, r3
 8004e9e:	4770      	bx	lr

08004ea0 <__retarget_lock_acquire_recursive>:
 8004ea0:	4770      	bx	lr

08004ea2 <__retarget_lock_release_recursive>:
 8004ea2:	4770      	bx	lr

08004ea4 <_init>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr

08004eb0 <_fini>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr
