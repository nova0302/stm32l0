
l0_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003888  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be8  08003be8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003c68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003c68  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad7e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6d  00000000  00000000  0002ae16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002d448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141b0  00000000  00000000  0002dc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d94e  00000000  00000000  00041dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078312  00000000  00000000  0004f70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7a20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a4  00000000  00000000  000c7a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003930 	.word	0x08003930

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003930 	.word	0x08003930

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <appSetup>:
extern RTC_HandleTypeDef hrtc;

RTC_DateTypeDef sDate;
RTC_TimeTypeDef sTime;

void appSetup() {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0

	lcd_init(&hi2c1);
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <appSetup+0x28>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 f8cc 	bl	8000654 <lcd_init>
	OLED_ShowString(1, 1, "Starting...", 0);
 80004bc:	4a07      	ldr	r2, [pc, #28]	; (80004dc <appSetup+0x2c>)
 80004be:	2300      	movs	r3, #0
 80004c0:	2101      	movs	r1, #1
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 f9ae 	bl	8000824 <OLED_ShowString>
	HAL_Delay(4000);
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fcd1 	bl	8000e74 <HAL_Delay>
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000b4 	.word	0x200000b4
 80004dc:	08003948 	.word	0x08003948

080004e0 <appLoop>:
void appLoop() {
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	b091      	sub	sp, #68	; 0x44
 80004e4:	af04      	add	r7, sp, #16

	static uint32_t last;
	uint32_t now = HAL_GetTick();
 80004e6:	f000 fcbb 	bl	8000e60 <HAL_GetTick>
 80004ea:	0003      	movs	r3, r0
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (now - last > 1000) {
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <appLoop+0x94>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004f4:	1ad2      	subs	r2, r2, r3
 80004f6:	23fa      	movs	r3, #250	; 0xfa
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d935      	bls.n	800056a <appLoop+0x8a>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80004fe:	23a0      	movs	r3, #160	; 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2108      	movs	r1, #8
 8000504:	0018      	movs	r0, r3
 8000506:	f000 ff20 	bl	800134a <HAL_GPIO_TogglePin>

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800050a:	491b      	ldr	r1, [pc, #108]	; (8000578 <appLoop+0x98>)
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <appLoop+0x9c>)
 800050e:	2200      	movs	r2, #0
 8000510:	0018      	movs	r0, r3
 8000512:	f002 fbc7 	bl	8002ca4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000516:	491a      	ldr	r1, [pc, #104]	; (8000580 <appLoop+0xa0>)
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <appLoop+0x9c>)
 800051a:	2200      	movs	r2, #0
 800051c:	0018      	movs	r0, r3
 800051e:	f002 fccb 	bl	8002eb8 <HAL_RTC_GetDate>
		char strBuf[40];
		sprintf(strBuf, "%02d-%02d-%02d %02d:%02d:%02d", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <appLoop+0xa0>)
 8000524:	78db      	ldrb	r3, [r3, #3]
 8000526:	001e      	movs	r6, r3
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <appLoop+0xa0>)
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	469c      	mov	ip, r3
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <appLoop+0xa0>)
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	001a      	movs	r2, r3
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <appLoop+0x98>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	001c      	movs	r4, r3
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <appLoop+0x98>)
 800053c:	785b      	ldrb	r3, [r3, #1]
 800053e:	001d      	movs	r5, r3
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <appLoop+0x98>)
 8000542:	789b      	ldrb	r3, [r3, #2]
 8000544:	490f      	ldr	r1, [pc, #60]	; (8000584 <appLoop+0xa4>)
 8000546:	1d38      	adds	r0, r7, #4
 8000548:	9303      	str	r3, [sp, #12]
 800054a:	9502      	str	r5, [sp, #8]
 800054c:	9401      	str	r4, [sp, #4]
 800054e:	9200      	str	r2, [sp, #0]
 8000550:	4663      	mov	r3, ip
 8000552:	0032      	movs	r2, r6
 8000554:	f002 fdc6 	bl	80030e4 <siprintf>
		//OLED_Clear();
		OLED_ShowString(1, 1, strBuf, 1);
 8000558:	1d3a      	adds	r2, r7, #4
 800055a:	2301      	movs	r3, #1
 800055c:	2101      	movs	r1, #1
 800055e:	2001      	movs	r0, #1
 8000560:	f000 f960 	bl	8000824 <OLED_ShowString>

		last = now;
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <appLoop+0x94>)
 8000566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000568:	601a      	str	r2, [r3, #0]
	}

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b00d      	add	sp, #52	; 0x34
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	2000008c 	.word	0x2000008c
 8000578:	2000009c 	.word	0x2000009c
 800057c:	20000100 	.word	0x20000100
 8000580:	200000b0 	.word	0x200000b0
 8000584:	08003954 	.word	0x08003954

08000588 <IIC_Writecmd>:
//
//**************************************************************************************************
//  Send comman to LCD display
//**************************************************************************************************
//
void IIC_Writecmd(uint8_t com) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af04      	add	r7, sp, #16
 800058e:	0002      	movs	r2, r0
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x00, 1, &com, 1, 100);
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <IIC_Writecmd+0x2c>)
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	9302      	str	r3, [sp, #8]
 800059a:	2301      	movs	r3, #1
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	2200      	movs	r2, #0
 80005a6:	2178      	movs	r1, #120	; 0x78
 80005a8:	f000 ff80 	bl	80014ac <HAL_I2C_Mem_Write>
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b002      	add	sp, #8
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000b4 	.word	0x200000b4

080005b8 <IIC_Writedata>:

void IIC_Writedata(uint8_t data) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af04      	add	r7, sp, #16
 80005be:	0002      	movs	r2, r0
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x40, 1, &data, 1, 100);
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <IIC_Writedata+0x2c>)
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2240      	movs	r2, #64	; 0x40
 80005d6:	2178      	movs	r1, #120	; 0x78
 80005d8:	f000 ff68 	bl	80014ac <HAL_I2C_Mem_Write>
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b002      	add	sp, #8
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000b4 	.word	0x200000b4

080005e8 <OLED_Clear>:

void OLED_Clear(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++) {
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e022      	b.n	800063c <OLED_Clear+0x54>
		IIC_Writecmd(0xb0 + i);
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	3b50      	subs	r3, #80	; 0x50
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff ffc2 	bl	8000588 <IIC_Writecmd>
		IIC_Writecmd(0x00);
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ffbf 	bl	8000588 <IIC_Writecmd>
		IIC_Writecmd(0x10);
 800060a:	2010      	movs	r0, #16
 800060c:	f7ff ffbc 	bl	8000588 <IIC_Writecmd>
		for (n = 0; n < 128; n++)
 8000610:	1dbb      	adds	r3, r7, #6
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	e007      	b.n	8000628 <OLED_Clear+0x40>
			IIC_Writedata(0);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffcd 	bl	80005b8 <IIC_Writedata>
		for (n = 0; n < 128; n++)
 800061e:	1dbb      	adds	r3, r7, #6
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	1dbb      	adds	r3, r7, #6
 8000624:	3201      	adds	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b25b      	sxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	daf2      	bge.n	8000618 <OLED_Clear+0x30>
	for (i = 0; i < 8; i++) {
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	3201      	adds	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b07      	cmp	r3, #7
 8000642:	d9d8      	bls.n	80005f6 <OLED_Clear+0xe>
	}
	OLED_Set_Pos(0, 0);
 8000644:	2100      	movs	r1, #0
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f865 	bl	8000716 <OLED_Set_Pos>
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}

08000654 <lcd_init>:
//
//**************************************************************************************************
//	LCD display initialization
//**************************************************************************************************
//
void lcd_init(I2C_HandleTypeDef *h) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	IIC_Writecmd(0xAE); //--turn off oled panel
 800065c:	20ae      	movs	r0, #174	; 0xae
 800065e:	f7ff ff93 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x00); //---set low column address
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ff90 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x10); //---set high column address
 8000668:	2010      	movs	r0, #16
 800066a:	f7ff ff8d 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x40); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800066e:	2040      	movs	r0, #64	; 0x40
 8000670:	f7ff ff8a 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x81); //--set contrast control register
 8000674:	2081      	movs	r0, #129	; 0x81
 8000676:	f7ff ff87 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xCF); // Set SEG Output Current Brightness
 800067a:	20cf      	movs	r0, #207	; 0xcf
 800067c:	f7ff ff84 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA1); //--Set SEG/Column Mapping
 8000680:	20a1      	movs	r0, #161	; 0xa1
 8000682:	f7ff ff81 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xC8); //Set COM/Row Scan Direction
 8000686:	20c8      	movs	r0, #200	; 0xc8
 8000688:	f7ff ff7e 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA6); //--set normal display
 800068c:	20a6      	movs	r0, #166	; 0xa6
 800068e:	f7ff ff7b 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA8); //--set multiplex ratio(1 to 64)
 8000692:	20a8      	movs	r0, #168	; 0xa8
 8000694:	f7ff ff78 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x3f); //--1/64 duty
 8000698:	203f      	movs	r0, #63	; 0x3f
 800069a:	f7ff ff75 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xD3); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800069e:	20d3      	movs	r0, #211	; 0xd3
 80006a0:	f7ff ff72 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x00); //-not offset
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ff6f 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xd5); //--set display clock divide ratio/oscillator frequency
 80006aa:	20d5      	movs	r0, #213	; 0xd5
 80006ac:	f7ff ff6c 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x80); //--set divide ratio, Set Clock as 100 Frames/Sec
 80006b0:	2080      	movs	r0, #128	; 0x80
 80006b2:	f7ff ff69 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xD9); //--set pre-charge period
 80006b6:	20d9      	movs	r0, #217	; 0xd9
 80006b8:	f7ff ff66 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xF1); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80006bc:	20f1      	movs	r0, #241	; 0xf1
 80006be:	f7ff ff63 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xDA); //--set com pins hardware configuration
 80006c2:	20da      	movs	r0, #218	; 0xda
 80006c4:	f7ff ff60 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x12);
 80006c8:	2012      	movs	r0, #18
 80006ca:	f7ff ff5d 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xDB); //--set vcomh
 80006ce:	20db      	movs	r0, #219	; 0xdb
 80006d0:	f7ff ff5a 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x40); //Set VCOM Deselect Level
 80006d4:	2040      	movs	r0, #64	; 0x40
 80006d6:	f7ff ff57 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x20); //-Set Page Addressing Mode (0x00/0x01/0x02)
 80006da:	2020      	movs	r0, #32
 80006dc:	f7ff ff54 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x02); //
 80006e0:	2002      	movs	r0, #2
 80006e2:	f7ff ff51 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x8D); //--set Charge Pump enable/disable
 80006e6:	208d      	movs	r0, #141	; 0x8d
 80006e8:	f7ff ff4e 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x14); //--set(0x10) disable
 80006ec:	2014      	movs	r0, #20
 80006ee:	f7ff ff4b 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA4); // Disable Entire Display On (0xa4/0xa5)
 80006f2:	20a4      	movs	r0, #164	; 0xa4
 80006f4:	f7ff ff48 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA6); // Disable Inverse Display On (0xa6/a7)
 80006f8:	20a6      	movs	r0, #166	; 0xa6
 80006fa:	f7ff ff45 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xAF); //--turn on oled panel
 80006fe:	20af      	movs	r0, #175	; 0xaf
 8000700:	f7ff ff42 	bl	8000588 <IIC_Writecmd>

	IIC_Writecmd(0xAF); /*display ON*/
 8000704:	20af      	movs	r0, #175	; 0xaf
 8000706:	f7ff ff3f 	bl	8000588 <IIC_Writecmd>
	OLED_Clear();
 800070a:	f7ff ff6d 	bl	80005e8 <OLED_Clear>
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}

08000716 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	0002      	movs	r2, r0
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	1c0a      	adds	r2, r1, #0
 8000726:	701a      	strb	r2, [r3, #0]
	IIC_Writecmd(0xb0 + y);
 8000728:	1dbb      	adds	r3, r7, #6
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	3b50      	subs	r3, #80	; 0x50
 800072e:	b2db      	uxtb	r3, r3
 8000730:	0018      	movs	r0, r3
 8000732:	f7ff ff29 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(((x & 0xf0) >> 4) | 0x10);
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	091b      	lsrs	r3, r3, #4
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2210      	movs	r2, #16
 8000740:	4313      	orrs	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff1f 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd((x & 0x0f) | 0x01);
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b25b      	sxtb	r3, r3
 8000750:	220e      	movs	r2, #14
 8000752:	4013      	ands	r3, r2
 8000754:	b25b      	sxtb	r3, r3
 8000756:	2201      	movs	r2, #1
 8000758:	4313      	orrs	r3, r2
 800075a:	b25b      	sxtb	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff ff12 	bl	8000588 <IIC_Writecmd>
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}

0800076c <OLED_ShowChar>:
	else if (p[x + ((y / 8) * 128)] & 0x01 << (y % 8))
		p[x + ((y / 8) * 128)] ^= 0x01 << (y % 8);
	IIC_Writedata(p[x + ((y / 8) * 128)]);
}

void OLED_ShowChar(uint32_t x, uint32_t y, char chr, uint8_t mode) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	0019      	movs	r1, r3
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	1dbb      	adds	r3, r7, #6
 800077e:	1c0a      	adds	r2, r1, #0
 8000780:	701a      	strb	r2, [r3, #0]
	unsigned char c = chr - ' ';
 8000782:	2316      	movs	r3, #22
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	1dfa      	adds	r2, r7, #7
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	3a20      	subs	r2, #32
 800078c:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	if (x > Max_Column - 1) {
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b7f      	cmp	r3, #127	; 0x7f
 8000792:	d904      	bls.n	800079e <OLED_ShowChar+0x32>
		x = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
		y = y + 2;
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	3302      	adds	r3, #2
 800079c:	60bb      	str	r3, [r7, #8]
	}
	OLED_Set_Pos(x, y);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff ffb4 	bl	8000716 <OLED_Set_Pos>
	for (i = 0; i < 6; i++)
 80007ae:	2317      	movs	r3, #23
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e029      	b.n	800080c <OLED_ShowChar+0xa0>
		IIC_Writedata((mode) ? F6x8[c][i] : ~F6x8[c][i]);
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00d      	beq.n	80007dc <OLED_ShowChar+0x70>
 80007c0:	2316      	movs	r3, #22
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	2317      	movs	r3, #23
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	7819      	ldrb	r1, [r3, #0]
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <OLED_ShowChar+0xb4>)
 80007ce:	0013      	movs	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	189b      	adds	r3, r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	18c3      	adds	r3, r0, r3
 80007d8:	5c5b      	ldrb	r3, [r3, r1]
 80007da:	e00e      	b.n	80007fa <OLED_ShowChar+0x8e>
 80007dc:	2316      	movs	r3, #22
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	2317      	movs	r3, #23
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <OLED_ShowChar+0xb4>)
 80007ea:	0013      	movs	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	189b      	adds	r3, r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	18c3      	adds	r3, r0, r3
 80007f4:	5c5b      	ldrb	r3, [r3, r1]
 80007f6:	43db      	mvns	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff fedc 	bl	80005b8 <IIC_Writedata>
	for (i = 0; i < 6; i++)
 8000800:	2117      	movs	r1, #23
 8000802:	187b      	adds	r3, r7, r1
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	187b      	adds	r3, r7, r1
 8000808:	3201      	adds	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	2317      	movs	r3, #23
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b05      	cmp	r3, #5
 8000814:	d9d0      	bls.n	80007b8 <OLED_ShowChar+0x4c>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b006      	add	sp, #24
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08003974 	.word	0x08003974

08000824 <OLED_ShowString>:

void OLED_ShowString(uint32_t x, uint32_t y, char *chr, uint8_t mode) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	001a      	movs	r2, r3
 8000832:	1cfb      	adds	r3, r7, #3
 8000834:	701a      	strb	r2, [r3, #0]
	unsigned char j = 0;
 8000836:	2317      	movs	r3, #23
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	while (chr[j] != '\0') {
 800083e:	e035      	b.n	80008ac <OLED_ShowString+0x88>
		if (chr[j] == '\n') {
 8000840:	2317      	movs	r3, #23
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b0a      	cmp	r3, #10
 800084e:	d105      	bne.n	800085c <OLED_ShowString+0x38>
			x = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
			y++;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	3301      	adds	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	e021      	b.n	80008a0 <OLED_ShowString+0x7c>
		} else if (chr[j] == '\f') {
 800085c:	2317      	movs	r3, #23
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b0c      	cmp	r3, #12
 800086a:	d102      	bne.n	8000872 <OLED_ShowString+0x4e>
			OLED_Clear();
 800086c:	f7ff febc 	bl	80005e8 <OLED_Clear>
 8000870:	e016      	b.n	80008a0 <OLED_ShowString+0x7c>
		} else {
			OLED_ShowChar(x, y, chr[j], mode);
 8000872:	2317      	movs	r3, #23
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	18d3      	adds	r3, r2, r3
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	1cfb      	adds	r3, r7, #3
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ff71 	bl	800076c <OLED_ShowChar>
			x += 6;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3306      	adds	r3, #6
 800088e:	60fb      	str	r3, [r7, #12]
			if (x > 120) {
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b78      	cmp	r3, #120	; 0x78
 8000894:	d904      	bls.n	80008a0 <OLED_ShowString+0x7c>
				x = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
				y++;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3301      	adds	r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
			}
		}
		j++;
 80008a0:	2117      	movs	r1, #23
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	3201      	adds	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
	while (chr[j] != '\0') {
 80008ac:	2317      	movs	r3, #23
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	18d3      	adds	r3, r2, r3
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1c1      	bne.n	8000840 <OLED_ShowString+0x1c>
	}
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b006      	add	sp, #24
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f000 fa63 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f80b 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 f927 	bl	8000b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008d6:	f000 f881 	bl	80009dc <MX_I2C1_Init>
  MX_RTC_Init();
 80008da:	f000 f8bf 	bl	8000a5c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  appSetup();
 80008de:	f7ff fde7 	bl	80004b0 <appSetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  appLoop();
 80008e2:	f7ff fdfd 	bl	80004e0 <appLoop>
 80008e6:	e7fc      	b.n	80008e2 <main+0x1c>

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b09d      	sub	sp, #116	; 0x74
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	2438      	movs	r4, #56	; 0x38
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	0018      	movs	r0, r3
 80008f4:	2338      	movs	r3, #56	; 0x38
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f002 fbeb 	bl	80030d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fe:	2324      	movs	r3, #36	; 0x24
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2314      	movs	r3, #20
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f002 fbe3 	bl	80030d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	0018      	movs	r0, r3
 8000912:	2320      	movs	r3, #32
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f002 fbdc 	bl	80030d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <SystemClock_Config+0xec>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <SystemClock_Config+0xf0>)
 8000922:	401a      	ands	r2, r3
 8000924:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <SystemClock_Config+0xec>)
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	0109      	lsls	r1, r1, #4
 800092a:	430a      	orrs	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800092e:	0021      	movs	r1, r4
 8000930:	187b      	adds	r3, r7, r1
 8000932:	220a      	movs	r2, #10
 8000934:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2201      	movs	r2, #1
 800093a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2210      	movs	r2, #16
 8000940:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2201      	movs	r2, #1
 8000946:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2202      	movs	r2, #2
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	02d2      	lsls	r2, r2, #11
 800095a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	03d2      	lsls	r2, r2, #15
 8000962:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	187b      	adds	r3, r7, r1
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f942 	bl	8001bf0 <HAL_RCC_OscConfig>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000970:	f000 f91c 	bl	8000bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	2124      	movs	r1, #36	; 0x24
 8000976:	187b      	adds	r3, r7, r1
 8000978:	220f      	movs	r2, #15
 800097a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2203      	movs	r2, #3
 8000980:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2101      	movs	r1, #1
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fced 	bl	8002378 <HAL_RCC_ClockConfig>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009a2:	f000 f903 	bl	8000bac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2228      	movs	r2, #40	; 0x28
 80009aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0292      	lsls	r2, r2, #10
 80009b8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 fec9 	bl	8002754 <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009c6:	f000 f8f1 	bl	8000bac <Error_Handler>
  }
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b01d      	add	sp, #116	; 0x74
 80009d0:	bd90      	pop	{r4, r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	40007000 	.word	0x40007000
 80009d8:	ffffe7ff 	.word	0xffffe7ff

080009dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <MX_I2C1_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009e8:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <MX_I2C1_Init+0x7c>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 fcb1 	bl	8001380 <HAL_I2C_Init>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a22:	f000 f8c3 	bl	8000bac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 f848 	bl	8001ac0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a34:	f000 f8ba 	bl	8000bac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f001 f88b 	bl	8001b58 <HAL_I2CEx_ConfigDigitalFilter>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 f8b1 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000b4 	.word	0x200000b4
 8000a54:	40005400 	.word	0x40005400
 8000a58:	00707cbb 	.word	0x00707cbb

08000a5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f002 fb32 	bl	80030d4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000a70:	003b      	movs	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000a78:	4a29      	ldr	r2, [pc, #164]	; (8000b20 <MX_RTC_Init+0xc4>)
 8000a7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000a84:	227f      	movs	r2, #127	; 0x7f
 8000a86:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000a8a:	22ff      	movs	r2, #255	; 0xff
 8000a8c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f001 ff99 	bl	80029e0 <HAL_RTC_Init>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000ab2:	f000 f87b 	bl	8000bac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 9;
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2209      	movs	r2, #9
 8000aba:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 10;
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	220a      	movs	r2, #10
 8000ac0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ad4:	1d39      	adds	r1, r7, #4
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 f81e 	bl	8002b1c <HAL_RTC_SetTime>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 f862 	bl	8000bac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ae8:	003b      	movs	r3, r7
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000aee:	003b      	movs	r3, r7
 8000af0:	2201      	movs	r2, #1
 8000af2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000af4:	003b      	movs	r3, r7
 8000af6:	2201      	movs	r2, #1
 8000af8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8000afa:	003b      	movs	r3, r7
 8000afc:	2213      	movs	r2, #19
 8000afe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000b00:	0039      	movs	r1, r7
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_RTC_Init+0xc0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 f928 	bl	8002d5c <HAL_RTC_SetDate>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000b10:	f000 f84c 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b006      	add	sp, #24
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000100 	.word	0x20000100
 8000b20:	40002800 	.word	0x40002800

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	240c      	movs	r4, #12
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2314      	movs	r3, #20
 8000b32:	001a      	movs	r2, r3
 8000b34:	2100      	movs	r1, #0
 8000b36:	f002 facd 	bl	80030d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_GPIO_Init+0x84>)
 8000b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_GPIO_Init+0x84>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_GPIO_Init+0x84>)
 8000b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_GPIO_Init+0x84>)
 8000b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_GPIO_Init+0x84>)
 8000b58:	2102      	movs	r1, #2
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_GPIO_Init+0x84>)
 8000b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b62:	2202      	movs	r2, #2
 8000b64:	4013      	ands	r3, r2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b6a:	23a0      	movs	r3, #160	; 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2108      	movs	r1, #8
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fbcc 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b78:	0021      	movs	r1, r4
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2201      	movs	r2, #1
 8000b84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b92:	187a      	adds	r2, r7, r1
 8000b94:	23a0      	movs	r3, #160	; 0xa0
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fa42 	bl	8001024 <HAL_GPIO_Init>

}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b009      	add	sp, #36	; 0x24
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	40021000 	.word	0x40021000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <HAL_MspInit+0x24>)
 8000bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_MspInit+0x24>)
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_MspInit+0x24>)
 8000bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_MspInit+0x24>)
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	0549      	lsls	r1, r1, #21
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	240c      	movs	r4, #12
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	0018      	movs	r0, r3
 8000bee:	2314      	movs	r3, #20
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f002 fa6e 	bl	80030d4 <memset>
  if(hi2c->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_I2C_MspInit+0x7c>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d128      	bne.n	8000c54 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_I2C_MspInit+0x80>)
 8000c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_I2C_MspInit+0x80>)
 8000c08:	2102      	movs	r1, #2
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_I2C_MspInit+0x80>)
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c12:	2202      	movs	r2, #2
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1a:	0021      	movs	r1, r4
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	22c0      	movs	r2, #192	; 0xc0
 8000c20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2212      	movs	r2, #18
 8000c26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2203      	movs	r2, #3
 8000c32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2201      	movs	r2, #1
 8000c38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <HAL_I2C_MspInit+0x84>)
 8000c3e:	0019      	movs	r1, r3
 8000c40:	0010      	movs	r0, r2
 8000c42:	f000 f9ef 	bl	8001024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_I2C_MspInit+0x80>)
 8000c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_I2C_MspInit+0x80>)
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	0389      	lsls	r1, r1, #14
 8000c50:	430a      	orrs	r2, r1
 8000c52:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b009      	add	sp, #36	; 0x24
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	50000400 	.word	0x50000400

08000c68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_RTC_MspInit+0x28>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d106      	bne.n	8000c88 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_RTC_MspInit+0x2c>)
 8000c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_RTC_MspInit+0x2c>)
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	02c9      	lsls	r1, r1, #11
 8000c84:	430a      	orrs	r2, r1
 8000c86:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40002800 	.word	0x40002800
 8000c94:	40021000 	.word	0x40021000

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <NMI_Handler+0x4>

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f8be 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f002 f9c2 	bl	8003080 <__errno>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	425b      	negs	r3, r3
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	18d2      	adds	r2, r2, r3
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <_sbrk+0x64>)
 8000d18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b006      	add	sp, #24
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20002000 	.word	0x20002000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	20000090 	.word	0x20000090
 8000d30:	20000138 	.word	0x20000138

08000d34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490e      	ldr	r1, [pc, #56]	; (8000d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0b      	ldr	r4, [pc, #44]	; (8000d8c <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d6a:	f7ff ffe3 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f002 f98d 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fda8 	bl	80008c6 <main>

08000d76 <LoopForever>:

LoopForever:
    b LoopForever
 8000d76:	e7fe      	b.n	8000d76 <LoopForever>
   ldr   r0, =_estack
 8000d78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d84:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8000d88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d8c:	20000138 	.word	0x20000138

08000d90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_COMP_IRQHandler>
	...

08000d94 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x3c>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_Init+0x3c>)
 8000da6:	2140      	movs	r1, #64	; 0x40
 8000da8:	430a      	orrs	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dac:	2000      	movs	r0, #0
 8000dae:	f000 f811 	bl	8000dd4 <HAL_InitTick>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e001      	b.n	8000dc2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dbe:	f7ff fefb 	bl	8000bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
}
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_InitTick+0x5c>)
 8000dde:	681c      	ldr	r4, [r3, #0]
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_InitTick+0x60>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	0019      	movs	r1, r3
 8000de6:	23fa      	movs	r3, #250	; 0xfa
 8000de8:	0098      	lsls	r0, r3, #2
 8000dea:	f7ff f997 	bl	800011c <__udivsi3>
 8000dee:	0003      	movs	r3, r0
 8000df0:	0019      	movs	r1, r3
 8000df2:	0020      	movs	r0, r4
 8000df4:	f7ff f992 	bl	800011c <__udivsi3>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 f905 	bl	800100a <HAL_SYSTICK_Config>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e00f      	b.n	8000e28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d80b      	bhi.n	8000e26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	2301      	movs	r3, #1
 8000e12:	425b      	negs	r3, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 f8e2 	bl	8000fe0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_InitTick+0x64>)
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b003      	add	sp, #12
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	18d2      	adds	r2, r2, r3
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000124 	.word	0x20000124

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	20000124 	.word	0x20000124

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fff0 	bl	8000e60 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001a      	movs	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	189b      	adds	r3, r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	f7ff ffe0 	bl	8000e60 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b7f      	cmp	r3, #127	; 0x7f
 8000ed0:	d828      	bhi.n	8000f24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <__NVIC_SetPriority+0xd4>)
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	33c0      	adds	r3, #192	; 0xc0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	589b      	ldr	r3, [r3, r2]
 8000ee2:	1dfa      	adds	r2, r7, #7
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	2203      	movs	r2, #3
 8000eea:	400a      	ands	r2, r1
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	21ff      	movs	r1, #255	; 0xff
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	22ff      	movs	r2, #255	; 0xff
 8000f00:	401a      	ands	r2, r3
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0018      	movs	r0, r3
 8000f08:	2303      	movs	r3, #3
 8000f0a:	4003      	ands	r3, r0
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f10:	481f      	ldr	r0, [pc, #124]	; (8000f90 <__NVIC_SetPriority+0xd4>)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	33c0      	adds	r3, #192	; 0xc0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f22:	e031      	b.n	8000f88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	400b      	ands	r3, r1
 8000f30:	3b08      	subs	r3, #8
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3306      	adds	r3, #6
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1dfa      	adds	r2, r7, #7
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	0011      	movs	r1, r2
 8000f44:	2203      	movs	r2, #3
 8000f46:	400a      	ands	r2, r1
 8000f48:	00d2      	lsls	r2, r2, #3
 8000f4a:	21ff      	movs	r1, #255	; 0xff
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	401a      	ands	r2, r3
 8000f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	22ff      	movs	r2, #255	; 0xff
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	2303      	movs	r3, #3
 8000f66:	4003      	ands	r3, r0
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	001c      	movs	r4, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	4023      	ands	r3, r4
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	3306      	adds	r3, #6
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18c3      	adds	r3, r0, r3
 8000f84:	3304      	adds	r3, #4
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	045b      	lsls	r3, r3, #17
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d301      	bcc.n	8000fb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fac:	2301      	movs	r3, #1
 8000fae:	e010      	b.n	8000fd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <SysTick_Config+0x44>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3a01      	subs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff ff7c 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x44>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	210f      	movs	r1, #15
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ffbf 	bl	8000f98 <SysTick_Config>
 800101a:	0003      	movs	r3, r0
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800103a:	e14f      	b.n	80012dc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4091      	lsls	r1, r2
 8001046:	000a      	movs	r2, r1
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <HAL_GPIO_Init+0x30>
 8001052:	e140      	b.n	80012d6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d00b      	beq.n	8001074 <HAL_GPIO_Init+0x50>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001068:	2b11      	cmp	r3, #17
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b12      	cmp	r3, #18
 8001072:	d130      	bne.n	80010d6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	409a      	lsls	r2, r3
 8001082:	0013      	movs	r3, r2
 8001084:	43da      	mvns	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	2201      	movs	r2, #1
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0xf2>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b12      	cmp	r3, #18
 8001114:	d123      	bne.n	800115e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	58d3      	ldr	r3, [r2, r3]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2207      	movs	r2, #7
 8001128:	4013      	ands	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2107      	movs	r1, #7
 8001142:	400b      	ands	r3, r1
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	6939      	ldr	r1, [r7, #16]
 800115c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2203      	movs	r2, #3
 800117c:	401a      	ands	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	055b      	lsls	r3, r3, #21
 800119a:	4013      	ands	r3, r2
 800119c:	d100      	bne.n	80011a0 <HAL_GPIO_Init+0x17c>
 800119e:	e09a      	b.n	80012d6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	430a      	orrs	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	589b      	ldr	r3, [r3, r2]
 80011b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2203      	movs	r2, #3
 80011be:	4013      	ands	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	409a      	lsls	r2, r3
 80011c6:	0013      	movs	r3, r2
 80011c8:	43da      	mvns	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	23a0      	movs	r3, #160	; 0xa0
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d019      	beq.n	800120e <HAL_GPIO_Init+0x1ea>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x1e6>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a46      	ldr	r2, [pc, #280]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x1e2>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a45      	ldr	r2, [pc, #276]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x1de>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a44      	ldr	r2, [pc, #272]	; (8001308 <HAL_GPIO_Init+0x2e4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x1da>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 80011fe:	2306      	movs	r3, #6
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 800120e:	2300      	movs	r3, #0
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	2103      	movs	r1, #3
 8001214:	400a      	ands	r2, r1
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	025b      	lsls	r3, r3, #9
 8001246:	4013      	ands	r3, r2
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <HAL_GPIO_Init+0x2e8>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	029b      	lsls	r3, r3, #10
 8001270:	4013      	ands	r3, r2
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <HAL_GPIO_Init+0x2e8>)
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	035b      	lsls	r3, r3, #13
 800129a:	4013      	ands	r3, r2
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	039b      	lsls	r3, r3, #14
 80012c4:	4013      	ands	r3, r2
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	40da      	lsrs	r2, r3
 80012e4:	1e13      	subs	r3, r2, #0
 80012e6:	d000      	beq.n	80012ea <HAL_GPIO_Init+0x2c6>
 80012e8:	e6a8      	b.n	800103c <HAL_GPIO_Init+0x18>
  }
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b006      	add	sp, #24
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	50000400 	.word	0x50000400
 8001300:	50000800 	.word	0x50000800
 8001304:	50000c00 	.word	0x50000c00
 8001308:	50001c00 	.word	0x50001c00
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	0008      	movs	r0, r1
 800131a:	0011      	movs	r1, r2
 800131c:	1cbb      	adds	r3, r7, #2
 800131e:	1c02      	adds	r2, r0, #0
 8001320:	801a      	strh	r2, [r3, #0]
 8001322:	1c7b      	adds	r3, r7, #1
 8001324:	1c0a      	adds	r2, r1, #0
 8001326:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	1c7b      	adds	r3, r7, #1
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001330:	1cbb      	adds	r3, r7, #2
 8001332:	881a      	ldrh	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001338:	e003      	b.n	8001342 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800133a:	1cbb      	adds	r3, r7, #2
 800133c:	881a      	ldrh	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	000a      	movs	r2, r1
 8001354:	1cbb      	adds	r3, r7, #2
 8001356:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135e:	1cbb      	adds	r3, r7, #2
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	041a      	lsls	r2, r3, #16
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	1cb9      	adds	r1, r7, #2
 800136e:	8809      	ldrh	r1, [r1, #0]
 8001370:	400b      	ands	r3, r1
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	619a      	str	r2, [r3, #24]
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b004      	add	sp, #16
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e082      	b.n	8001498 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2241      	movs	r2, #65	; 0x41
 8001396:	5c9b      	ldrb	r3, [r3, r2]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d107      	bne.n	80013ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2240      	movs	r2, #64	; 0x40
 80013a2:	2100      	movs	r1, #0
 80013a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fc19 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2241      	movs	r2, #65	; 0x41
 80013b2:	2124      	movs	r1, #36	; 0x24
 80013b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	438a      	bics	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4934      	ldr	r1, [pc, #208]	; (80014a0 <HAL_I2C_Init+0x120>)
 80013d0:	400a      	ands	r2, r1
 80013d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4931      	ldr	r1, [pc, #196]	; (80014a4 <HAL_I2C_Init+0x124>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d108      	bne.n	80013fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	0209      	lsls	r1, r1, #8
 80013f8:	430a      	orrs	r2, r1
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	e007      	b.n	800140e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2184      	movs	r1, #132	; 0x84
 8001408:	0209      	lsls	r1, r1, #8
 800140a:	430a      	orrs	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d104      	bne.n	8001420 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	491f      	ldr	r1, [pc, #124]	; (80014a8 <HAL_I2C_Init+0x128>)
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	491a      	ldr	r1, [pc, #104]	; (80014a4 <HAL_I2C_Init+0x124>)
 800143c:	400a      	ands	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	431a      	orrs	r2, r3
 800144a:	0011      	movs	r1, r2
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	021a      	lsls	r2, r3, #8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69d9      	ldr	r1, [r3, #28]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1a      	ldr	r2, [r3, #32]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2241      	movs	r2, #65	; 0x41
 8001484:	2120      	movs	r1, #32
 8001486:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2242      	movs	r2, #66	; 0x42
 8001492:	2100      	movs	r1, #0
 8001494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	f0ffffff 	.word	0xf0ffffff
 80014a4:	ffff7fff 	.word	0xffff7fff
 80014a8:	02008000 	.word	0x02008000

080014ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	000c      	movs	r4, r1
 80014b6:	0010      	movs	r0, r2
 80014b8:	0019      	movs	r1, r3
 80014ba:	230a      	movs	r3, #10
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	1c22      	adds	r2, r4, #0
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	2308      	movs	r3, #8
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	1c02      	adds	r2, r0, #0
 80014c8:	801a      	strh	r2, [r3, #0]
 80014ca:	1dbb      	adds	r3, r7, #6
 80014cc:	1c0a      	adds	r2, r1, #0
 80014ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2241      	movs	r2, #65	; 0x41
 80014d4:	5c9b      	ldrb	r3, [r3, r2]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b20      	cmp	r3, #32
 80014da:	d000      	beq.n	80014de <HAL_I2C_Mem_Write+0x32>
 80014dc:	e10c      	b.n	80016f8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <HAL_I2C_Mem_Write+0x42>
 80014e4:	232c      	movs	r3, #44	; 0x2c
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d105      	bne.n	80014fa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0ff      	b.n	80016fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	5c9b      	ldrb	r3, [r3, r2]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_I2C_Mem_Write+0x5c>
 8001504:	2302      	movs	r3, #2
 8001506:	e0f8      	b.n	80016fa <HAL_I2C_Mem_Write+0x24e>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	2101      	movs	r1, #1
 800150e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001510:	f7ff fca6 	bl	8000e60 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	0219      	lsls	r1, r3, #8
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2319      	movs	r3, #25
 8001524:	2201      	movs	r2, #1
 8001526:	f000 f975 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 800152a:	1e03      	subs	r3, r0, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0e3      	b.n	80016fa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2241      	movs	r2, #65	; 0x41
 8001536:	2121      	movs	r1, #33	; 0x21
 8001538:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2242      	movs	r2, #66	; 0x42
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	222c      	movs	r2, #44	; 0x2c
 8001552:	18ba      	adds	r2, r7, r2
 8001554:	8812      	ldrh	r2, [r2, #0]
 8001556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800155e:	1dbb      	adds	r3, r7, #6
 8001560:	881c      	ldrh	r4, [r3, #0]
 8001562:	2308      	movs	r3, #8
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	881a      	ldrh	r2, [r3, #0]
 8001568:	230a      	movs	r3, #10
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	8819      	ldrh	r1, [r3, #0]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	0023      	movs	r3, r4
 800157a:	f000 f8c5 	bl	8001708 <I2C_RequestMemoryWrite>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d005      	beq.n	800158e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2240      	movs	r2, #64	; 0x40
 8001586:	2100      	movs	r1, #0
 8001588:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0b5      	b.n	80016fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	2bff      	cmp	r3, #255	; 0xff
 8001596:	d911      	bls.n	80015bc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	22ff      	movs	r2, #255	; 0xff
 800159c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	045c      	lsls	r4, r3, #17
 80015a8:	230a      	movs	r3, #10
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	8819      	ldrh	r1, [r3, #0]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	2300      	movs	r3, #0
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	0023      	movs	r3, r4
 80015b6:	f000 fa4d 	bl	8001a54 <I2C_TransferConfig>
 80015ba:	e012      	b.n	80015e2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	049c      	lsls	r4, r3, #18
 80015d0:	230a      	movs	r3, #10
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	8819      	ldrh	r1, [r3, #0]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	0023      	movs	r3, r4
 80015de:	f000 fa39 	bl	8001a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f000 f952 	bl	8001892 <I2C_WaitOnTXISFlagUntilTimeout>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e081      	b.n	80016fa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	781a      	ldrb	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001610:	b29b      	uxth	r3, r3
 8001612:	3b01      	subs	r3, #1
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161e:	3b01      	subs	r3, #1
 8001620:	b29a      	uxth	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162a:	b29b      	uxth	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d03a      	beq.n	80016a6 <HAL_I2C_Mem_Write+0x1fa>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	2b00      	cmp	r3, #0
 8001636:	d136      	bne.n	80016a6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	0013      	movs	r3, r2
 8001642:	2200      	movs	r2, #0
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	f000 f8e5 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e053      	b.n	80016fa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001656:	b29b      	uxth	r3, r3
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d911      	bls.n	8001680 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	b2da      	uxtb	r2, r3
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	045c      	lsls	r4, r3, #17
 800166c:	230a      	movs	r3, #10
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	8819      	ldrh	r1, [r3, #0]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	2300      	movs	r3, #0
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	0023      	movs	r3, r4
 800167a:	f000 f9eb 	bl	8001a54 <I2C_TransferConfig>
 800167e:	e012      	b.n	80016a6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	b2da      	uxtb	r2, r3
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	049c      	lsls	r4, r3, #18
 8001694:	230a      	movs	r3, #10
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	8819      	ldrh	r1, [r3, #0]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	2300      	movs	r3, #0
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	0023      	movs	r3, r4
 80016a2:	f000 f9d7 	bl	8001a54 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d198      	bne.n	80015e2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 f92a 	bl	8001910 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016bc:	1e03      	subs	r3, r0, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e01a      	b.n	80016fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2220      	movs	r2, #32
 80016ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	490b      	ldr	r1, [pc, #44]	; (8001704 <HAL_I2C_Mem_Write+0x258>)
 80016d8:	400a      	ands	r2, r1
 80016da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2241      	movs	r2, #65	; 0x41
 80016e0:	2120      	movs	r1, #32
 80016e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2242      	movs	r2, #66	; 0x42
 80016e8:	2100      	movs	r1, #0
 80016ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	2100      	movs	r1, #0
 80016f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80016f8:	2302      	movs	r3, #2
  }
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b007      	add	sp, #28
 8001700:	bd90      	pop	{r4, r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	fe00e800 	.word	0xfe00e800

08001708 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	000c      	movs	r4, r1
 8001712:	0010      	movs	r0, r2
 8001714:	0019      	movs	r1, r3
 8001716:	250a      	movs	r5, #10
 8001718:	197b      	adds	r3, r7, r5
 800171a:	1c22      	adds	r2, r4, #0
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	2308      	movs	r3, #8
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	1c02      	adds	r2, r0, #0
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	1dbb      	adds	r3, r7, #6
 8001728:	1c0a      	adds	r2, r1, #0
 800172a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800172c:	1dbb      	adds	r3, r7, #6
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	045c      	lsls	r4, r3, #17
 8001736:	197b      	adds	r3, r7, r5
 8001738:	8819      	ldrh	r1, [r3, #0]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <I2C_RequestMemoryWrite+0xc4>)
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	0023      	movs	r3, r4
 8001742:	f000 f987 	bl	8001a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001748:	6a39      	ldr	r1, [r7, #32]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0018      	movs	r0, r3
 800174e:	f000 f8a0 	bl	8001892 <I2C_WaitOnTXISFlagUntilTimeout>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d001      	beq.n	800175a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e033      	b.n	80017c2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800175a:	1dbb      	adds	r3, r7, #6
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001762:	2308      	movs	r3, #8
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
 8001770:	e019      	b.n	80017a6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001772:	2308      	movs	r3, #8
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	6a39      	ldr	r1, [r7, #32]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	0018      	movs	r0, r3
 800178c:	f000 f881 	bl	8001892 <I2C_WaitOnTXISFlagUntilTimeout>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d001      	beq.n	8001798 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e014      	b.n	80017c2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001798:	2308      	movs	r3, #8
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80017a6:	6a3a      	ldr	r2, [r7, #32]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	0013      	movs	r3, r2
 80017b0:	2200      	movs	r2, #0
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	f000 f82e 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d001      	beq.n	80017c0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b004      	add	sp, #16
 80017c8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	80002000 	.word	0x80002000

080017d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d103      	bne.n	80017ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d007      	beq.n	800180c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2101      	movs	r1, #1
 8001808:	430a      	orrs	r2, r1
 800180a:	619a      	str	r2, [r3, #24]
  }
}
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}

08001814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001824:	e021      	b.n	800186a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	d01e      	beq.n	800186a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182c:	f7ff fb18 	bl	8000e60 <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d302      	bcc.n	8001842 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d113      	bne.n	800186a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	2220      	movs	r2, #32
 8001848:	431a      	orrs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2241      	movs	r2, #65	; 0x41
 8001852:	2120      	movs	r1, #32
 8001854:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2242      	movs	r2, #66	; 0x42
 800185a:	2100      	movs	r1, #0
 800185c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2240      	movs	r2, #64	; 0x40
 8001862:	2100      	movs	r1, #0
 8001864:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	4013      	ands	r3, r2
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	425a      	negs	r2, r3
 800187a:	4153      	adcs	r3, r2
 800187c:	b2db      	uxtb	r3, r3
 800187e:	001a      	movs	r2, r3
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d0ce      	beq.n	8001826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b004      	add	sp, #16
 8001890:	bd80      	pop	{r7, pc}

08001892 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800189e:	e02b      	b.n	80018f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 f86e 	bl	8001988 <I2C_IsAcknowledgeFailed>
 80018ac:	1e03      	subs	r3, r0, #0
 80018ae:	d001      	beq.n	80018b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e029      	b.n	8001908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3301      	adds	r3, #1
 80018b8:	d01e      	beq.n	80018f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ba:	f7ff fad1 	bl	8000e60 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d302      	bcc.n	80018d0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d113      	bne.n	80018f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	2220      	movs	r2, #32
 80018d6:	431a      	orrs	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2241      	movs	r2, #65	; 0x41
 80018e0:	2120      	movs	r1, #32
 80018e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2242      	movs	r2, #66	; 0x42
 80018e8:	2100      	movs	r1, #0
 80018ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	2100      	movs	r1, #0
 80018f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e007      	b.n	8001908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2202      	movs	r2, #2
 8001900:	4013      	ands	r3, r2
 8001902:	2b02      	cmp	r3, #2
 8001904:	d1cc      	bne.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b004      	add	sp, #16
 800190e:	bd80      	pop	{r7, pc}

08001910 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800191c:	e028      	b.n	8001970 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f82f 	bl	8001988 <I2C_IsAcknowledgeFailed>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d001      	beq.n	8001932 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e026      	b.n	8001980 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001932:	f7ff fa95 	bl	8000e60 <HAL_GetTick>
 8001936:	0002      	movs	r2, r0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	d302      	bcc.n	8001948 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d113      	bne.n	8001970 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	2220      	movs	r2, #32
 800194e:	431a      	orrs	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2241      	movs	r2, #65	; 0x41
 8001958:	2120      	movs	r1, #32
 800195a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2242      	movs	r2, #66	; 0x42
 8001960:	2100      	movs	r1, #0
 8001962:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2240      	movs	r2, #64	; 0x40
 8001968:	2100      	movs	r1, #0
 800196a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e007      	b.n	8001980 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2220      	movs	r2, #32
 8001978:	4013      	ands	r3, r2
 800197a:	2b20      	cmp	r3, #32
 800197c:	d1cf      	bne.n	800191e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b004      	add	sp, #16
 8001986:	bd80      	pop	{r7, pc}

08001988 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2210      	movs	r2, #16
 800199c:	4013      	ands	r3, r2
 800199e:	2b10      	cmp	r3, #16
 80019a0:	d151      	bne.n	8001a46 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a2:	e021      	b.n	80019e8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	3301      	adds	r3, #1
 80019a8:	d01e      	beq.n	80019e8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019aa:	f7ff fa59 	bl	8000e60 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d302      	bcc.n	80019c0 <I2C_IsAcknowledgeFailed+0x38>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d113      	bne.n	80019e8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	2220      	movs	r2, #32
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2241      	movs	r2, #65	; 0x41
 80019d0:	2120      	movs	r1, #32
 80019d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2242      	movs	r2, #66	; 0x42
 80019d8:	2100      	movs	r1, #0
 80019da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	2100      	movs	r1, #0
 80019e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e02f      	b.n	8001a48 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2220      	movs	r2, #32
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d1d6      	bne.n	80019a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2210      	movs	r2, #16
 80019fc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2220      	movs	r2, #32
 8001a04:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fee1 	bl	80017d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	490d      	ldr	r1, [pc, #52]	; (8001a50 <I2C_IsAcknowledgeFailed+0xc8>)
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	2204      	movs	r2, #4
 8001a24:	431a      	orrs	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2241      	movs	r2, #65	; 0x41
 8001a2e:	2120      	movs	r1, #32
 8001a30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2242      	movs	r2, #66	; 0x42
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2240      	movs	r2, #64	; 0x40
 8001a3e:	2100      	movs	r1, #0
 8001a40:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b004      	add	sp, #16
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	fe00e800 	.word	0xfe00e800

08001a54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	0008      	movs	r0, r1
 8001a5e:	0011      	movs	r1, r2
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	240a      	movs	r4, #10
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	1c02      	adds	r2, r0, #0
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	2009      	movs	r0, #9
 8001a6c:	183b      	adds	r3, r7, r0
 8001a6e:	1c0a      	adds	r2, r1, #0
 8001a70:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	6a3a      	ldr	r2, [r7, #32]
 8001a7a:	0d51      	lsrs	r1, r2, #21
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	00d2      	lsls	r2, r2, #3
 8001a80:	400a      	ands	r2, r1
 8001a82:	490e      	ldr	r1, [pc, #56]	; (8001abc <I2C_TransferConfig+0x68>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	43d2      	mvns	r2, r2
 8001a88:	401a      	ands	r2, r3
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	193b      	adds	r3, r7, r4
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	059b      	lsls	r3, r3, #22
 8001a92:	0d9a      	lsrs	r2, r3, #22
 8001a94:	183b      	adds	r3, r7, r0
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	0418      	lsls	r0, r3, #16
 8001a9a:	23ff      	movs	r3, #255	; 0xff
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b005      	add	sp, #20
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	03ff63ff 	.word	0x03ff63ff

08001ac0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2241      	movs	r2, #65	; 0x41
 8001ace:	5c9b      	ldrb	r3, [r3, r2]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d138      	bne.n	8001b48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2240      	movs	r2, #64	; 0x40
 8001ada:	5c9b      	ldrb	r3, [r3, r2]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e032      	b.n	8001b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	2101      	movs	r1, #1
 8001aea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2241      	movs	r2, #65	; 0x41
 8001af0:	2124      	movs	r1, #36	; 0x24
 8001af2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2101      	movs	r1, #1
 8001b00:	438a      	bics	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4911      	ldr	r1, [pc, #68]	; (8001b54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2241      	movs	r2, #65	; 0x41
 8001b38:	2120      	movs	r1, #32
 8001b3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2240      	movs	r2, #64	; 0x40
 8001b40:	2100      	movs	r1, #0
 8001b42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	ffffefff 	.word	0xffffefff

08001b58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2241      	movs	r2, #65	; 0x41
 8001b66:	5c9b      	ldrb	r3, [r3, r2]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d139      	bne.n	8001be2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2240      	movs	r2, #64	; 0x40
 8001b72:	5c9b      	ldrb	r3, [r3, r2]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e033      	b.n	8001be4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	2101      	movs	r1, #1
 8001b82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2241      	movs	r2, #65	; 0x41
 8001b88:	2124      	movs	r1, #36	; 0x24
 8001b8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a11      	ldr	r2, [pc, #68]	; (8001bec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2241      	movs	r2, #65	; 0x41
 8001bd2:	2120      	movs	r1, #32
 8001bd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2240      	movs	r2, #64	; 0x40
 8001bda:	2100      	movs	r1, #0
 8001bdc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
  }
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b004      	add	sp, #16
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	fffff0ff 	.word	0xfffff0ff

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f000 fbaf 	bl	8002362 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c04:	4bcf      	ldr	r3, [pc, #828]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	220c      	movs	r2, #12
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c0e:	4bcd      	ldr	r3, [pc, #820]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	025b      	lsls	r3, r3, #9
 8001c16:	4013      	ands	r3, r2
 8001c18:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d100      	bne.n	8001c26 <HAL_RCC_OscConfig+0x36>
 8001c24:	e07e      	b.n	8001d24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d007      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d112      	bne.n	8001c58 <HAL_RCC_OscConfig+0x68>
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10d      	bne.n	8001c58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	4bc1      	ldr	r3, [pc, #772]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	4013      	ands	r3, r2
 8001c46:	d100      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5a>
 8001c48:	e06b      	b.n	8001d22 <HAL_RCC_OscConfig+0x132>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d167      	bne.n	8001d22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f000 fb85 	bl	8002362 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	025b      	lsls	r3, r3, #9
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_OscConfig+0x84>
 8001c64:	4bb7      	ldr	r3, [pc, #732]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4bb6      	ldr	r3, [pc, #728]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0249      	lsls	r1, r1, #9
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e027      	b.n	8001cc4 <HAL_RCC_OscConfig+0xd4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	23a0      	movs	r3, #160	; 0xa0
 8001c7a:	02db      	lsls	r3, r3, #11
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10e      	bne.n	8001c9e <HAL_RCC_OscConfig+0xae>
 8001c80:	4bb0      	ldr	r3, [pc, #704]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4baf      	ldr	r3, [pc, #700]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	02c9      	lsls	r1, r1, #11
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	4bad      	ldr	r3, [pc, #692]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4bac      	ldr	r3, [pc, #688]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0249      	lsls	r1, r1, #9
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e012      	b.n	8001cc4 <HAL_RCC_OscConfig+0xd4>
 8001c9e:	4ba9      	ldr	r3, [pc, #676]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4ba8      	ldr	r3, [pc, #672]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001ca4:	49a8      	ldr	r1, [pc, #672]	; (8001f48 <HAL_RCC_OscConfig+0x358>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	4ba6      	ldr	r3, [pc, #664]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	025b      	lsls	r3, r3, #9
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4ba2      	ldr	r3, [pc, #648]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4ba1      	ldr	r3, [pc, #644]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001cbe:	49a3      	ldr	r1, [pc, #652]	; (8001f4c <HAL_RCC_OscConfig+0x35c>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d015      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f8c8 	bl	8000e60 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cd4:	e009      	b.n	8001cea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd6:	f7ff f8c3 	bl	8000e60 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b64      	cmp	r3, #100	; 0x64
 8001ce2:	d902      	bls.n	8001cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f000 fb3c 	bl	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cea:	4b96      	ldr	r3, [pc, #600]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	029b      	lsls	r3, r3, #10
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d0ef      	beq.n	8001cd6 <HAL_RCC_OscConfig+0xe6>
 8001cf6:	e015      	b.n	8001d24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f8b2 	bl	8000e60 <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d02:	f7ff f8ad 	bl	8000e60 <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b64      	cmp	r3, #100	; 0x64
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e326      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d14:	4b8b      	ldr	r3, [pc, #556]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x112>
 8001d20:	e000      	b.n	8001d24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d100      	bne.n	8001d30 <HAL_RCC_OscConfig+0x140>
 8001d2e:	e08b      	b.n	8001e48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d13e      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1d0>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d13b      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d48:	4b7e      	ldr	r3, [pc, #504]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_RCC_OscConfig+0x16c>
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e302      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b79      	ldr	r3, [pc, #484]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a7b      	ldr	r2, [pc, #492]	; (8001f50 <HAL_RCC_OscConfig+0x360>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	021a      	lsls	r2, r3, #8
 8001d6c:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d72:	4b74      	ldr	r3, [pc, #464]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2209      	movs	r2, #9
 8001d78:	4393      	bics	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	4b71      	ldr	r3, [pc, #452]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d84:	f000 fc40 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8001d88:	0001      	movs	r1, r0
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	220f      	movs	r2, #15
 8001d92:	4013      	ands	r3, r2
 8001d94:	4a6f      	ldr	r2, [pc, #444]	; (8001f54 <HAL_RCC_OscConfig+0x364>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	000a      	movs	r2, r1
 8001d9a:	40da      	lsrs	r2, r3
 8001d9c:	4b6e      	ldr	r3, [pc, #440]	; (8001f58 <HAL_RCC_OscConfig+0x368>)
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001da0:	4b6e      	ldr	r3, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x36c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2513      	movs	r5, #19
 8001da6:	197c      	adds	r4, r7, r5
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff f813 	bl	8000dd4 <HAL_InitTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001db2:	197b      	adds	r3, r7, r5
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d046      	beq.n	8001e48 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001dba:	197b      	adds	r3, r7, r5
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	e2d0      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d027      	beq.n	8001e16 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dc6:	4b5f      	ldr	r3, [pc, #380]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2209      	movs	r2, #9
 8001dcc:	4393      	bics	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	4b5c      	ldr	r3, [pc, #368]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f842 	bl	8000e60 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff f83d 	bl	8000e60 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e2b6      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d0f1      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b51      	ldr	r3, [pc, #324]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a53      	ldr	r2, [pc, #332]	; (8001f50 <HAL_RCC_OscConfig+0x360>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	021a      	lsls	r2, r3, #8
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	e018      	b.n	8001e48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	438a      	bics	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff f81d 	bl	8000e60 <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7ff f818 	bl	8000e60 <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e291      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2204      	movs	r2, #4
 8001e44:	4013      	ands	r3, r2
 8001e46:	d1f1      	bne.n	8001e2c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d100      	bne.n	8001e54 <HAL_RCC_OscConfig+0x264>
 8001e52:	e0a1      	b.n	8001f98 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d140      	bne.n	8001edc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x282>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e277      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e72:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <HAL_RCC_OscConfig+0x370>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e80:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e86:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	0a19      	lsrs	r1, r3, #8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	061a      	lsls	r2, r3, #24
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	0b5b      	lsrs	r3, r3, #13
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	0212      	lsls	r2, r2, #8
 8001ea6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ea8:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	210f      	movs	r1, #15
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	4928      	ldr	r1, [pc, #160]	; (8001f54 <HAL_RCC_OscConfig+0x364>)
 8001eb4:	5ccb      	ldrb	r3, [r1, r3]
 8001eb6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x368>)
 8001eba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ebc:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <HAL_RCC_OscConfig+0x36c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2513      	movs	r5, #19
 8001ec2:	197c      	adds	r4, r7, r5
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7fe ff85 	bl	8000dd4 <HAL_InitTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ece:	197b      	adds	r3, r7, r5
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d060      	beq.n	8001f98 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001ed6:	197b      	adds	r3, r7, r5
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	e242      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d03f      	beq.n	8001f64 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	0049      	lsls	r1, r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7fe ffb5 	bl	8000e60 <HAL_GetTick>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efc:	f7fe ffb0 	bl	8000e60 <HAL_GetTick>
 8001f00:	0002      	movs	r2, r0
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e229      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_RCC_OscConfig+0x370>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	0a19      	lsrs	r1, r3, #8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	061a      	lsls	r2, r3, #24
 8001f3c:	4b01      	ldr	r3, [pc, #4]	; (8001f44 <HAL_RCC_OscConfig+0x354>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	e029      	b.n	8001f98 <HAL_RCC_OscConfig+0x3a8>
 8001f44:	40021000 	.word	0x40021000
 8001f48:	fffeffff 	.word	0xfffeffff
 8001f4c:	fffbffff 	.word	0xfffbffff
 8001f50:	ffffe0ff 	.word	0xffffe0ff
 8001f54:	08003b9c 	.word	0x08003b9c
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f64:	4bbd      	ldr	r3, [pc, #756]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4bbc      	ldr	r3, [pc, #752]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8001f6a:	49bd      	ldr	r1, [pc, #756]	; (8002260 <HAL_RCC_OscConfig+0x670>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7fe ff76 	bl	8000e60 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f7a:	f7fe ff71 	bl	8000e60 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1ea      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f8c:	4bb3      	ldr	r3, [pc, #716]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d036      	beq.n	8002010 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d019      	beq.n	8001fde <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4bac      	ldr	r3, [pc, #688]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8001fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fae:	4bab      	ldr	r3, [pc, #684]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe ff53 	bl	8000e60 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7fe ff4e 	bl	8000e60 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1c7      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fd2:	4ba2      	ldr	r3, [pc, #648]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d0f1      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x3d0>
 8001fdc:	e018      	b.n	8002010 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fde:	4b9f      	ldr	r3, [pc, #636]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8001fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe2:	4b9e      	ldr	r3, [pc, #632]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe ff39 	bl	8000e60 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7fe ff34 	bl	8000e60 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1ad      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002006:	4b95      	ldr	r3, [pc, #596]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d1f1      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2204      	movs	r2, #4
 8002016:	4013      	ands	r3, r2
 8002018:	d100      	bne.n	800201c <HAL_RCC_OscConfig+0x42c>
 800201a:	e0ae      	b.n	800217a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201c:	2027      	movs	r0, #39	; 0x27
 800201e:	183b      	adds	r3, r7, r0
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002024:	4b8d      	ldr	r3, [pc, #564]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	055b      	lsls	r3, r3, #21
 800202c:	4013      	ands	r3, r2
 800202e:	d109      	bne.n	8002044 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b8a      	ldr	r3, [pc, #552]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002034:	4b89      	ldr	r3, [pc, #548]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0549      	lsls	r1, r1, #21
 800203a:	430a      	orrs	r2, r1
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800203e:	183b      	adds	r3, r7, r0
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4b87      	ldr	r3, [pc, #540]	; (8002264 <HAL_RCC_OscConfig+0x674>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4013      	ands	r3, r2
 800204e:	d11a      	bne.n	8002086 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002050:	4b84      	ldr	r3, [pc, #528]	; (8002264 <HAL_RCC_OscConfig+0x674>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b83      	ldr	r3, [pc, #524]	; (8002264 <HAL_RCC_OscConfig+0x674>)
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	0049      	lsls	r1, r1, #1
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7fe feff 	bl	8000e60 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002068:	f7fe fefa 	bl	8000e60 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e173      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b7a      	ldr	r3, [pc, #488]	; (8002264 <HAL_RCC_OscConfig+0x674>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4013      	ands	r3, r2
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	429a      	cmp	r2, r3
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_OscConfig+0x4b2>
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002096:	4b71      	ldr	r3, [pc, #452]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	0049      	lsls	r1, r1, #1
 800209c:	430a      	orrs	r2, r1
 800209e:	651a      	str	r2, [r3, #80]	; 0x50
 80020a0:	e031      	b.n	8002106 <HAL_RCC_OscConfig+0x516>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4d4>
 80020aa:	4b6c      	ldr	r3, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ae:	4b6b      	ldr	r3, [pc, #428]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020b0:	496b      	ldr	r1, [pc, #428]	; (8002260 <HAL_RCC_OscConfig+0x670>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	651a      	str	r2, [r3, #80]	; 0x50
 80020b6:	4b69      	ldr	r3, [pc, #420]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ba:	4b68      	ldr	r3, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020bc:	496a      	ldr	r1, [pc, #424]	; (8002268 <HAL_RCC_OscConfig+0x678>)
 80020be:	400a      	ands	r2, r1
 80020c0:	651a      	str	r2, [r3, #80]	; 0x50
 80020c2:	e020      	b.n	8002106 <HAL_RCC_OscConfig+0x516>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	23a0      	movs	r3, #160	; 0xa0
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d10e      	bne.n	80020ee <HAL_RCC_OscConfig+0x4fe>
 80020d0:	4b62      	ldr	r3, [pc, #392]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d4:	4b61      	ldr	r3, [pc, #388]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	00c9      	lsls	r1, r1, #3
 80020da:	430a      	orrs	r2, r1
 80020dc:	651a      	str	r2, [r3, #80]	; 0x50
 80020de:	4b5f      	ldr	r3, [pc, #380]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e2:	4b5e      	ldr	r3, [pc, #376]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0049      	lsls	r1, r1, #1
 80020e8:	430a      	orrs	r2, r1
 80020ea:	651a      	str	r2, [r3, #80]	; 0x50
 80020ec:	e00b      	b.n	8002106 <HAL_RCC_OscConfig+0x516>
 80020ee:	4b5b      	ldr	r3, [pc, #364]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f2:	4b5a      	ldr	r3, [pc, #360]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020f4:	495a      	ldr	r1, [pc, #360]	; (8002260 <HAL_RCC_OscConfig+0x670>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	651a      	str	r2, [r3, #80]	; 0x50
 80020fa:	4b58      	ldr	r3, [pc, #352]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80020fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020fe:	4b57      	ldr	r3, [pc, #348]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002100:	4959      	ldr	r1, [pc, #356]	; (8002268 <HAL_RCC_OscConfig+0x678>)
 8002102:	400a      	ands	r2, r1
 8002104:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d015      	beq.n	800213a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7fe fea7 	bl	8000e60 <HAL_GetTick>
 8002112:	0003      	movs	r3, r0
 8002114:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002116:	e009      	b.n	800212c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe fea2 	bl	8000e60 <HAL_GetTick>
 800211c:	0002      	movs	r2, r0
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	4a52      	ldr	r2, [pc, #328]	; (800226c <HAL_RCC_OscConfig+0x67c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e11a      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800212c:	4b4b      	ldr	r3, [pc, #300]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 800212e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4013      	ands	r3, r2
 8002136:	d0ef      	beq.n	8002118 <HAL_RCC_OscConfig+0x528>
 8002138:	e014      	b.n	8002164 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe fe91 	bl	8000e60 <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002142:	e009      	b.n	8002158 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe fe8c 	bl	8000e60 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	4a47      	ldr	r2, [pc, #284]	; (800226c <HAL_RCC_OscConfig+0x67c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e104      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002158:	4b40      	ldr	r3, [pc, #256]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 800215a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4013      	ands	r3, r2
 8002162:	d1ef      	bne.n	8002144 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002164:	2327      	movs	r3, #39	; 0x27
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002172:	4b3a      	ldr	r3, [pc, #232]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002174:	493e      	ldr	r1, [pc, #248]	; (8002270 <HAL_RCC_OscConfig+0x680>)
 8002176:	400a      	ands	r2, r1
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2220      	movs	r2, #32
 8002180:	4013      	ands	r3, r2
 8002182:	d049      	beq.n	8002218 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d026      	beq.n	80021da <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4b32      	ldr	r3, [pc, #200]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002192:	2101      	movs	r1, #1
 8002194:	430a      	orrs	r2, r1
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 800219a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219c:	4b2f      	ldr	r3, [pc, #188]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 800219e:	2101      	movs	r1, #1
 80021a0:	430a      	orrs	r2, r1
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
 80021a4:	4b33      	ldr	r3, [pc, #204]	; (8002274 <HAL_RCC_OscConfig+0x684>)
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	4b32      	ldr	r3, [pc, #200]	; (8002274 <HAL_RCC_OscConfig+0x684>)
 80021aa:	2180      	movs	r1, #128	; 0x80
 80021ac:	0189      	lsls	r1, r1, #6
 80021ae:	430a      	orrs	r2, r1
 80021b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fe55 	bl	8000e60 <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021bc:	f7fe fe50 	bl	8000e60 <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0c9      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2202      	movs	r2, #2
 80021d4:	4013      	ands	r3, r2
 80021d6:	d0f1      	beq.n	80021bc <HAL_RCC_OscConfig+0x5cc>
 80021d8:	e01e      	b.n	8002218 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	438a      	bics	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_RCC_OscConfig+0x684>)
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCC_OscConfig+0x684>)
 80021ec:	4922      	ldr	r1, [pc, #136]	; (8002278 <HAL_RCC_OscConfig+0x688>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe fe35 	bl	8000e60 <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021fc:	f7fe fe30 	bl	8000e60 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0a9      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2202      	movs	r2, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d1f1      	bne.n	80021fc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x632>
 8002220:	e09e      	b.n	8002360 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d100      	bne.n	800222a <HAL_RCC_OscConfig+0x63a>
 8002228:	e077      	b.n	800231a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	2b02      	cmp	r3, #2
 8002230:	d158      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_RCC_OscConfig+0x66c>)
 8002238:	4910      	ldr	r1, [pc, #64]	; (800227c <HAL_RCC_OscConfig+0x68c>)
 800223a:	400a      	ands	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fe0f 	bl	8000e60 <HAL_GetTick>
 8002242:	0003      	movs	r3, r0
 8002244:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7fe fe0a 	bl	8000e60 <HAL_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d914      	bls.n	8002280 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e083      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	40021000 	.word	0x40021000
 8002260:	fffffeff 	.word	0xfffffeff
 8002264:	40007000 	.word	0x40007000
 8002268:	fffffbff 	.word	0xfffffbff
 800226c:	00001388 	.word	0x00001388
 8002270:	efffffff 	.word	0xefffffff
 8002274:	40010000 	.word	0x40010000
 8002278:	ffffdfff 	.word	0xffffdfff
 800227c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002280:	4b3a      	ldr	r3, [pc, #232]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	049b      	lsls	r3, r3, #18
 8002288:	4013      	ands	r3, r2
 800228a:	d1dd      	bne.n	8002248 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228c:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a37      	ldr	r2, [pc, #220]	; (8002370 <HAL_RCC_OscConfig+0x780>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	431a      	orrs	r2, r3
 80022a6:	4b31      	ldr	r3, [pc, #196]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 80022a8:	430a      	orrs	r2, r1
 80022aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	0449      	lsls	r1, r1, #17
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fdd1 	bl	8000e60 <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fdcc 	bl	8000e60 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e045      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022d6:	4b25      	ldr	r3, [pc, #148]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	049b      	lsls	r3, r3, #18
 80022de:	4013      	ands	r3, r2
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x6d4>
 80022e2:	e03d      	b.n	8002360 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 80022ea:	4922      	ldr	r1, [pc, #136]	; (8002374 <HAL_RCC_OscConfig+0x784>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe fdb6 	bl	8000e60 <HAL_GetTick>
 80022f4:	0003      	movs	r3, r0
 80022f6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe fdb1 	bl	8000e60 <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e02a      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	049b      	lsls	r3, r3, #18
 8002314:	4013      	ands	r3, r2
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0x70a>
 8002318:	e022      	b.n	8002360 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e01d      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_OscConfig+0x77c>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	025b      	lsls	r3, r3, #9
 8002332:	401a      	ands	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	429a      	cmp	r2, r3
 800233a:	d10f      	bne.n	800235c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	23f0      	movs	r3, #240	; 0xf0
 8002340:	039b      	lsls	r3, r3, #14
 8002342:	401a      	ands	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	23c0      	movs	r3, #192	; 0xc0
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	401a      	ands	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b00a      	add	sp, #40	; 0x28
 8002368:	bdb0      	pop	{r4, r5, r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	40021000 	.word	0x40021000
 8002370:	ff02ffff 	.word	0xff02ffff
 8002374:	feffffff 	.word	0xfeffffff

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e128      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b96      	ldr	r3, [pc, #600]	; (80025e8 <HAL_RCC_ClockConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d91e      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b93      	ldr	r3, [pc, #588]	; (80025e8 <HAL_RCC_ClockConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2201      	movs	r2, #1
 80023a0:	4393      	bics	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	4b90      	ldr	r3, [pc, #576]	; (80025e8 <HAL_RCC_ClockConfig+0x270>)
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fd58 	bl	8000e60 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b4:	e009      	b.n	80023ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b6:	f7fe fd53 	bl	8000e60 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	4a8a      	ldr	r2, [pc, #552]	; (80025ec <HAL_RCC_ClockConfig+0x274>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e109      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b87      	ldr	r3, [pc, #540]	; (80025e8 <HAL_RCC_ClockConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4013      	ands	r3, r2
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1ee      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2202      	movs	r2, #2
 80023de:	4013      	ands	r3, r2
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e2:	4b83      	ldr	r3, [pc, #524]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	22f0      	movs	r2, #240	; 0xf0
 80023e8:	4393      	bics	r3, r2
 80023ea:	0019      	movs	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 80023f2:	430a      	orrs	r2, r1
 80023f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2201      	movs	r2, #1
 80023fc:	4013      	ands	r3, r2
 80023fe:	d100      	bne.n	8002402 <HAL_RCC_ClockConfig+0x8a>
 8002400:	e089      	b.n	8002516 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800240a:	4b79      	ldr	r3, [pc, #484]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	029b      	lsls	r3, r3, #10
 8002412:	4013      	ands	r3, r2
 8002414:	d120      	bne.n	8002458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0e1      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002422:	4b73      	ldr	r3, [pc, #460]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	049b      	lsls	r3, r3, #18
 800242a:	4013      	ands	r3, r2
 800242c:	d114      	bne.n	8002458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0d5      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d106      	bne.n	8002448 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800243a:	4b6d      	ldr	r3, [pc, #436]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2204      	movs	r2, #4
 8002440:	4013      	ands	r3, r2
 8002442:	d109      	bne.n	8002458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0ca      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002448:	4b69      	ldr	r3, [pc, #420]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4013      	ands	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0c2      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002458:	4b65      	ldr	r3, [pc, #404]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2203      	movs	r2, #3
 800245e:	4393      	bics	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4b62      	ldr	r3, [pc, #392]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 8002468:	430a      	orrs	r2, r1
 800246a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7fe fcf8 	bl	8000e60 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d111      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800247c:	e009      	b.n	8002492 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f7fe fcef 	bl	8000e60 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	4a58      	ldr	r2, [pc, #352]	; (80025ec <HAL_RCC_ClockConfig+0x274>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e0a5      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002492:	4b57      	ldr	r3, [pc, #348]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	220c      	movs	r2, #12
 8002498:	4013      	ands	r3, r2
 800249a:	2b08      	cmp	r3, #8
 800249c:	d1ef      	bne.n	800247e <HAL_RCC_ClockConfig+0x106>
 800249e:	e03a      	b.n	8002516 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d111      	bne.n	80024cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a8:	e009      	b.n	80024be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024aa:	f7fe fcd9 	bl	8000e60 <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	4a4d      	ldr	r2, [pc, #308]	; (80025ec <HAL_RCC_ClockConfig+0x274>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e08f      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024be:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	220c      	movs	r2, #12
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d1ef      	bne.n	80024aa <HAL_RCC_ClockConfig+0x132>
 80024ca:	e024      	b.n	8002516 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d11b      	bne.n	800250c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d4:	e009      	b.n	80024ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d6:	f7fe fcc3 	bl	8000e60 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	4a42      	ldr	r2, [pc, #264]	; (80025ec <HAL_RCC_ClockConfig+0x274>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e079      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	220c      	movs	r2, #12
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d1ef      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x15e>
 80024f6:	e00e      	b.n	8002516 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f7fe fcb2 	bl	8000e60 <HAL_GetTick>
 80024fc:	0002      	movs	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	4a3a      	ldr	r2, [pc, #232]	; (80025ec <HAL_RCC_ClockConfig+0x274>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e068      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	220c      	movs	r2, #12
 8002512:	4013      	ands	r3, r2
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002516:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_RCC_ClockConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d21e      	bcs.n	8002562 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <HAL_RCC_ClockConfig+0x270>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2201      	movs	r2, #1
 800252a:	4393      	bics	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_RCC_ClockConfig+0x270>)
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002536:	f7fe fc93 	bl	8000e60 <HAL_GetTick>
 800253a:	0003      	movs	r3, r0
 800253c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	e009      	b.n	8002554 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002540:	f7fe fc8e 	bl	8000e60 <HAL_GetTick>
 8002544:	0002      	movs	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	4a28      	ldr	r2, [pc, #160]	; (80025ec <HAL_RCC_ClockConfig+0x274>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e044      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_RCC_ClockConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2201      	movs	r2, #1
 800255a:	4013      	ands	r3, r2
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d1ee      	bne.n	8002540 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2204      	movs	r2, #4
 8002568:	4013      	ands	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <HAL_RCC_ClockConfig+0x27c>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800257c:	430a      	orrs	r2, r1
 800257e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2208      	movs	r2, #8
 8002586:	4013      	ands	r3, r2
 8002588:	d00a      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_RCC_ClockConfig+0x280>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00da      	lsls	r2, r3, #3
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a0:	f000 f832 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80025a4:	0001      	movs	r1, r0
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x278>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	220f      	movs	r2, #15
 80025ae:	4013      	ands	r3, r2
 80025b0:	4a12      	ldr	r2, [pc, #72]	; (80025fc <HAL_RCC_ClockConfig+0x284>)
 80025b2:	5cd3      	ldrb	r3, [r2, r3]
 80025b4:	000a      	movs	r2, r1
 80025b6:	40da      	lsrs	r2, r3
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_ClockConfig+0x288>)
 80025ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_ClockConfig+0x28c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	250b      	movs	r5, #11
 80025c2:	197c      	adds	r4, r7, r5
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7fe fc05 	bl	8000dd4 <HAL_InitTick>
 80025ca:	0003      	movs	r3, r0
 80025cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80025ce:	197b      	adds	r3, r7, r5
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80025d6:	197b      	adds	r3, r7, r5
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	e000      	b.n	80025de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bdb0      	pop	{r4, r5, r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	40022000 	.word	0x40022000
 80025ec:	00001388 	.word	0x00001388
 80025f0:	40021000 	.word	0x40021000
 80025f4:	fffff8ff 	.word	0xfffff8ff
 80025f8:	ffffc7ff 	.word	0xffffc7ff
 80025fc:	08003b9c 	.word	0x08003b9c
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004

08002608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b08e      	sub	sp, #56	; 0x38
 800260c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_GetSysClockFreq+0x138>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002616:	230c      	movs	r3, #12
 8002618:	4013      	ands	r3, r2
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d014      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x40>
 800261e:	d900      	bls.n	8002622 <HAL_RCC_GetSysClockFreq+0x1a>
 8002620:	e07b      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x112>
 8002622:	2b04      	cmp	r3, #4
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x24>
 8002626:	2b08      	cmp	r3, #8
 8002628:	d00b      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x3a>
 800262a:	e076      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800262c:	4b44      	ldr	r3, [pc, #272]	; (8002740 <HAL_RCC_GetSysClockFreq+0x138>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2210      	movs	r2, #16
 8002632:	4013      	ands	r3, r2
 8002634:	d002      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002636:	4b43      	ldr	r3, [pc, #268]	; (8002744 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800263a:	e07c      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800263c:	4b42      	ldr	r3, [pc, #264]	; (8002748 <HAL_RCC_GetSysClockFreq+0x140>)
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002640:	e079      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002642:	4b42      	ldr	r3, [pc, #264]	; (800274c <HAL_RCC_GetSysClockFreq+0x144>)
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002646:	e076      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	0c9a      	lsrs	r2, r3, #18
 800264c:	230f      	movs	r3, #15
 800264e:	401a      	ands	r2, r3
 8002650:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <HAL_RCC_GetSysClockFreq+0x148>)
 8002652:	5c9b      	ldrb	r3, [r3, r2]
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	0d9a      	lsrs	r2, r3, #22
 800265a:	2303      	movs	r3, #3
 800265c:	4013      	ands	r3, r2
 800265e:	3301      	adds	r3, #1
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCC_GetSysClockFreq+0x138>)
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	025b      	lsls	r3, r3, #9
 800266a:	4013      	ands	r3, r2
 800266c:	d01a      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	4a35      	ldr	r2, [pc, #212]	; (800274c <HAL_RCC_GetSysClockFreq+0x144>)
 8002678:	2300      	movs	r3, #0
 800267a:	69b8      	ldr	r0, [r7, #24]
 800267c:	69f9      	ldr	r1, [r7, #28]
 800267e:	f7fd fdf9 	bl	8000274 <__aeabi_lmul>
 8002682:	0002      	movs	r2, r0
 8002684:	000b      	movs	r3, r1
 8002686:	0010      	movs	r0, r2
 8002688:	0019      	movs	r1, r3
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f7fd fdcd 	bl	8000234 <__aeabi_uldivmod>
 800269a:	0002      	movs	r2, r0
 800269c:	000b      	movs	r3, r1
 800269e:	0013      	movs	r3, r2
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
 80026a2:	e037      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026a4:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_RCC_GetSysClockFreq+0x138>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2210      	movs	r2, #16
 80026aa:	4013      	ands	r3, r2
 80026ac:	d01a      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026b8:	2300      	movs	r3, #0
 80026ba:	68b8      	ldr	r0, [r7, #8]
 80026bc:	68f9      	ldr	r1, [r7, #12]
 80026be:	f7fd fdd9 	bl	8000274 <__aeabi_lmul>
 80026c2:	0002      	movs	r2, r0
 80026c4:	000b      	movs	r3, r1
 80026c6:	0010      	movs	r0, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f7fd fdad 	bl	8000234 <__aeabi_uldivmod>
 80026da:	0002      	movs	r2, r0
 80026dc:	000b      	movs	r3, r1
 80026de:	0013      	movs	r3, r2
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	e017      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	0018      	movs	r0, r3
 80026e8:	2300      	movs	r3, #0
 80026ea:	0019      	movs	r1, r3
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_RCC_GetSysClockFreq+0x140>)
 80026ee:	2300      	movs	r3, #0
 80026f0:	f7fd fdc0 	bl	8000274 <__aeabi_lmul>
 80026f4:	0002      	movs	r2, r0
 80026f6:	000b      	movs	r3, r1
 80026f8:	0010      	movs	r0, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	001c      	movs	r4, r3
 8002700:	2300      	movs	r3, #0
 8002702:	001d      	movs	r5, r3
 8002704:	0022      	movs	r2, r4
 8002706:	002b      	movs	r3, r5
 8002708:	f7fd fd94 	bl	8000234 <__aeabi_uldivmod>
 800270c:	0002      	movs	r2, r0
 800270e:	000b      	movs	r3, r1
 8002710:	0013      	movs	r3, r2
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002718:	e00d      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_GetSysClockFreq+0x138>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0b5b      	lsrs	r3, r3, #13
 8002720:	2207      	movs	r2, #7
 8002722:	4013      	ands	r3, r2
 8002724:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	3301      	adds	r3, #1
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	0212      	lsls	r2, r2, #8
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002734:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b00e      	add	sp, #56	; 0x38
 800273e:	bdb0      	pop	{r4, r5, r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	003d0900 	.word	0x003d0900
 8002748:	00f42400 	.word	0x00f42400
 800274c:	007a1200 	.word	0x007a1200
 8002750:	08003bac 	.word	0x08003bac

08002754 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800275c:	2017      	movs	r0, #23
 800275e:	183b      	adds	r3, r7, r0
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2220      	movs	r2, #32
 800276a:	4013      	ands	r3, r2
 800276c:	d100      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800276e:	e0c2      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002770:	4b90      	ldr	r3, [pc, #576]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	055b      	lsls	r3, r3, #21
 8002778:	4013      	ands	r3, r2
 800277a:	d109      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b8d      	ldr	r3, [pc, #564]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002780:	4b8c      	ldr	r3, [pc, #560]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	0549      	lsls	r1, r1, #21
 8002786:	430a      	orrs	r2, r1
 8002788:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800278a:	183b      	adds	r3, r7, r0
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b89      	ldr	r3, [pc, #548]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4013      	ands	r3, r2
 800279a:	d11a      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279c:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b85      	ldr	r3, [pc, #532]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	0049      	lsls	r1, r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7fe fb59 	bl	8000e60 <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	e008      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b4:	f7fe fb54 	bl	8000e60 <HAL_GetTick>
 80027b8:	0002      	movs	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0f2      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b7c      	ldr	r3, [pc, #496]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80027d2:	4b78      	ldr	r3, [pc, #480]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	23c0      	movs	r3, #192	; 0xc0
 80027d8:	039b      	lsls	r3, r3, #14
 80027da:	4013      	ands	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	23c0      	movs	r3, #192	; 0xc0
 80027e4:	039b      	lsls	r3, r3, #14
 80027e6:	4013      	ands	r3, r2
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d013      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	029b      	lsls	r3, r3, #10
 80027f6:	401a      	ands	r2, r3
 80027f8:	23c0      	movs	r3, #192	; 0xc0
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d10a      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002800:	4b6c      	ldr	r3, [pc, #432]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	401a      	ands	r2, r3
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	429a      	cmp	r2, r3
 8002810:	d101      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0ca      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002816:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800281a:	23c0      	movs	r3, #192	; 0xc0
 800281c:	029b      	lsls	r3, r3, #10
 800281e:	4013      	ands	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03b      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	23c0      	movs	r3, #192	; 0xc0
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	4013      	ands	r3, r2
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	429a      	cmp	r2, r3
 8002836:	d033      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2220      	movs	r2, #32
 800283e:	4013      	ands	r3, r2
 8002840:	d02e      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002842:	4b5c      	ldr	r3, [pc, #368]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002846:	4a5d      	ldr	r2, [pc, #372]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800284c:	4b59      	ldr	r3, [pc, #356]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002850:	4b58      	ldr	r3, [pc, #352]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0309      	lsls	r1, r1, #12
 8002856:	430a      	orrs	r2, r1
 8002858:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800285e:	4b55      	ldr	r3, [pc, #340]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002860:	4957      	ldr	r1, [pc, #348]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002862:	400a      	ands	r2, r1
 8002864:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002866:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4013      	ands	r3, r2
 8002874:	d014      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe faf3 	bl	8000e60 <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800287e:	e009      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe faee 	bl	8000e60 <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	4a4e      	ldr	r2, [pc, #312]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e08b      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002894:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4013      	ands	r3, r2
 800289e:	d0ef      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	401a      	ands	r2, r3
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d10c      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80028b2:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a44      	ldr	r2, [pc, #272]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	23c0      	movs	r3, #192	; 0xc0
 80028c2:	039b      	lsls	r3, r3, #14
 80028c4:	401a      	ands	r2, r3
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	23c0      	movs	r3, #192	; 0xc0
 80028d6:	029b      	lsls	r3, r3, #10
 80028d8:	401a      	ands	r2, r3
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028e0:	2317      	movs	r3, #23
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ee:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	4936      	ldr	r1, [pc, #216]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4013      	ands	r3, r2
 80028fe:	d009      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002900:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	2203      	movs	r2, #3
 8002906:	4393      	bics	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002910:	430a      	orrs	r2, r1
 8002912:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291e:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	220c      	movs	r2, #12
 8002924:	4393      	bics	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	430a      	orrs	r2, r1
 8002930:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2204      	movs	r2, #4
 8002938:	4013      	ands	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002940:	4a23      	ldr	r2, [pc, #140]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002942:	4013      	ands	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294c:	430a      	orrs	r2, r1
 800294e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2208      	movs	r2, #8
 8002956:	4013      	ands	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	430a      	orrs	r2, r1
 800296c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2240      	movs	r2, #64	; 0x40
 8002974:	4013      	ands	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297c:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002988:	430a      	orrs	r2, r1
 800298a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	4013      	ands	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800299c:	4013      	ands	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b006      	add	sp, #24
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
 80029bc:	fffcffff 	.word	0xfffcffff
 80029c0:	fff7ffff 	.word	0xfff7ffff
 80029c4:	00001388 	.word	0x00001388
 80029c8:	ffcfffff 	.word	0xffcfffff
 80029cc:	efffffff 	.word	0xefffffff
 80029d0:	fffff3ff 	.word	0xfffff3ff
 80029d4:	ffffcfff 	.word	0xffffcfff
 80029d8:	fbffffff 	.word	0xfbffffff
 80029dc:	fff3ffff 	.word	0xfff3ffff

080029e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e08e      	b.n	8002b10 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2221      	movs	r2, #33	; 0x21
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fe f92d 	bl	8000c68 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2221      	movs	r2, #33	; 0x21
 8002a12:	2102      	movs	r1, #2
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	22ca      	movs	r2, #202	; 0xca
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2253      	movs	r2, #83	; 0x53
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 faba 	bl	8002fa2 <RTC_EnterInitMode>
 8002a2e:	1e03      	subs	r3, r0, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2221      	movs	r2, #33	; 0x21
 8002a3e:	2104      	movs	r1, #4
 8002a40:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e064      	b.n	8002b10 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4931      	ldr	r1, [pc, #196]	; (8002b18 <HAL_RTC_Init+0x138>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68d2      	ldr	r2, [r2, #12]
 8002a7c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6919      	ldr	r1, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	438a      	bics	r2, r1
 8002aa0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2103      	movs	r1, #3
 8002aae:	438a      	bics	r2, r1
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d113      	bne.n	8002afe <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 fa3b 	bl	8002f54 <HAL_RTC_WaitForSynchro>
 8002ade:	1e03      	subs	r3, r0, #0
 8002ae0:	d00d      	beq.n	8002afe <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	22ff      	movs	r2, #255	; 0xff
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2221      	movs	r2, #33	; 0x21
 8002aee:	2104      	movs	r1, #4
 8002af0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	2100      	movs	r1, #0
 8002af8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e008      	b.n	8002b10 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	22ff      	movs	r2, #255	; 0xff
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2221      	movs	r2, #33	; 0x21
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
  }
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	ff8fffbf 	.word	0xff8fffbf

08002b1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_RTC_SetTime+0x1a>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0ad      	b.n	8002c92 <HAL_RTC_SetTime+0x176>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2221      	movs	r2, #33	; 0x21
 8002b42:	2102      	movs	r1, #2
 8002b44:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d125      	bne.n	8002b98 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2240      	movs	r2, #64	; 0x40
 8002b54:	4013      	ands	r3, r2
 8002b56:	d102      	bne.n	8002b5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fa47 	bl	8002ff6 <RTC_ByteToBcd2>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 fa40 	bl	8002ff6 <RTC_ByteToBcd2>
 8002b76:	0003      	movs	r3, r0
 8002b78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b7a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	789b      	ldrb	r3, [r3, #2]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 fa38 	bl	8002ff6 <RTC_ByteToBcd2>
 8002b86:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b88:	0022      	movs	r2, r4
 8002b8a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	78db      	ldrb	r3, [r3, #3]
 8002b90:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	e017      	b.n	8002bc8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2240      	movs	r2, #64	; 0x40
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d102      	bne.n	8002baa <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	785b      	ldrb	r3, [r3, #1]
 8002bb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002bb6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002bbc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	78db      	ldrb	r3, [r3, #3]
 8002bc2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	22ca      	movs	r2, #202	; 0xca
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2253      	movs	r2, #83	; 0x53
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f9e1 	bl	8002fa2 <RTC_EnterInitMode>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d00d      	beq.n	8002c00 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	22ff      	movs	r2, #255	; 0xff
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2221      	movs	r2, #33	; 0x21
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e048      	b.n	8002c92 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4925      	ldr	r1, [pc, #148]	; (8002c9c <HAL_RTC_SetTime+0x180>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4922      	ldr	r1, [pc, #136]	; (8002ca0 <HAL_RTC_SetTime+0x184>)
 8002c18:	400a      	ands	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	438a      	bics	r2, r1
 8002c42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d113      	bne.n	8002c78 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 f97e 	bl	8002f54 <HAL_RTC_WaitForSynchro>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d00d      	beq.n	8002c78 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	22ff      	movs	r2, #255	; 0xff
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2221      	movs	r2, #33	; 0x21
 8002c68:	2104      	movs	r1, #4
 8002c6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	2100      	movs	r1, #0
 8002c72:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e00c      	b.n	8002c92 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	22ff      	movs	r2, #255	; 0xff
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2221      	movs	r2, #33	; 0x21
 8002c84:	2101      	movs	r1, #1
 8002c86:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
  }
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b007      	add	sp, #28
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	007f7f7f 	.word	0x007f7f7f
 8002ca0:	fffbffff 	.word	0xfffbffff

08002ca4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	045b      	lsls	r3, r3, #17
 8002cc2:	0c5a      	lsrs	r2, r3, #17
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_RTC_GetTime+0xb4>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	223f      	movs	r2, #63	; 0x3f
 8002cdc:	4013      	ands	r3, r2
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	227f      	movs	r2, #127	; 0x7f
 8002cec:	4013      	ands	r3, r2
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	227f      	movs	r2, #127	; 0x7f
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11a      	bne.n	8002d4e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 f992 	bl	8003046 <RTC_Bcd2ToByte>
 8002d22:	0003      	movs	r3, r0
 8002d24:	001a      	movs	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f989 	bl	8003046 <RTC_Bcd2ToByte>
 8002d34:	0003      	movs	r3, r0
 8002d36:	001a      	movs	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	789b      	ldrb	r3, [r3, #2]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 f980 	bl	8003046 <RTC_Bcd2ToByte>
 8002d46:	0003      	movs	r3, r0
 8002d48:	001a      	movs	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b006      	add	sp, #24
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	007f7f7f 	.word	0x007f7f7f

08002d5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	5c9b      	ldrb	r3, [r3, r2]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_RTC_SetDate+0x1a>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e099      	b.n	8002eaa <HAL_RTC_SetDate+0x14e>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2221      	movs	r2, #33	; 0x21
 8002d82:	2102      	movs	r1, #2
 8002d84:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10e      	bne.n	8002daa <HAL_RTC_SetDate+0x4e>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	001a      	movs	r2, r3
 8002d92:	2310      	movs	r3, #16
 8002d94:	4013      	ands	r3, r2
 8002d96:	d008      	beq.n	8002daa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4393      	bics	r3, r2
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	330a      	adds	r3, #10
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d11c      	bne.n	8002dea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	78db      	ldrb	r3, [r3, #3]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 f91e 	bl	8002ff6 <RTC_ByteToBcd2>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f917 	bl	8002ff6 <RTC_ByteToBcd2>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002dcc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	789b      	ldrb	r3, [r3, #2]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 f90f 	bl	8002ff6 <RTC_ByteToBcd2>
 8002dd8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002dda:	0022      	movs	r2, r4
 8002ddc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e00e      	b.n	8002e08 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	78db      	ldrb	r3, [r3, #3]
 8002dee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002df6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002dfc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	22ca      	movs	r2, #202	; 0xca
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2253      	movs	r2, #83	; 0x53
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 f8c1 	bl	8002fa2 <RTC_EnterInitMode>
 8002e20:	1e03      	subs	r3, r0, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	22ff      	movs	r2, #255	; 0xff
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2221      	movs	r2, #33	; 0x21
 8002e30:	2104      	movs	r1, #4
 8002e32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e034      	b.n	8002eaa <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	491b      	ldr	r1, [pc, #108]	; (8002eb4 <HAL_RTC_SetDate+0x158>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	438a      	bics	r2, r1
 8002e5a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2220      	movs	r2, #32
 8002e64:	4013      	ands	r3, r2
 8002e66:	d113      	bne.n	8002e90 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f872 	bl	8002f54 <HAL_RTC_WaitForSynchro>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d00d      	beq.n	8002e90 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	22ff      	movs	r2, #255	; 0xff
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2221      	movs	r2, #33	; 0x21
 8002e80:	2104      	movs	r1, #4
 8002e82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e00c      	b.n	8002eaa <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	22ff      	movs	r2, #255	; 0xff
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2221      	movs	r2, #33	; 0x21
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
  }
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b007      	add	sp, #28
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	00ffff3f 	.word	0x00ffff3f

08002eb8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4a21      	ldr	r2, [pc, #132]	; (8002f50 <HAL_RTC_GetDate+0x98>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	0c1b      	lsrs	r3, r3, #16
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	221f      	movs	r2, #31
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	223f      	movs	r2, #63	; 0x3f
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	0b5b      	lsrs	r3, r3, #13
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2207      	movs	r2, #7
 8002f00:	4013      	ands	r3, r2
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11a      	bne.n	8002f44 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	78db      	ldrb	r3, [r3, #3]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 f897 	bl	8003046 <RTC_Bcd2ToByte>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	001a      	movs	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f88e 	bl	8003046 <RTC_Bcd2ToByte>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	789b      	ldrb	r3, [r3, #2]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 f885 	bl	8003046 <RTC_Bcd2ToByte>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	001a      	movs	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b006      	add	sp, #24
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	00ffff3f 	.word	0x00ffff3f

08002f54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	21a0      	movs	r1, #160	; 0xa0
 8002f68:	438a      	bics	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002f6c:	f7fd ff78 	bl	8000e60 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f74:	e00a      	b.n	8002f8c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f76:	f7fd ff73 	bl	8000e60 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad2      	subs	r2, r2, r3
 8002f80:	23fa      	movs	r3, #250	; 0xfa
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d901      	bls.n	8002f8c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e006      	b.n	8002f9a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	4013      	ands	r3, r2
 8002f96:	d0ee      	beq.n	8002f76 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2240      	movs	r2, #64	; 0x40
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d11a      	bne.n	8002fec <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4252      	negs	r2, r2
 8002fbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002fc0:	f7fd ff4e 	bl	8000e60 <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002fc8:	e00a      	b.n	8002fe0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002fca:	f7fd ff49 	bl	8000e60 <HAL_GetTick>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad2      	subs	r2, r2, r3
 8002fd4:	23fa      	movs	r3, #250	; 0xfa
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d901      	bls.n	8002fe0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e006      	b.n	8002fee <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d0ee      	beq.n	8002fca <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b004      	add	sp, #16
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	1dfb      	adds	r3, r7, #7
 8003000:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003006:	230b      	movs	r3, #11
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	1dfa      	adds	r2, r7, #7
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8003010:	e008      	b.n	8003024 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003018:	220b      	movs	r2, #11
 800301a:	18bb      	adds	r3, r7, r2
 800301c:	18ba      	adds	r2, r7, r2
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	3a0a      	subs	r2, #10
 8003022:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8003024:	210b      	movs	r1, #11
 8003026:	187b      	adds	r3, r7, r1
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b09      	cmp	r3, #9
 800302c:	d8f1      	bhi.n	8003012 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	b2da      	uxtb	r2, r3
 8003036:	187b      	adds	r3, r7, r1
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	b2db      	uxtb	r3, r3
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b004      	add	sp, #16
 8003044:	bd80      	pop	{r7, pc}

08003046 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	0002      	movs	r2, r0
 800304e:	1dfb      	adds	r3, r7, #7
 8003050:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	b2db      	uxtb	r3, r3
 800305a:	001a      	movs	r2, r3
 800305c:	0013      	movs	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	189b      	adds	r3, r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	1dfb      	adds	r3, r7, #7
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	210f      	movs	r1, #15
 8003070:	400b      	ands	r3, r1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	18d3      	adds	r3, r2, r3
 8003076:	b2db      	uxtb	r3, r3
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b004      	add	sp, #16
 800307e:	bd80      	pop	{r7, pc}

08003080 <__errno>:
 8003080:	4b01      	ldr	r3, [pc, #4]	; (8003088 <__errno+0x8>)
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	4770      	bx	lr
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	2000000c 	.word	0x2000000c

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2600      	movs	r6, #0
 8003090:	4d0c      	ldr	r5, [pc, #48]	; (80030c4 <__libc_init_array+0x38>)
 8003092:	4c0d      	ldr	r4, [pc, #52]	; (80030c8 <__libc_init_array+0x3c>)
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	2600      	movs	r6, #0
 800309e:	f000 fc47 	bl	8003930 <_init>
 80030a2:	4d0a      	ldr	r5, [pc, #40]	; (80030cc <__libc_init_array+0x40>)
 80030a4:	4c0a      	ldr	r4, [pc, #40]	; (80030d0 <__libc_init_array+0x44>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	00b3      	lsls	r3, r6, #2
 80030b2:	58eb      	ldr	r3, [r5, r3]
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	00b3      	lsls	r3, r6, #2
 80030bc:	58eb      	ldr	r3, [r5, r3]
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	08003bf0 	.word	0x08003bf0
 80030c8:	08003bf0 	.word	0x08003bf0
 80030cc:	08003bf0 	.word	0x08003bf0
 80030d0:	08003bf4 	.word	0x08003bf4

080030d4 <memset>:
 80030d4:	0003      	movs	r3, r0
 80030d6:	1882      	adds	r2, r0, r2
 80030d8:	4293      	cmp	r3, r2
 80030da:	d100      	bne.n	80030de <memset+0xa>
 80030dc:	4770      	bx	lr
 80030de:	7019      	strb	r1, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	e7f9      	b.n	80030d8 <memset+0x4>

080030e4 <siprintf>:
 80030e4:	b40e      	push	{r1, r2, r3}
 80030e6:	b500      	push	{lr}
 80030e8:	490b      	ldr	r1, [pc, #44]	; (8003118 <siprintf+0x34>)
 80030ea:	b09c      	sub	sp, #112	; 0x70
 80030ec:	ab1d      	add	r3, sp, #116	; 0x74
 80030ee:	9002      	str	r0, [sp, #8]
 80030f0:	9006      	str	r0, [sp, #24]
 80030f2:	9107      	str	r1, [sp, #28]
 80030f4:	9104      	str	r1, [sp, #16]
 80030f6:	4809      	ldr	r0, [pc, #36]	; (800311c <siprintf+0x38>)
 80030f8:	4909      	ldr	r1, [pc, #36]	; (8003120 <siprintf+0x3c>)
 80030fa:	cb04      	ldmia	r3!, {r2}
 80030fc:	9105      	str	r1, [sp, #20]
 80030fe:	6800      	ldr	r0, [r0, #0]
 8003100:	a902      	add	r1, sp, #8
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	f000 f870 	bl	80031e8 <_svfiprintf_r>
 8003108:	2300      	movs	r3, #0
 800310a:	9a02      	ldr	r2, [sp, #8]
 800310c:	7013      	strb	r3, [r2, #0]
 800310e:	b01c      	add	sp, #112	; 0x70
 8003110:	bc08      	pop	{r3}
 8003112:	b003      	add	sp, #12
 8003114:	4718      	bx	r3
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	7fffffff 	.word	0x7fffffff
 800311c:	2000000c 	.word	0x2000000c
 8003120:	ffff0208 	.word	0xffff0208

08003124 <__ssputs_r>:
 8003124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003126:	688e      	ldr	r6, [r1, #8]
 8003128:	b085      	sub	sp, #20
 800312a:	0007      	movs	r7, r0
 800312c:	000c      	movs	r4, r1
 800312e:	9203      	str	r2, [sp, #12]
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	429e      	cmp	r6, r3
 8003134:	d83c      	bhi.n	80031b0 <__ssputs_r+0x8c>
 8003136:	2390      	movs	r3, #144	; 0x90
 8003138:	898a      	ldrh	r2, [r1, #12]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	421a      	tst	r2, r3
 800313e:	d034      	beq.n	80031aa <__ssputs_r+0x86>
 8003140:	2503      	movs	r5, #3
 8003142:	6909      	ldr	r1, [r1, #16]
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	1a5b      	subs	r3, r3, r1
 8003148:	9302      	str	r3, [sp, #8]
 800314a:	6963      	ldr	r3, [r4, #20]
 800314c:	9802      	ldr	r0, [sp, #8]
 800314e:	435d      	muls	r5, r3
 8003150:	0feb      	lsrs	r3, r5, #31
 8003152:	195d      	adds	r5, r3, r5
 8003154:	9b01      	ldr	r3, [sp, #4]
 8003156:	106d      	asrs	r5, r5, #1
 8003158:	3301      	adds	r3, #1
 800315a:	181b      	adds	r3, r3, r0
 800315c:	42ab      	cmp	r3, r5
 800315e:	d900      	bls.n	8003162 <__ssputs_r+0x3e>
 8003160:	001d      	movs	r5, r3
 8003162:	0553      	lsls	r3, r2, #21
 8003164:	d532      	bpl.n	80031cc <__ssputs_r+0xa8>
 8003166:	0029      	movs	r1, r5
 8003168:	0038      	movs	r0, r7
 800316a:	f000 fb31 	bl	80037d0 <_malloc_r>
 800316e:	1e06      	subs	r6, r0, #0
 8003170:	d109      	bne.n	8003186 <__ssputs_r+0x62>
 8003172:	230c      	movs	r3, #12
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	2340      	movs	r3, #64	; 0x40
 8003178:	2001      	movs	r0, #1
 800317a:	89a2      	ldrh	r2, [r4, #12]
 800317c:	4240      	negs	r0, r0
 800317e:	4313      	orrs	r3, r2
 8003180:	81a3      	strh	r3, [r4, #12]
 8003182:	b005      	add	sp, #20
 8003184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003186:	9a02      	ldr	r2, [sp, #8]
 8003188:	6921      	ldr	r1, [r4, #16]
 800318a:	f000 faba 	bl	8003702 <memcpy>
 800318e:	89a3      	ldrh	r3, [r4, #12]
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <__ssputs_r+0xc0>)
 8003192:	401a      	ands	r2, r3
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	4313      	orrs	r3, r2
 8003198:	81a3      	strh	r3, [r4, #12]
 800319a:	9b02      	ldr	r3, [sp, #8]
 800319c:	6126      	str	r6, [r4, #16]
 800319e:	18f6      	adds	r6, r6, r3
 80031a0:	6026      	str	r6, [r4, #0]
 80031a2:	6165      	str	r5, [r4, #20]
 80031a4:	9e01      	ldr	r6, [sp, #4]
 80031a6:	1aed      	subs	r5, r5, r3
 80031a8:	60a5      	str	r5, [r4, #8]
 80031aa:	9b01      	ldr	r3, [sp, #4]
 80031ac:	429e      	cmp	r6, r3
 80031ae:	d900      	bls.n	80031b2 <__ssputs_r+0x8e>
 80031b0:	9e01      	ldr	r6, [sp, #4]
 80031b2:	0032      	movs	r2, r6
 80031b4:	9903      	ldr	r1, [sp, #12]
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f000 faac 	bl	8003714 <memmove>
 80031bc:	68a3      	ldr	r3, [r4, #8]
 80031be:	2000      	movs	r0, #0
 80031c0:	1b9b      	subs	r3, r3, r6
 80031c2:	60a3      	str	r3, [r4, #8]
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	199e      	adds	r6, r3, r6
 80031c8:	6026      	str	r6, [r4, #0]
 80031ca:	e7da      	b.n	8003182 <__ssputs_r+0x5e>
 80031cc:	002a      	movs	r2, r5
 80031ce:	0038      	movs	r0, r7
 80031d0:	f000 fb5c 	bl	800388c <_realloc_r>
 80031d4:	1e06      	subs	r6, r0, #0
 80031d6:	d1e0      	bne.n	800319a <__ssputs_r+0x76>
 80031d8:	0038      	movs	r0, r7
 80031da:	6921      	ldr	r1, [r4, #16]
 80031dc:	f000 faae 	bl	800373c <_free_r>
 80031e0:	e7c7      	b.n	8003172 <__ssputs_r+0x4e>
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	fffffb7f 	.word	0xfffffb7f

080031e8 <_svfiprintf_r>:
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ea:	b0a1      	sub	sp, #132	; 0x84
 80031ec:	9003      	str	r0, [sp, #12]
 80031ee:	001d      	movs	r5, r3
 80031f0:	898b      	ldrh	r3, [r1, #12]
 80031f2:	000f      	movs	r7, r1
 80031f4:	0016      	movs	r6, r2
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	d511      	bpl.n	800321e <_svfiprintf_r+0x36>
 80031fa:	690b      	ldr	r3, [r1, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10e      	bne.n	800321e <_svfiprintf_r+0x36>
 8003200:	2140      	movs	r1, #64	; 0x40
 8003202:	f000 fae5 	bl	80037d0 <_malloc_r>
 8003206:	6038      	str	r0, [r7, #0]
 8003208:	6138      	str	r0, [r7, #16]
 800320a:	2800      	cmp	r0, #0
 800320c:	d105      	bne.n	800321a <_svfiprintf_r+0x32>
 800320e:	230c      	movs	r3, #12
 8003210:	9a03      	ldr	r2, [sp, #12]
 8003212:	3801      	subs	r0, #1
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	b021      	add	sp, #132	; 0x84
 8003218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321a:	2340      	movs	r3, #64	; 0x40
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	2300      	movs	r3, #0
 8003220:	ac08      	add	r4, sp, #32
 8003222:	6163      	str	r3, [r4, #20]
 8003224:	3320      	adds	r3, #32
 8003226:	7663      	strb	r3, [r4, #25]
 8003228:	3310      	adds	r3, #16
 800322a:	76a3      	strb	r3, [r4, #26]
 800322c:	9507      	str	r5, [sp, #28]
 800322e:	0035      	movs	r5, r6
 8003230:	782b      	ldrb	r3, [r5, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <_svfiprintf_r+0x52>
 8003236:	2b25      	cmp	r3, #37	; 0x25
 8003238:	d147      	bne.n	80032ca <_svfiprintf_r+0xe2>
 800323a:	1bab      	subs	r3, r5, r6
 800323c:	9305      	str	r3, [sp, #20]
 800323e:	42b5      	cmp	r5, r6
 8003240:	d00c      	beq.n	800325c <_svfiprintf_r+0x74>
 8003242:	0032      	movs	r2, r6
 8003244:	0039      	movs	r1, r7
 8003246:	9803      	ldr	r0, [sp, #12]
 8003248:	f7ff ff6c 	bl	8003124 <__ssputs_r>
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d100      	bne.n	8003252 <_svfiprintf_r+0x6a>
 8003250:	e0ae      	b.n	80033b0 <_svfiprintf_r+0x1c8>
 8003252:	6962      	ldr	r2, [r4, #20]
 8003254:	9b05      	ldr	r3, [sp, #20]
 8003256:	4694      	mov	ip, r2
 8003258:	4463      	add	r3, ip
 800325a:	6163      	str	r3, [r4, #20]
 800325c:	782b      	ldrb	r3, [r5, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d100      	bne.n	8003264 <_svfiprintf_r+0x7c>
 8003262:	e0a5      	b.n	80033b0 <_svfiprintf_r+0x1c8>
 8003264:	2201      	movs	r2, #1
 8003266:	2300      	movs	r3, #0
 8003268:	4252      	negs	r2, r2
 800326a:	6062      	str	r2, [r4, #4]
 800326c:	a904      	add	r1, sp, #16
 800326e:	3254      	adds	r2, #84	; 0x54
 8003270:	1852      	adds	r2, r2, r1
 8003272:	1c6e      	adds	r6, r5, #1
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	60e3      	str	r3, [r4, #12]
 8003278:	60a3      	str	r3, [r4, #8]
 800327a:	7013      	strb	r3, [r2, #0]
 800327c:	65a3      	str	r3, [r4, #88]	; 0x58
 800327e:	2205      	movs	r2, #5
 8003280:	7831      	ldrb	r1, [r6, #0]
 8003282:	4854      	ldr	r0, [pc, #336]	; (80033d4 <_svfiprintf_r+0x1ec>)
 8003284:	f000 fa32 	bl	80036ec <memchr>
 8003288:	1c75      	adds	r5, r6, #1
 800328a:	2800      	cmp	r0, #0
 800328c:	d11f      	bne.n	80032ce <_svfiprintf_r+0xe6>
 800328e:	6822      	ldr	r2, [r4, #0]
 8003290:	06d3      	lsls	r3, r2, #27
 8003292:	d504      	bpl.n	800329e <_svfiprintf_r+0xb6>
 8003294:	2353      	movs	r3, #83	; 0x53
 8003296:	a904      	add	r1, sp, #16
 8003298:	185b      	adds	r3, r3, r1
 800329a:	2120      	movs	r1, #32
 800329c:	7019      	strb	r1, [r3, #0]
 800329e:	0713      	lsls	r3, r2, #28
 80032a0:	d504      	bpl.n	80032ac <_svfiprintf_r+0xc4>
 80032a2:	2353      	movs	r3, #83	; 0x53
 80032a4:	a904      	add	r1, sp, #16
 80032a6:	185b      	adds	r3, r3, r1
 80032a8:	212b      	movs	r1, #43	; 0x2b
 80032aa:	7019      	strb	r1, [r3, #0]
 80032ac:	7833      	ldrb	r3, [r6, #0]
 80032ae:	2b2a      	cmp	r3, #42	; 0x2a
 80032b0:	d016      	beq.n	80032e0 <_svfiprintf_r+0xf8>
 80032b2:	0035      	movs	r5, r6
 80032b4:	2100      	movs	r1, #0
 80032b6:	200a      	movs	r0, #10
 80032b8:	68e3      	ldr	r3, [r4, #12]
 80032ba:	782a      	ldrb	r2, [r5, #0]
 80032bc:	1c6e      	adds	r6, r5, #1
 80032be:	3a30      	subs	r2, #48	; 0x30
 80032c0:	2a09      	cmp	r2, #9
 80032c2:	d94e      	bls.n	8003362 <_svfiprintf_r+0x17a>
 80032c4:	2900      	cmp	r1, #0
 80032c6:	d111      	bne.n	80032ec <_svfiprintf_r+0x104>
 80032c8:	e017      	b.n	80032fa <_svfiprintf_r+0x112>
 80032ca:	3501      	adds	r5, #1
 80032cc:	e7b0      	b.n	8003230 <_svfiprintf_r+0x48>
 80032ce:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <_svfiprintf_r+0x1ec>)
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	1ac0      	subs	r0, r0, r3
 80032d4:	2301      	movs	r3, #1
 80032d6:	4083      	lsls	r3, r0
 80032d8:	4313      	orrs	r3, r2
 80032da:	002e      	movs	r6, r5
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	e7ce      	b.n	800327e <_svfiprintf_r+0x96>
 80032e0:	9b07      	ldr	r3, [sp, #28]
 80032e2:	1d19      	adds	r1, r3, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	9107      	str	r1, [sp, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db01      	blt.n	80032f0 <_svfiprintf_r+0x108>
 80032ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ee:	e004      	b.n	80032fa <_svfiprintf_r+0x112>
 80032f0:	425b      	negs	r3, r3
 80032f2:	60e3      	str	r3, [r4, #12]
 80032f4:	2302      	movs	r3, #2
 80032f6:	4313      	orrs	r3, r2
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	782b      	ldrb	r3, [r5, #0]
 80032fc:	2b2e      	cmp	r3, #46	; 0x2e
 80032fe:	d10a      	bne.n	8003316 <_svfiprintf_r+0x12e>
 8003300:	786b      	ldrb	r3, [r5, #1]
 8003302:	2b2a      	cmp	r3, #42	; 0x2a
 8003304:	d135      	bne.n	8003372 <_svfiprintf_r+0x18a>
 8003306:	9b07      	ldr	r3, [sp, #28]
 8003308:	3502      	adds	r5, #2
 800330a:	1d1a      	adds	r2, r3, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	9207      	str	r2, [sp, #28]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db2b      	blt.n	800336c <_svfiprintf_r+0x184>
 8003314:	9309      	str	r3, [sp, #36]	; 0x24
 8003316:	4e30      	ldr	r6, [pc, #192]	; (80033d8 <_svfiprintf_r+0x1f0>)
 8003318:	2203      	movs	r2, #3
 800331a:	0030      	movs	r0, r6
 800331c:	7829      	ldrb	r1, [r5, #0]
 800331e:	f000 f9e5 	bl	80036ec <memchr>
 8003322:	2800      	cmp	r0, #0
 8003324:	d006      	beq.n	8003334 <_svfiprintf_r+0x14c>
 8003326:	2340      	movs	r3, #64	; 0x40
 8003328:	1b80      	subs	r0, r0, r6
 800332a:	4083      	lsls	r3, r0
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	3501      	adds	r5, #1
 8003330:	4313      	orrs	r3, r2
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	7829      	ldrb	r1, [r5, #0]
 8003336:	2206      	movs	r2, #6
 8003338:	4828      	ldr	r0, [pc, #160]	; (80033dc <_svfiprintf_r+0x1f4>)
 800333a:	1c6e      	adds	r6, r5, #1
 800333c:	7621      	strb	r1, [r4, #24]
 800333e:	f000 f9d5 	bl	80036ec <memchr>
 8003342:	2800      	cmp	r0, #0
 8003344:	d03c      	beq.n	80033c0 <_svfiprintf_r+0x1d8>
 8003346:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <_svfiprintf_r+0x1f8>)
 8003348:	2b00      	cmp	r3, #0
 800334a:	d125      	bne.n	8003398 <_svfiprintf_r+0x1b0>
 800334c:	2207      	movs	r2, #7
 800334e:	9b07      	ldr	r3, [sp, #28]
 8003350:	3307      	adds	r3, #7
 8003352:	4393      	bics	r3, r2
 8003354:	3308      	adds	r3, #8
 8003356:	9307      	str	r3, [sp, #28]
 8003358:	6963      	ldr	r3, [r4, #20]
 800335a:	9a04      	ldr	r2, [sp, #16]
 800335c:	189b      	adds	r3, r3, r2
 800335e:	6163      	str	r3, [r4, #20]
 8003360:	e765      	b.n	800322e <_svfiprintf_r+0x46>
 8003362:	4343      	muls	r3, r0
 8003364:	0035      	movs	r5, r6
 8003366:	2101      	movs	r1, #1
 8003368:	189b      	adds	r3, r3, r2
 800336a:	e7a6      	b.n	80032ba <_svfiprintf_r+0xd2>
 800336c:	2301      	movs	r3, #1
 800336e:	425b      	negs	r3, r3
 8003370:	e7d0      	b.n	8003314 <_svfiprintf_r+0x12c>
 8003372:	2300      	movs	r3, #0
 8003374:	200a      	movs	r0, #10
 8003376:	001a      	movs	r2, r3
 8003378:	3501      	adds	r5, #1
 800337a:	6063      	str	r3, [r4, #4]
 800337c:	7829      	ldrb	r1, [r5, #0]
 800337e:	1c6e      	adds	r6, r5, #1
 8003380:	3930      	subs	r1, #48	; 0x30
 8003382:	2909      	cmp	r1, #9
 8003384:	d903      	bls.n	800338e <_svfiprintf_r+0x1a6>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0c5      	beq.n	8003316 <_svfiprintf_r+0x12e>
 800338a:	9209      	str	r2, [sp, #36]	; 0x24
 800338c:	e7c3      	b.n	8003316 <_svfiprintf_r+0x12e>
 800338e:	4342      	muls	r2, r0
 8003390:	0035      	movs	r5, r6
 8003392:	2301      	movs	r3, #1
 8003394:	1852      	adds	r2, r2, r1
 8003396:	e7f1      	b.n	800337c <_svfiprintf_r+0x194>
 8003398:	ab07      	add	r3, sp, #28
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	003a      	movs	r2, r7
 800339e:	0021      	movs	r1, r4
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <_svfiprintf_r+0x1fc>)
 80033a2:	9803      	ldr	r0, [sp, #12]
 80033a4:	e000      	b.n	80033a8 <_svfiprintf_r+0x1c0>
 80033a6:	bf00      	nop
 80033a8:	9004      	str	r0, [sp, #16]
 80033aa:	9b04      	ldr	r3, [sp, #16]
 80033ac:	3301      	adds	r3, #1
 80033ae:	d1d3      	bne.n	8003358 <_svfiprintf_r+0x170>
 80033b0:	89bb      	ldrh	r3, [r7, #12]
 80033b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80033b4:	065b      	lsls	r3, r3, #25
 80033b6:	d400      	bmi.n	80033ba <_svfiprintf_r+0x1d2>
 80033b8:	e72d      	b.n	8003216 <_svfiprintf_r+0x2e>
 80033ba:	2001      	movs	r0, #1
 80033bc:	4240      	negs	r0, r0
 80033be:	e72a      	b.n	8003216 <_svfiprintf_r+0x2e>
 80033c0:	ab07      	add	r3, sp, #28
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	003a      	movs	r2, r7
 80033c6:	0021      	movs	r1, r4
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <_svfiprintf_r+0x1fc>)
 80033ca:	9803      	ldr	r0, [sp, #12]
 80033cc:	f000 f87c 	bl	80034c8 <_printf_i>
 80033d0:	e7ea      	b.n	80033a8 <_svfiprintf_r+0x1c0>
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	08003bb5 	.word	0x08003bb5
 80033d8:	08003bbb 	.word	0x08003bbb
 80033dc:	08003bbf 	.word	0x08003bbf
 80033e0:	00000000 	.word	0x00000000
 80033e4:	08003125 	.word	0x08003125

080033e8 <_printf_common>:
 80033e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ea:	0015      	movs	r5, r2
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	688a      	ldr	r2, [r1, #8]
 80033f0:	690b      	ldr	r3, [r1, #16]
 80033f2:	000c      	movs	r4, r1
 80033f4:	9000      	str	r0, [sp, #0]
 80033f6:	4293      	cmp	r3, r2
 80033f8:	da00      	bge.n	80033fc <_printf_common+0x14>
 80033fa:	0013      	movs	r3, r2
 80033fc:	0022      	movs	r2, r4
 80033fe:	602b      	str	r3, [r5, #0]
 8003400:	3243      	adds	r2, #67	; 0x43
 8003402:	7812      	ldrb	r2, [r2, #0]
 8003404:	2a00      	cmp	r2, #0
 8003406:	d001      	beq.n	800340c <_printf_common+0x24>
 8003408:	3301      	adds	r3, #1
 800340a:	602b      	str	r3, [r5, #0]
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	069b      	lsls	r3, r3, #26
 8003410:	d502      	bpl.n	8003418 <_printf_common+0x30>
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	3302      	adds	r3, #2
 8003416:	602b      	str	r3, [r5, #0]
 8003418:	6822      	ldr	r2, [r4, #0]
 800341a:	2306      	movs	r3, #6
 800341c:	0017      	movs	r7, r2
 800341e:	401f      	ands	r7, r3
 8003420:	421a      	tst	r2, r3
 8003422:	d027      	beq.n	8003474 <_printf_common+0x8c>
 8003424:	0023      	movs	r3, r4
 8003426:	3343      	adds	r3, #67	; 0x43
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	1e5a      	subs	r2, r3, #1
 800342c:	4193      	sbcs	r3, r2
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	0692      	lsls	r2, r2, #26
 8003432:	d430      	bmi.n	8003496 <_printf_common+0xae>
 8003434:	0022      	movs	r2, r4
 8003436:	9901      	ldr	r1, [sp, #4]
 8003438:	9800      	ldr	r0, [sp, #0]
 800343a:	9e08      	ldr	r6, [sp, #32]
 800343c:	3243      	adds	r2, #67	; 0x43
 800343e:	47b0      	blx	r6
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d025      	beq.n	8003490 <_printf_common+0xa8>
 8003444:	2306      	movs	r3, #6
 8003446:	6820      	ldr	r0, [r4, #0]
 8003448:	682a      	ldr	r2, [r5, #0]
 800344a:	68e1      	ldr	r1, [r4, #12]
 800344c:	2500      	movs	r5, #0
 800344e:	4003      	ands	r3, r0
 8003450:	2b04      	cmp	r3, #4
 8003452:	d103      	bne.n	800345c <_printf_common+0x74>
 8003454:	1a8d      	subs	r5, r1, r2
 8003456:	43eb      	mvns	r3, r5
 8003458:	17db      	asrs	r3, r3, #31
 800345a:	401d      	ands	r5, r3
 800345c:	68a3      	ldr	r3, [r4, #8]
 800345e:	6922      	ldr	r2, [r4, #16]
 8003460:	4293      	cmp	r3, r2
 8003462:	dd01      	ble.n	8003468 <_printf_common+0x80>
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	18ed      	adds	r5, r5, r3
 8003468:	2700      	movs	r7, #0
 800346a:	42bd      	cmp	r5, r7
 800346c:	d120      	bne.n	80034b0 <_printf_common+0xc8>
 800346e:	2000      	movs	r0, #0
 8003470:	e010      	b.n	8003494 <_printf_common+0xac>
 8003472:	3701      	adds	r7, #1
 8003474:	68e3      	ldr	r3, [r4, #12]
 8003476:	682a      	ldr	r2, [r5, #0]
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	42bb      	cmp	r3, r7
 800347c:	ddd2      	ble.n	8003424 <_printf_common+0x3c>
 800347e:	0022      	movs	r2, r4
 8003480:	2301      	movs	r3, #1
 8003482:	9901      	ldr	r1, [sp, #4]
 8003484:	9800      	ldr	r0, [sp, #0]
 8003486:	9e08      	ldr	r6, [sp, #32]
 8003488:	3219      	adds	r2, #25
 800348a:	47b0      	blx	r6
 800348c:	1c43      	adds	r3, r0, #1
 800348e:	d1f0      	bne.n	8003472 <_printf_common+0x8a>
 8003490:	2001      	movs	r0, #1
 8003492:	4240      	negs	r0, r0
 8003494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003496:	2030      	movs	r0, #48	; 0x30
 8003498:	18e1      	adds	r1, r4, r3
 800349a:	3143      	adds	r1, #67	; 0x43
 800349c:	7008      	strb	r0, [r1, #0]
 800349e:	0021      	movs	r1, r4
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	3145      	adds	r1, #69	; 0x45
 80034a4:	7809      	ldrb	r1, [r1, #0]
 80034a6:	18a2      	adds	r2, r4, r2
 80034a8:	3243      	adds	r2, #67	; 0x43
 80034aa:	3302      	adds	r3, #2
 80034ac:	7011      	strb	r1, [r2, #0]
 80034ae:	e7c1      	b.n	8003434 <_printf_common+0x4c>
 80034b0:	0022      	movs	r2, r4
 80034b2:	2301      	movs	r3, #1
 80034b4:	9901      	ldr	r1, [sp, #4]
 80034b6:	9800      	ldr	r0, [sp, #0]
 80034b8:	9e08      	ldr	r6, [sp, #32]
 80034ba:	321a      	adds	r2, #26
 80034bc:	47b0      	blx	r6
 80034be:	1c43      	adds	r3, r0, #1
 80034c0:	d0e6      	beq.n	8003490 <_printf_common+0xa8>
 80034c2:	3701      	adds	r7, #1
 80034c4:	e7d1      	b.n	800346a <_printf_common+0x82>
	...

080034c8 <_printf_i>:
 80034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ca:	b08b      	sub	sp, #44	; 0x2c
 80034cc:	9206      	str	r2, [sp, #24]
 80034ce:	000a      	movs	r2, r1
 80034d0:	3243      	adds	r2, #67	; 0x43
 80034d2:	9307      	str	r3, [sp, #28]
 80034d4:	9005      	str	r0, [sp, #20]
 80034d6:	9204      	str	r2, [sp, #16]
 80034d8:	7e0a      	ldrb	r2, [r1, #24]
 80034da:	000c      	movs	r4, r1
 80034dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034de:	2a78      	cmp	r2, #120	; 0x78
 80034e0:	d806      	bhi.n	80034f0 <_printf_i+0x28>
 80034e2:	2a62      	cmp	r2, #98	; 0x62
 80034e4:	d808      	bhi.n	80034f8 <_printf_i+0x30>
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	d100      	bne.n	80034ec <_printf_i+0x24>
 80034ea:	e0c0      	b.n	800366e <_printf_i+0x1a6>
 80034ec:	2a58      	cmp	r2, #88	; 0x58
 80034ee:	d052      	beq.n	8003596 <_printf_i+0xce>
 80034f0:	0026      	movs	r6, r4
 80034f2:	3642      	adds	r6, #66	; 0x42
 80034f4:	7032      	strb	r2, [r6, #0]
 80034f6:	e022      	b.n	800353e <_printf_i+0x76>
 80034f8:	0010      	movs	r0, r2
 80034fa:	3863      	subs	r0, #99	; 0x63
 80034fc:	2815      	cmp	r0, #21
 80034fe:	d8f7      	bhi.n	80034f0 <_printf_i+0x28>
 8003500:	f7fc fe02 	bl	8000108 <__gnu_thumb1_case_shi>
 8003504:	001f0016 	.word	0x001f0016
 8003508:	fff6fff6 	.word	0xfff6fff6
 800350c:	fff6fff6 	.word	0xfff6fff6
 8003510:	fff6001f 	.word	0xfff6001f
 8003514:	fff6fff6 	.word	0xfff6fff6
 8003518:	00a8fff6 	.word	0x00a8fff6
 800351c:	009a0036 	.word	0x009a0036
 8003520:	fff6fff6 	.word	0xfff6fff6
 8003524:	fff600b9 	.word	0xfff600b9
 8003528:	fff60036 	.word	0xfff60036
 800352c:	009efff6 	.word	0x009efff6
 8003530:	0026      	movs	r6, r4
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	3642      	adds	r6, #66	; 0x42
 8003536:	1d11      	adds	r1, r2, #4
 8003538:	6019      	str	r1, [r3, #0]
 800353a:	6813      	ldr	r3, [r2, #0]
 800353c:	7033      	strb	r3, [r6, #0]
 800353e:	2301      	movs	r3, #1
 8003540:	e0a7      	b.n	8003692 <_printf_i+0x1ca>
 8003542:	6808      	ldr	r0, [r1, #0]
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	1d0a      	adds	r2, r1, #4
 8003548:	0605      	lsls	r5, r0, #24
 800354a:	d50b      	bpl.n	8003564 <_printf_i+0x9c>
 800354c:	680d      	ldr	r5, [r1, #0]
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	2d00      	cmp	r5, #0
 8003552:	da03      	bge.n	800355c <_printf_i+0x94>
 8003554:	232d      	movs	r3, #45	; 0x2d
 8003556:	9a04      	ldr	r2, [sp, #16]
 8003558:	426d      	negs	r5, r5
 800355a:	7013      	strb	r3, [r2, #0]
 800355c:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <_printf_i+0x21c>)
 800355e:	270a      	movs	r7, #10
 8003560:	9303      	str	r3, [sp, #12]
 8003562:	e032      	b.n	80035ca <_printf_i+0x102>
 8003564:	680d      	ldr	r5, [r1, #0]
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	0641      	lsls	r1, r0, #25
 800356a:	d5f1      	bpl.n	8003550 <_printf_i+0x88>
 800356c:	b22d      	sxth	r5, r5
 800356e:	e7ef      	b.n	8003550 <_printf_i+0x88>
 8003570:	680d      	ldr	r5, [r1, #0]
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	1d08      	adds	r0, r1, #4
 8003576:	6018      	str	r0, [r3, #0]
 8003578:	062e      	lsls	r6, r5, #24
 800357a:	d501      	bpl.n	8003580 <_printf_i+0xb8>
 800357c:	680d      	ldr	r5, [r1, #0]
 800357e:	e003      	b.n	8003588 <_printf_i+0xc0>
 8003580:	066d      	lsls	r5, r5, #25
 8003582:	d5fb      	bpl.n	800357c <_printf_i+0xb4>
 8003584:	680d      	ldr	r5, [r1, #0]
 8003586:	b2ad      	uxth	r5, r5
 8003588:	4b56      	ldr	r3, [pc, #344]	; (80036e4 <_printf_i+0x21c>)
 800358a:	270a      	movs	r7, #10
 800358c:	9303      	str	r3, [sp, #12]
 800358e:	2a6f      	cmp	r2, #111	; 0x6f
 8003590:	d117      	bne.n	80035c2 <_printf_i+0xfa>
 8003592:	2708      	movs	r7, #8
 8003594:	e015      	b.n	80035c2 <_printf_i+0xfa>
 8003596:	3145      	adds	r1, #69	; 0x45
 8003598:	700a      	strb	r2, [r1, #0]
 800359a:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <_printf_i+0x21c>)
 800359c:	9203      	str	r2, [sp, #12]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	6821      	ldr	r1, [r4, #0]
 80035a2:	ca20      	ldmia	r2!, {r5}
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	0608      	lsls	r0, r1, #24
 80035a8:	d550      	bpl.n	800364c <_printf_i+0x184>
 80035aa:	07cb      	lsls	r3, r1, #31
 80035ac:	d502      	bpl.n	80035b4 <_printf_i+0xec>
 80035ae:	2320      	movs	r3, #32
 80035b0:	4319      	orrs	r1, r3
 80035b2:	6021      	str	r1, [r4, #0]
 80035b4:	2710      	movs	r7, #16
 80035b6:	2d00      	cmp	r5, #0
 80035b8:	d103      	bne.n	80035c2 <_printf_i+0xfa>
 80035ba:	2320      	movs	r3, #32
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	439a      	bics	r2, r3
 80035c0:	6022      	str	r2, [r4, #0]
 80035c2:	0023      	movs	r3, r4
 80035c4:	2200      	movs	r2, #0
 80035c6:	3343      	adds	r3, #67	; 0x43
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	6863      	ldr	r3, [r4, #4]
 80035cc:	60a3      	str	r3, [r4, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	db03      	blt.n	80035da <_printf_i+0x112>
 80035d2:	2204      	movs	r2, #4
 80035d4:	6821      	ldr	r1, [r4, #0]
 80035d6:	4391      	bics	r1, r2
 80035d8:	6021      	str	r1, [r4, #0]
 80035da:	2d00      	cmp	r5, #0
 80035dc:	d102      	bne.n	80035e4 <_printf_i+0x11c>
 80035de:	9e04      	ldr	r6, [sp, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00c      	beq.n	80035fe <_printf_i+0x136>
 80035e4:	9e04      	ldr	r6, [sp, #16]
 80035e6:	0028      	movs	r0, r5
 80035e8:	0039      	movs	r1, r7
 80035ea:	f7fc fe1d 	bl	8000228 <__aeabi_uidivmod>
 80035ee:	9b03      	ldr	r3, [sp, #12]
 80035f0:	3e01      	subs	r6, #1
 80035f2:	5c5b      	ldrb	r3, [r3, r1]
 80035f4:	7033      	strb	r3, [r6, #0]
 80035f6:	002b      	movs	r3, r5
 80035f8:	0005      	movs	r5, r0
 80035fa:	429f      	cmp	r7, r3
 80035fc:	d9f3      	bls.n	80035e6 <_printf_i+0x11e>
 80035fe:	2f08      	cmp	r7, #8
 8003600:	d109      	bne.n	8003616 <_printf_i+0x14e>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	07db      	lsls	r3, r3, #31
 8003606:	d506      	bpl.n	8003616 <_printf_i+0x14e>
 8003608:	6863      	ldr	r3, [r4, #4]
 800360a:	6922      	ldr	r2, [r4, #16]
 800360c:	4293      	cmp	r3, r2
 800360e:	dc02      	bgt.n	8003616 <_printf_i+0x14e>
 8003610:	2330      	movs	r3, #48	; 0x30
 8003612:	3e01      	subs	r6, #1
 8003614:	7033      	strb	r3, [r6, #0]
 8003616:	9b04      	ldr	r3, [sp, #16]
 8003618:	1b9b      	subs	r3, r3, r6
 800361a:	6123      	str	r3, [r4, #16]
 800361c:	9b07      	ldr	r3, [sp, #28]
 800361e:	0021      	movs	r1, r4
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	9805      	ldr	r0, [sp, #20]
 8003624:	9b06      	ldr	r3, [sp, #24]
 8003626:	aa09      	add	r2, sp, #36	; 0x24
 8003628:	f7ff fede 	bl	80033e8 <_printf_common>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	d135      	bne.n	800369c <_printf_i+0x1d4>
 8003630:	2001      	movs	r0, #1
 8003632:	4240      	negs	r0, r0
 8003634:	b00b      	add	sp, #44	; 0x2c
 8003636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003638:	2220      	movs	r2, #32
 800363a:	6809      	ldr	r1, [r1, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	6022      	str	r2, [r4, #0]
 8003640:	0022      	movs	r2, r4
 8003642:	2178      	movs	r1, #120	; 0x78
 8003644:	3245      	adds	r2, #69	; 0x45
 8003646:	7011      	strb	r1, [r2, #0]
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <_printf_i+0x220>)
 800364a:	e7a7      	b.n	800359c <_printf_i+0xd4>
 800364c:	0648      	lsls	r0, r1, #25
 800364e:	d5ac      	bpl.n	80035aa <_printf_i+0xe2>
 8003650:	b2ad      	uxth	r5, r5
 8003652:	e7aa      	b.n	80035aa <_printf_i+0xe2>
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	680d      	ldr	r5, [r1, #0]
 8003658:	1d10      	adds	r0, r2, #4
 800365a:	6949      	ldr	r1, [r1, #20]
 800365c:	6018      	str	r0, [r3, #0]
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	062e      	lsls	r6, r5, #24
 8003662:	d501      	bpl.n	8003668 <_printf_i+0x1a0>
 8003664:	6019      	str	r1, [r3, #0]
 8003666:	e002      	b.n	800366e <_printf_i+0x1a6>
 8003668:	066d      	lsls	r5, r5, #25
 800366a:	d5fb      	bpl.n	8003664 <_printf_i+0x19c>
 800366c:	8019      	strh	r1, [r3, #0]
 800366e:	2300      	movs	r3, #0
 8003670:	9e04      	ldr	r6, [sp, #16]
 8003672:	6123      	str	r3, [r4, #16]
 8003674:	e7d2      	b.n	800361c <_printf_i+0x154>
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	1d11      	adds	r1, r2, #4
 800367a:	6019      	str	r1, [r3, #0]
 800367c:	6816      	ldr	r6, [r2, #0]
 800367e:	2100      	movs	r1, #0
 8003680:	0030      	movs	r0, r6
 8003682:	6862      	ldr	r2, [r4, #4]
 8003684:	f000 f832 	bl	80036ec <memchr>
 8003688:	2800      	cmp	r0, #0
 800368a:	d001      	beq.n	8003690 <_printf_i+0x1c8>
 800368c:	1b80      	subs	r0, r0, r6
 800368e:	6060      	str	r0, [r4, #4]
 8003690:	6863      	ldr	r3, [r4, #4]
 8003692:	6123      	str	r3, [r4, #16]
 8003694:	2300      	movs	r3, #0
 8003696:	9a04      	ldr	r2, [sp, #16]
 8003698:	7013      	strb	r3, [r2, #0]
 800369a:	e7bf      	b.n	800361c <_printf_i+0x154>
 800369c:	6923      	ldr	r3, [r4, #16]
 800369e:	0032      	movs	r2, r6
 80036a0:	9906      	ldr	r1, [sp, #24]
 80036a2:	9805      	ldr	r0, [sp, #20]
 80036a4:	9d07      	ldr	r5, [sp, #28]
 80036a6:	47a8      	blx	r5
 80036a8:	1c43      	adds	r3, r0, #1
 80036aa:	d0c1      	beq.n	8003630 <_printf_i+0x168>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	079b      	lsls	r3, r3, #30
 80036b0:	d415      	bmi.n	80036de <_printf_i+0x216>
 80036b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036b4:	68e0      	ldr	r0, [r4, #12]
 80036b6:	4298      	cmp	r0, r3
 80036b8:	dabc      	bge.n	8003634 <_printf_i+0x16c>
 80036ba:	0018      	movs	r0, r3
 80036bc:	e7ba      	b.n	8003634 <_printf_i+0x16c>
 80036be:	0022      	movs	r2, r4
 80036c0:	2301      	movs	r3, #1
 80036c2:	9906      	ldr	r1, [sp, #24]
 80036c4:	9805      	ldr	r0, [sp, #20]
 80036c6:	9e07      	ldr	r6, [sp, #28]
 80036c8:	3219      	adds	r2, #25
 80036ca:	47b0      	blx	r6
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d0af      	beq.n	8003630 <_printf_i+0x168>
 80036d0:	3501      	adds	r5, #1
 80036d2:	68e3      	ldr	r3, [r4, #12]
 80036d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	42ab      	cmp	r3, r5
 80036da:	dcf0      	bgt.n	80036be <_printf_i+0x1f6>
 80036dc:	e7e9      	b.n	80036b2 <_printf_i+0x1ea>
 80036de:	2500      	movs	r5, #0
 80036e0:	e7f7      	b.n	80036d2 <_printf_i+0x20a>
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	08003bc6 	.word	0x08003bc6
 80036e8:	08003bd7 	.word	0x08003bd7

080036ec <memchr>:
 80036ec:	b2c9      	uxtb	r1, r1
 80036ee:	1882      	adds	r2, r0, r2
 80036f0:	4290      	cmp	r0, r2
 80036f2:	d101      	bne.n	80036f8 <memchr+0xc>
 80036f4:	2000      	movs	r0, #0
 80036f6:	4770      	bx	lr
 80036f8:	7803      	ldrb	r3, [r0, #0]
 80036fa:	428b      	cmp	r3, r1
 80036fc:	d0fb      	beq.n	80036f6 <memchr+0xa>
 80036fe:	3001      	adds	r0, #1
 8003700:	e7f6      	b.n	80036f0 <memchr+0x4>

08003702 <memcpy>:
 8003702:	2300      	movs	r3, #0
 8003704:	b510      	push	{r4, lr}
 8003706:	429a      	cmp	r2, r3
 8003708:	d100      	bne.n	800370c <memcpy+0xa>
 800370a:	bd10      	pop	{r4, pc}
 800370c:	5ccc      	ldrb	r4, [r1, r3]
 800370e:	54c4      	strb	r4, [r0, r3]
 8003710:	3301      	adds	r3, #1
 8003712:	e7f8      	b.n	8003706 <memcpy+0x4>

08003714 <memmove>:
 8003714:	b510      	push	{r4, lr}
 8003716:	4288      	cmp	r0, r1
 8003718:	d902      	bls.n	8003720 <memmove+0xc>
 800371a:	188b      	adds	r3, r1, r2
 800371c:	4298      	cmp	r0, r3
 800371e:	d303      	bcc.n	8003728 <memmove+0x14>
 8003720:	2300      	movs	r3, #0
 8003722:	e007      	b.n	8003734 <memmove+0x20>
 8003724:	5c8b      	ldrb	r3, [r1, r2]
 8003726:	5483      	strb	r3, [r0, r2]
 8003728:	3a01      	subs	r2, #1
 800372a:	d2fb      	bcs.n	8003724 <memmove+0x10>
 800372c:	bd10      	pop	{r4, pc}
 800372e:	5ccc      	ldrb	r4, [r1, r3]
 8003730:	54c4      	strb	r4, [r0, r3]
 8003732:	3301      	adds	r3, #1
 8003734:	429a      	cmp	r2, r3
 8003736:	d1fa      	bne.n	800372e <memmove+0x1a>
 8003738:	e7f8      	b.n	800372c <memmove+0x18>
	...

0800373c <_free_r>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	0005      	movs	r5, r0
 8003740:	2900      	cmp	r1, #0
 8003742:	d010      	beq.n	8003766 <_free_r+0x2a>
 8003744:	1f0c      	subs	r4, r1, #4
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	da00      	bge.n	800374e <_free_r+0x12>
 800374c:	18e4      	adds	r4, r4, r3
 800374e:	0028      	movs	r0, r5
 8003750:	f000 f8d4 	bl	80038fc <__malloc_lock>
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <_free_r+0x90>)
 8003756:	6813      	ldr	r3, [r2, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <_free_r+0x2c>
 800375c:	6063      	str	r3, [r4, #4]
 800375e:	6014      	str	r4, [r2, #0]
 8003760:	0028      	movs	r0, r5
 8003762:	f000 f8d3 	bl	800390c <__malloc_unlock>
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	42a3      	cmp	r3, r4
 800376a:	d908      	bls.n	800377e <_free_r+0x42>
 800376c:	6821      	ldr	r1, [r4, #0]
 800376e:	1860      	adds	r0, r4, r1
 8003770:	4283      	cmp	r3, r0
 8003772:	d1f3      	bne.n	800375c <_free_r+0x20>
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	1841      	adds	r1, r0, r1
 800377a:	6021      	str	r1, [r4, #0]
 800377c:	e7ee      	b.n	800375c <_free_r+0x20>
 800377e:	001a      	movs	r2, r3
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <_free_r+0x4e>
 8003786:	42a3      	cmp	r3, r4
 8003788:	d9f9      	bls.n	800377e <_free_r+0x42>
 800378a:	6811      	ldr	r1, [r2, #0]
 800378c:	1850      	adds	r0, r2, r1
 800378e:	42a0      	cmp	r0, r4
 8003790:	d10b      	bne.n	80037aa <_free_r+0x6e>
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	1809      	adds	r1, r1, r0
 8003796:	1850      	adds	r0, r2, r1
 8003798:	6011      	str	r1, [r2, #0]
 800379a:	4283      	cmp	r3, r0
 800379c:	d1e0      	bne.n	8003760 <_free_r+0x24>
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	1841      	adds	r1, r0, r1
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	6053      	str	r3, [r2, #4]
 80037a8:	e7da      	b.n	8003760 <_free_r+0x24>
 80037aa:	42a0      	cmp	r0, r4
 80037ac:	d902      	bls.n	80037b4 <_free_r+0x78>
 80037ae:	230c      	movs	r3, #12
 80037b0:	602b      	str	r3, [r5, #0]
 80037b2:	e7d5      	b.n	8003760 <_free_r+0x24>
 80037b4:	6821      	ldr	r1, [r4, #0]
 80037b6:	1860      	adds	r0, r4, r1
 80037b8:	4283      	cmp	r3, r0
 80037ba:	d103      	bne.n	80037c4 <_free_r+0x88>
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	1841      	adds	r1, r0, r1
 80037c2:	6021      	str	r1, [r4, #0]
 80037c4:	6063      	str	r3, [r4, #4]
 80037c6:	6054      	str	r4, [r2, #4]
 80037c8:	e7ca      	b.n	8003760 <_free_r+0x24>
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	20000094 	.word	0x20000094

080037d0 <_malloc_r>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	2303      	movs	r3, #3
 80037d4:	1ccd      	adds	r5, r1, #3
 80037d6:	439d      	bics	r5, r3
 80037d8:	3508      	adds	r5, #8
 80037da:	0006      	movs	r6, r0
 80037dc:	2d0c      	cmp	r5, #12
 80037de:	d21f      	bcs.n	8003820 <_malloc_r+0x50>
 80037e0:	250c      	movs	r5, #12
 80037e2:	42a9      	cmp	r1, r5
 80037e4:	d81e      	bhi.n	8003824 <_malloc_r+0x54>
 80037e6:	0030      	movs	r0, r6
 80037e8:	f000 f888 	bl	80038fc <__malloc_lock>
 80037ec:	4925      	ldr	r1, [pc, #148]	; (8003884 <_malloc_r+0xb4>)
 80037ee:	680a      	ldr	r2, [r1, #0]
 80037f0:	0014      	movs	r4, r2
 80037f2:	2c00      	cmp	r4, #0
 80037f4:	d11a      	bne.n	800382c <_malloc_r+0x5c>
 80037f6:	4f24      	ldr	r7, [pc, #144]	; (8003888 <_malloc_r+0xb8>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <_malloc_r+0x38>
 80037fe:	0021      	movs	r1, r4
 8003800:	0030      	movs	r0, r6
 8003802:	f000 f869 	bl	80038d8 <_sbrk_r>
 8003806:	6038      	str	r0, [r7, #0]
 8003808:	0029      	movs	r1, r5
 800380a:	0030      	movs	r0, r6
 800380c:	f000 f864 	bl	80038d8 <_sbrk_r>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d12b      	bne.n	800386c <_malloc_r+0x9c>
 8003814:	230c      	movs	r3, #12
 8003816:	0030      	movs	r0, r6
 8003818:	6033      	str	r3, [r6, #0]
 800381a:	f000 f877 	bl	800390c <__malloc_unlock>
 800381e:	e003      	b.n	8003828 <_malloc_r+0x58>
 8003820:	2d00      	cmp	r5, #0
 8003822:	dade      	bge.n	80037e2 <_malloc_r+0x12>
 8003824:	230c      	movs	r3, #12
 8003826:	6033      	str	r3, [r6, #0]
 8003828:	2000      	movs	r0, #0
 800382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	1b5b      	subs	r3, r3, r5
 8003830:	d419      	bmi.n	8003866 <_malloc_r+0x96>
 8003832:	2b0b      	cmp	r3, #11
 8003834:	d903      	bls.n	800383e <_malloc_r+0x6e>
 8003836:	6023      	str	r3, [r4, #0]
 8003838:	18e4      	adds	r4, r4, r3
 800383a:	6025      	str	r5, [r4, #0]
 800383c:	e003      	b.n	8003846 <_malloc_r+0x76>
 800383e:	6863      	ldr	r3, [r4, #4]
 8003840:	42a2      	cmp	r2, r4
 8003842:	d10e      	bne.n	8003862 <_malloc_r+0x92>
 8003844:	600b      	str	r3, [r1, #0]
 8003846:	0030      	movs	r0, r6
 8003848:	f000 f860 	bl	800390c <__malloc_unlock>
 800384c:	0020      	movs	r0, r4
 800384e:	2207      	movs	r2, #7
 8003850:	300b      	adds	r0, #11
 8003852:	1d23      	adds	r3, r4, #4
 8003854:	4390      	bics	r0, r2
 8003856:	1ac2      	subs	r2, r0, r3
 8003858:	4298      	cmp	r0, r3
 800385a:	d0e6      	beq.n	800382a <_malloc_r+0x5a>
 800385c:	1a1b      	subs	r3, r3, r0
 800385e:	50a3      	str	r3, [r4, r2]
 8003860:	e7e3      	b.n	800382a <_malloc_r+0x5a>
 8003862:	6053      	str	r3, [r2, #4]
 8003864:	e7ef      	b.n	8003846 <_malloc_r+0x76>
 8003866:	0022      	movs	r2, r4
 8003868:	6864      	ldr	r4, [r4, #4]
 800386a:	e7c2      	b.n	80037f2 <_malloc_r+0x22>
 800386c:	2303      	movs	r3, #3
 800386e:	1cc4      	adds	r4, r0, #3
 8003870:	439c      	bics	r4, r3
 8003872:	42a0      	cmp	r0, r4
 8003874:	d0e1      	beq.n	800383a <_malloc_r+0x6a>
 8003876:	1a21      	subs	r1, r4, r0
 8003878:	0030      	movs	r0, r6
 800387a:	f000 f82d 	bl	80038d8 <_sbrk_r>
 800387e:	1c43      	adds	r3, r0, #1
 8003880:	d1db      	bne.n	800383a <_malloc_r+0x6a>
 8003882:	e7c7      	b.n	8003814 <_malloc_r+0x44>
 8003884:	20000094 	.word	0x20000094
 8003888:	20000098 	.word	0x20000098

0800388c <_realloc_r>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	0007      	movs	r7, r0
 8003890:	000d      	movs	r5, r1
 8003892:	0016      	movs	r6, r2
 8003894:	2900      	cmp	r1, #0
 8003896:	d105      	bne.n	80038a4 <_realloc_r+0x18>
 8003898:	0011      	movs	r1, r2
 800389a:	f7ff ff99 	bl	80037d0 <_malloc_r>
 800389e:	0004      	movs	r4, r0
 80038a0:	0020      	movs	r0, r4
 80038a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a4:	2a00      	cmp	r2, #0
 80038a6:	d103      	bne.n	80038b0 <_realloc_r+0x24>
 80038a8:	f7ff ff48 	bl	800373c <_free_r>
 80038ac:	0034      	movs	r4, r6
 80038ae:	e7f7      	b.n	80038a0 <_realloc_r+0x14>
 80038b0:	f000 f834 	bl	800391c <_malloc_usable_size_r>
 80038b4:	002c      	movs	r4, r5
 80038b6:	42b0      	cmp	r0, r6
 80038b8:	d2f2      	bcs.n	80038a0 <_realloc_r+0x14>
 80038ba:	0031      	movs	r1, r6
 80038bc:	0038      	movs	r0, r7
 80038be:	f7ff ff87 	bl	80037d0 <_malloc_r>
 80038c2:	1e04      	subs	r4, r0, #0
 80038c4:	d0ec      	beq.n	80038a0 <_realloc_r+0x14>
 80038c6:	0029      	movs	r1, r5
 80038c8:	0032      	movs	r2, r6
 80038ca:	f7ff ff1a 	bl	8003702 <memcpy>
 80038ce:	0029      	movs	r1, r5
 80038d0:	0038      	movs	r0, r7
 80038d2:	f7ff ff33 	bl	800373c <_free_r>
 80038d6:	e7e3      	b.n	80038a0 <_realloc_r+0x14>

080038d8 <_sbrk_r>:
 80038d8:	2300      	movs	r3, #0
 80038da:	b570      	push	{r4, r5, r6, lr}
 80038dc:	4d06      	ldr	r5, [pc, #24]	; (80038f8 <_sbrk_r+0x20>)
 80038de:	0004      	movs	r4, r0
 80038e0:	0008      	movs	r0, r1
 80038e2:	602b      	str	r3, [r5, #0]
 80038e4:	f7fd f9f0 	bl	8000cc8 <_sbrk>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d103      	bne.n	80038f4 <_sbrk_r+0x1c>
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d000      	beq.n	80038f4 <_sbrk_r+0x1c>
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	bd70      	pop	{r4, r5, r6, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	20000128 	.word	0x20000128

080038fc <__malloc_lock>:
 80038fc:	b510      	push	{r4, lr}
 80038fe:	4802      	ldr	r0, [pc, #8]	; (8003908 <__malloc_lock+0xc>)
 8003900:	f000 f814 	bl	800392c <__retarget_lock_acquire_recursive>
 8003904:	bd10      	pop	{r4, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	20000130 	.word	0x20000130

0800390c <__malloc_unlock>:
 800390c:	b510      	push	{r4, lr}
 800390e:	4802      	ldr	r0, [pc, #8]	; (8003918 <__malloc_unlock+0xc>)
 8003910:	f000 f80d 	bl	800392e <__retarget_lock_release_recursive>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	20000130 	.word	0x20000130

0800391c <_malloc_usable_size_r>:
 800391c:	1f0b      	subs	r3, r1, #4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	1f18      	subs	r0, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	da01      	bge.n	800392a <_malloc_usable_size_r+0xe>
 8003926:	580b      	ldr	r3, [r1, r0]
 8003928:	18c0      	adds	r0, r0, r3
 800392a:	4770      	bx	lr

0800392c <__retarget_lock_acquire_recursive>:
 800392c:	4770      	bx	lr

0800392e <__retarget_lock_release_recursive>:
 800392e:	4770      	bx	lr

08003930 <_init>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003936:	bc08      	pop	{r3}
 8003938:	469e      	mov	lr, r3
 800393a:	4770      	bx	lr

0800393c <_fini>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr
