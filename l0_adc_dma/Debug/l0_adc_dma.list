
l0_adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d28  08002d28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d30  08002d30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08002d44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002d44  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000978f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018af  00000000  00000000  000297c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001315d  00000000  00000000  0002c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7e3  00000000  00000000  0003f3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000782bb  00000000  00000000  0004abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2e9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021c4  00000000  00000000  000c2ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cf4 	.word	0x08002cf4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002cf4 	.word	0x08002cf4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <HAL_ADC_ConvCpltCallback>:
#include <stdbool.h>
uint32_t adcValues[3];

volatile bool updateAdcValues = false;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	updateAdcValues = true;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_ADC_ConvCpltCallback+0x24>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2140      	movs	r1, #64	; 0x40
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fbe6 	bl	8001c82 <HAL_GPIO_TogglePin>
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000028 	.word	0x20000028

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 faec 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f862 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f998 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f978 	bl	80007c8 <MX_DMA_Init>
  MX_ADC_Init();
 80004d8:	f000 f8b8 	bl	800064c <MX_ADC_Init>
  MX_TIM6_Init();
 80004dc:	f000 f938 	bl	8000750 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc, adcValues, 3);
 80004e0:	4928      	ldr	r1, [pc, #160]	; (8000584 <main+0xc0>)
 80004e2:	4b29      	ldr	r3, [pc, #164]	; (8000588 <main+0xc4>)
 80004e4:	2203      	movs	r2, #3
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fcc0 	bl	8000e6c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 80004ec:	4b27      	ldr	r3, [pc, #156]	; (800058c <main+0xc8>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f002 f9d4 	bl	800289c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (updateAdcValues) {
 80004f4:	4b26      	ldr	r3, [pc, #152]	; (8000590 <main+0xcc>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0fa      	beq.n	80004f4 <main+0x30>
			updateAdcValues = false;
 80004fe:	4b24      	ldr	r3, [pc, #144]	; (8000590 <main+0xcc>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]

			if (adcValues[0] > 512) {
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <main+0xc0>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	429a      	cmp	r2, r3
 800050e:	d907      	bls.n	8000520 <main+0x5c>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000510:	23a0      	movs	r3, #160	; 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2201      	movs	r2, #1
 8000516:	2108      	movs	r1, #8
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fb95 	bl	8001c48 <HAL_GPIO_WritePin>
 800051e:	e006      	b.n	800052e <main+0x6a>
			} else {
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000520:	23a0      	movs	r3, #160	; 0xa0
 8000522:	05db      	lsls	r3, r3, #23
 8000524:	2200      	movs	r2, #0
 8000526:	2108      	movs	r1, #8
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fb8d 	bl	8001c48 <HAL_GPIO_WritePin>
			}
			if (adcValues[1] > 512) {
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <main+0xc0>)
 8000530:	685a      	ldr	r2, [r3, #4]
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	429a      	cmp	r2, r3
 8000538:	d907      	bls.n	800054a <main+0x86>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800053a:	23a0      	movs	r3, #160	; 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	2201      	movs	r2, #1
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fb80 	bl	8001c48 <HAL_GPIO_WritePin>
 8000548:	e006      	b.n	8000558 <main+0x94>
			} else {
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800054a:	23a0      	movs	r3, #160	; 0xa0
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	2200      	movs	r2, #0
 8000550:	2120      	movs	r1, #32
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fb78 	bl	8001c48 <HAL_GPIO_WritePin>
			}
			if (adcValues[2] > 512) {
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <main+0xc0>)
 800055a:	689a      	ldr	r2, [r3, #8]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	429a      	cmp	r2, r3
 8000562:	d907      	bls.n	8000574 <main+0xb0>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000564:	23a0      	movs	r3, #160	; 0xa0
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	2201      	movs	r2, #1
 800056a:	2110      	movs	r1, #16
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fb6b 	bl	8001c48 <HAL_GPIO_WritePin>
 8000572:	e7bf      	b.n	80004f4 <main+0x30>
			} else {
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000574:	23a0      	movs	r3, #160	; 0xa0
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	2200      	movs	r2, #0
 800057a:	2110      	movs	r1, #16
 800057c:	0018      	movs	r0, r3
 800057e:	f001 fb63 	bl	8001c48 <HAL_GPIO_WritePin>
		if (updateAdcValues) {
 8000582:	e7b7      	b.n	80004f4 <main+0x30>
 8000584:	2000002c 	.word	0x2000002c
 8000588:	200000c0 	.word	0x200000c0
 800058c:	20000038 	.word	0x20000038
 8000590:	20000028 	.word	0x20000028

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b095      	sub	sp, #84	; 0x54
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	2418      	movs	r4, #24
 800059c:	193b      	adds	r3, r7, r4
 800059e:	0018      	movs	r0, r3
 80005a0:	2338      	movs	r3, #56	; 0x38
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f002 fb9d 	bl	8002ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	0018      	movs	r0, r3
 80005ae:	2314      	movs	r3, #20
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f002 fb96 	bl	8002ce4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <SystemClock_Config+0xb0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a22      	ldr	r2, [pc, #136]	; (8000648 <SystemClock_Config+0xb4>)
 80005be:	401a      	ands	r2, r3
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <SystemClock_Config+0xb0>)
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	0109      	lsls	r1, r1, #4
 80005c6:	430a      	orrs	r2, r1
 80005c8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2202      	movs	r2, #2
 80005d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2201      	movs	r2, #1
 80005d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2210      	movs	r2, #16
 80005dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2202      	movs	r2, #2
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	02d2      	lsls	r2, r2, #11
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	03d2      	lsls	r2, r2, #15
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fb5b 	bl	8001cb8 <HAL_RCC_OscConfig>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000606:	f000 f933 	bl	8000870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	220f      	movs	r2, #15
 800060e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2203      	movs	r2, #3
 8000614:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2101      	movs	r1, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f001 ff07 	bl	8002440 <HAL_RCC_ClockConfig>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000636:	f000 f91b 	bl	8000870 <Error_Handler>
  }
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b015      	add	sp, #84	; 0x54
 8000640:	bd90      	pop	{r4, r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	40007000 	.word	0x40007000
 8000648:	ffffe7ff 	.word	0xffffe7ff

0800064c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	003b      	movs	r3, r7
 8000654:	0018      	movs	r0, r3
 8000656:	2308      	movs	r3, #8
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 fb42 	bl	8002ce4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000660:	4b37      	ldr	r3, [pc, #220]	; (8000740 <MX_ADC_Init+0xf4>)
 8000662:	4a38      	ldr	r2, [pc, #224]	; (8000744 <MX_ADC_Init+0xf8>)
 8000664:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000666:	4b36      	ldr	r3, [pc, #216]	; (8000740 <MX_ADC_Init+0xf4>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800066c:	4b34      	ldr	r3, [pc, #208]	; (8000740 <MX_ADC_Init+0xf4>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	05d2      	lsls	r2, r2, #23
 8000672:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b32      	ldr	r3, [pc, #200]	; (8000740 <MX_ADC_Init+0xf4>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800067a:	4b31      	ldr	r3, [pc, #196]	; (8000740 <MX_ADC_Init+0xf4>)
 800067c:	2207      	movs	r2, #7
 800067e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000680:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <MX_ADC_Init+0xf4>)
 8000682:	2201      	movs	r2, #1
 8000684:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <MX_ADC_Init+0xf4>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <MX_ADC_Init+0xf4>)
 800068e:	2220      	movs	r2, #32
 8000690:	2100      	movs	r1, #0
 8000692:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <MX_ADC_Init+0xf4>)
 8000696:	2221      	movs	r2, #33	; 0x21
 8000698:	2100      	movs	r1, #0
 800069a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <MX_ADC_Init+0xf4>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	00d2      	lsls	r2, r2, #3
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <MX_ADC_Init+0xf4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <MX_ADC_Init+0xf4>)
 80006ac:	222c      	movs	r2, #44	; 0x2c
 80006ae:	2101      	movs	r1, #1
 80006b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <MX_ADC_Init+0xf4>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_ADC_Init+0xf4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_ADC_Init+0xf4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_ADC_Init+0xf4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_ADC_Init+0xf4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_ADC_Init+0xf4>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fa56 	bl	8000b84 <HAL_ADC_Init>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80006dc:	f000 f8c8 	bl	8000870 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006e0:	003b      	movs	r3, r7
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0152      	lsls	r2, r2, #5
 80006ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ee:	003a      	movs	r2, r7
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_ADC_Init+0xf4>)
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fd0f 	bl	8001118 <HAL_ADC_ConfigChannel>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006fe:	f000 f8b7 	bl	8000870 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000702:	003b      	movs	r3, r7
 8000704:	4a10      	ldr	r2, [pc, #64]	; (8000748 <MX_ADC_Init+0xfc>)
 8000706:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000708:	003a      	movs	r2, r7
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_ADC_Init+0xf4>)
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fd02 	bl	8001118 <HAL_ADC_ConfigChannel>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000718:	f000 f8aa 	bl	8000870 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800071c:	003b      	movs	r3, r7
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <MX_ADC_Init+0x100>)
 8000720:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000722:	003a      	movs	r2, r7
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_ADC_Init+0xf4>)
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fcf5 	bl	8001118 <HAL_ADC_ConfigChannel>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000732:	f000 f89d 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	200000c0 	.word	0x200000c0
 8000744:	40012400 	.word	0x40012400
 8000748:	04000002 	.word	0x04000002
 800074c:	08000004 	.word	0x08000004

08000750 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	003b      	movs	r3, r7
 8000758:	0018      	movs	r0, r3
 800075a:	2308      	movs	r3, #8
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f002 fac0 	bl	8002ce4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_TIM6_Init+0x6c>)
 8000766:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <MX_TIM6_Init+0x70>)
 8000768:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_TIM6_Init+0x6c>)
 800076c:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MX_TIM6_Init+0x74>)
 800076e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_TIM6_Init+0x6c>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_TIM6_Init+0x6c>)
 8000778:	2263      	movs	r2, #99	; 0x63
 800077a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_TIM6_Init+0x6c>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_TIM6_Init+0x6c>)
 8000784:	0018      	movs	r0, r3
 8000786:	f002 f849 	bl	800281c <HAL_TIM_Base_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800078e:	f000 f86f 	bl	8000870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000792:	003b      	movs	r3, r7
 8000794:	2220      	movs	r2, #32
 8000796:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	003b      	movs	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800079e:	003a      	movs	r2, r7
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_TIM6_Init+0x6c>)
 80007a2:	0011      	movs	r1, r2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 fa21 	bl	8002bec <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80007ae:	f000 f85f 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	20000038 	.word	0x20000038
 80007c0:	40001000 	.word	0x40001000
 80007c4:	00007cff 	.word	0x00007cff

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_DMA_Init+0x38>)
 80007d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_DMA_Init+0x38>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	430a      	orrs	r2, r1
 80007d8:	631a      	str	r2, [r3, #48]	; 0x30
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_DMA_Init+0x38>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	2201      	movs	r2, #1
 80007e0:	4013      	ands	r3, r2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2009      	movs	r0, #9
 80007ec:	f000 feca 	bl	8001584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007f0:	2009      	movs	r0, #9
 80007f2:	f000 fedc 	bl	80015ae <HAL_NVIC_EnableIRQ>

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	0018      	movs	r0, r3
 800080e:	2314      	movs	r3, #20
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f002 fa66 	bl	8002ce4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_GPIO_Init+0x68>)
 800081a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_GPIO_Init+0x68>)
 800081e:	2101      	movs	r1, #1
 8000820:	430a      	orrs	r2, r1
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_GPIO_Init+0x68>)
 8000826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000828:	2201      	movs	r2, #1
 800082a:	4013      	ands	r3, r2
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin|LED2_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000830:	23a0      	movs	r3, #160	; 0xa0
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	2200      	movs	r2, #0
 8000836:	2178      	movs	r1, #120	; 0x78
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fa05 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin|LED4_Pin;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2278      	movs	r2, #120	; 0x78
 8000842:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2201      	movs	r2, #1
 8000848:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	1d3a      	adds	r2, r7, #4
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f001 f87c 	bl	800195c <HAL_GPIO_Init>

}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b006      	add	sp, #24
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <HAL_MspInit+0x24>)
 8000882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x24>)
 8000886:	2101      	movs	r1, #1
 8000888:	430a      	orrs	r2, r1
 800088a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <HAL_MspInit+0x24>)
 800088e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_MspInit+0x24>)
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	0549      	lsls	r1, r1, #21
 8000896:	430a      	orrs	r2, r1
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	240c      	movs	r4, #12
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f002 fa14 	bl	8002ce4 <memset>
  if(hadc->Instance==ADC1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a2e      	ldr	r2, [pc, #184]	; (800097c <HAL_ADC_MspInit+0xd8>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d155      	bne.n	8000972 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <HAL_ADC_MspInit+0xdc>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <HAL_ADC_MspInit+0xdc>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0089      	lsls	r1, r1, #2
 80008d0:	430a      	orrs	r2, r1
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <HAL_ADC_MspInit+0xdc>)
 80008d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_ADC_MspInit+0xdc>)
 80008da:	2101      	movs	r1, #1
 80008dc:	430a      	orrs	r2, r1
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <HAL_ADC_MspInit+0xdc>)
 80008e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e4:	2201      	movs	r2, #1
 80008e6:	4013      	ands	r3, r2
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = LEVEL_Pin|WEIGHT_Pin|TEMP_Pin;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2207      	movs	r2, #7
 80008f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2203      	movs	r2, #3
 80008f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	193a      	adds	r2, r7, r4
 8000900:	23a0      	movs	r3, #160	; 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f001 f828 	bl	800195c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <HAL_ADC_MspInit+0xe4>)
 8000910:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	0052      	lsls	r2, r2, #1
 8000930:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 800093c:	2220      	movs	r2, #32
 800093e:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fe4d 	bl	80015e8 <HAL_DMA_Init>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000952:	f7ff ff8d 	bl	8000870 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 800095a:	64da      	str	r2, [r3, #76]	; 0x4c
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_ADC_MspInit+0xe0>)
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	200c      	movs	r0, #12
 8000968:	f000 fe0c 	bl	8001584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800096c:	200c      	movs	r0, #12
 800096e:	f000 fe1e 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b009      	add	sp, #36	; 0x24
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40012400 	.word	0x40012400
 8000980:	40021000 	.word	0x40021000
 8000984:	20000078 	.word	0x20000078
 8000988:	40020008 	.word	0x40020008

0800098c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_TIM_Base_MspInit+0x38>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d10d      	bne.n	80009ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_TIM_Base_MspInit+0x3c>)
 80009a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_TIM_Base_MspInit+0x3c>)
 80009a4:	2110      	movs	r1, #16
 80009a6:	430a      	orrs	r2, r1
 80009a8:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2011      	movs	r0, #17
 80009b0:	f000 fde8 	bl	8001584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009b4:	2011      	movs	r0, #17
 80009b6:	f000 fdfa 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40001000 	.word	0x40001000
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f8ac 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <DMA1_Channel1_IRQHandler+0x14>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 fece 	bl	80017a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000078 	.word	0x20000078

08000a14 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <ADC1_COMP_IRQHandler+0x14>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 faa8 	bl	8000f70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	200000c0 	.word	0x200000c0

08000a2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <TIM6_DAC_IRQHandler+0x14>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 ff76 	bl	8002924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000038 	.word	0x20000038

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490e      	ldr	r1, [pc, #56]	; (8000a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0b      	ldr	r4, [pc, #44]	; (8000a9c <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a7a:	f7ff ffe3 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f002 f90d 	bl	8002c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd1f 	bl	80004c4 <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
   ldr   r0, =_estack
 8000a88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a94:	08002d38 	.word	0x08002d38
  ldr r2, =_sbss
 8000a98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a9c:	20000120 	.word	0x20000120

08000aa0 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <DMA1_Channel2_3_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_Init+0x3c>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_Init+0x3c>)
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 f811 	bl	8000ae4 <HAL_InitTick>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	e001      	b.n	8000ad2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ace:	f7ff fed5 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_InitTick+0x5c>)
 8000aee:	681c      	ldr	r4, [r3, #0]
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_InitTick+0x60>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	0019      	movs	r1, r3
 8000af6:	23fa      	movs	r3, #250	; 0xfa
 8000af8:	0098      	lsls	r0, r3, #2
 8000afa:	f7ff fb05 	bl	8000108 <__udivsi3>
 8000afe:	0003      	movs	r3, r0
 8000b00:	0019      	movs	r1, r3
 8000b02:	0020      	movs	r0, r4
 8000b04:	f7ff fb00 	bl	8000108 <__udivsi3>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fd5f 	bl	80015ce <HAL_SYSTICK_Config>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e00f      	b.n	8000b38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d80b      	bhi.n	8000b36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2301      	movs	r3, #1
 8000b22:	425b      	negs	r3, r3
 8000b24:	2200      	movs	r2, #0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fd2c 	bl	8001584 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_InitTick+0x64>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b003      	add	sp, #12
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	001a      	movs	r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x20>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	18d2      	adds	r2, r2, r3
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_IncTick+0x20>)
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	2000011c 	.word	0x2000011c

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <HAL_GetTick+0x10>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	2000011c 	.word	0x2000011c

08000b84 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e159      	b.n	8000e4a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10a      	bne.n	8000bb4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2250      	movs	r2, #80	; 0x50
 8000ba8:	2100      	movs	r1, #0
 8000baa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fe78 	bl	80008a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bb8:	2210      	movs	r2, #16
 8000bba:	4013      	ands	r3, r2
 8000bbc:	2b10      	cmp	r3, #16
 8000bbe:	d005      	beq.n	8000bcc <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000bca:	d00b      	beq.n	8000be4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd0:	2210      	movs	r2, #16
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2250      	movs	r2, #80	; 0x50
 8000bdc:	2100      	movs	r1, #0
 8000bde:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e132      	b.n	8000e4a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000be8:	4a9a      	ldr	r2, [pc, #616]	; (8000e54 <HAL_ADC_Init+0x2d0>)
 8000bea:	4013      	ands	r3, r2
 8000bec:	2202      	movs	r2, #2
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d108      	bne.n	8000c14 <HAL_ADC_Init+0x90>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d101      	bne.n	8000c14 <HAL_ADC_Init+0x90>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <HAL_ADC_Init+0x92>
 8000c14:	2300      	movs	r3, #0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d149      	bne.n	8000cae <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	23c0      	movs	r3, #192	; 0xc0
 8000c20:	061b      	lsls	r3, r3, #24
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d00b      	beq.n	8000c3e <HAL_ADC_Init+0xba>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d005      	beq.n	8000c3e <HAL_ADC_Init+0xba>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	061b      	lsls	r3, r3, #24
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d111      	bne.n	8000c62 <HAL_ADC_Init+0xde>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	691a      	ldr	r2, [r3, #16]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	0892      	lsrs	r2, r2, #2
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6919      	ldr	r1, [r3, #16]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	e014      	b.n	8000c8c <HAL_ADC_Init+0x108>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	0092      	lsls	r2, r2, #2
 8000c6e:	0892      	lsrs	r2, r2, #2
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	4b79      	ldr	r3, [pc, #484]	; (8000e58 <HAL_ADC_Init+0x2d4>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b78      	ldr	r3, [pc, #480]	; (8000e58 <HAL_ADC_Init+0x2d4>)
 8000c78:	4978      	ldr	r1, [pc, #480]	; (8000e5c <HAL_ADC_Init+0x2d8>)
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	4b76      	ldr	r3, [pc, #472]	; (8000e58 <HAL_ADC_Init+0x2d4>)
 8000c80:	6819      	ldr	r1, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4b74      	ldr	r3, [pc, #464]	; (8000e58 <HAL_ADC_Init+0x2d4>)
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2118      	movs	r1, #24
 8000c98:	438a      	bics	r2, r1
 8000c9a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68d9      	ldr	r1, [r3, #12]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000cae:	4b6a      	ldr	r3, [pc, #424]	; (8000e58 <HAL_ADC_Init+0x2d4>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b69      	ldr	r3, [pc, #420]	; (8000e58 <HAL_ADC_Init+0x2d4>)
 8000cb4:	496a      	ldr	r1, [pc, #424]	; (8000e60 <HAL_ADC_Init+0x2dc>)
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000cba:	4b67      	ldr	r3, [pc, #412]	; (8000e58 <HAL_ADC_Init+0x2d4>)
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc2:	065a      	lsls	r2, r3, #25
 8000cc4:	4b64      	ldr	r3, [pc, #400]	; (8000e58 <HAL_ADC_Init+0x2d4>)
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	055b      	lsls	r3, r3, #21
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d108      	bne.n	8000cea <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	0549      	lsls	r1, r1, #21
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	495b      	ldr	r1, [pc, #364]	; (8000e64 <HAL_ADC_Init+0x2e0>)
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68d9      	ldr	r1, [r3, #12]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d101      	bne.n	8000d10 <HAL_ADC_Init+0x18c>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e000      	b.n	8000d12 <HAL_ADC_Init+0x18e>
 8000d10:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d12:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2020      	movs	r0, #32
 8000d18:	5c1b      	ldrb	r3, [r3, r0]
 8000d1a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d1c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	202c      	movs	r0, #44	; 0x2c
 8000d22:	5c1b      	ldrb	r3, [r3, r0]
 8000d24:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d26:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d2c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000d34:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d3c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d4a:	23c2      	movs	r3, #194	; 0xc2
 8000d4c:	33ff      	adds	r3, #255	; 0xff
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d00b      	beq.n	8000d6a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68d9      	ldr	r1, [r3, #12]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2221      	movs	r2, #33	; 0x21
 8000d6e:	5c9b      	ldrb	r3, [r3, r2]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d11a      	bne.n	8000daa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2220      	movs	r2, #32
 8000d78:	5c9b      	ldrb	r3, [r3, r2]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d109      	bne.n	8000d92 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	0249      	lsls	r1, r1, #9
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	e00b      	b.n	8000daa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d96:	2220      	movs	r2, #32
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	2201      	movs	r2, #1
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d11f      	bne.n	8000df2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	492a      	ldr	r1, [pc, #168]	; (8000e68 <HAL_ADC_Init+0x2e4>)
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6919      	ldr	r1, [r3, #16]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000dd0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000dd6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2101      	movs	r1, #1
 8000dec:	430a      	orrs	r2, r1
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	e00e      	b.n	8000e10 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d107      	bne.n	8000e10 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2107      	movs	r1, #7
 8000e1c:	438a      	bics	r2, r1
 8000e1e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6959      	ldr	r1, [r3, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	4393      	bics	r3, r2
 8000e40:	2201      	movs	r2, #1
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	fffffefd 	.word	0xfffffefd
 8000e58:	40012708 	.word	0x40012708
 8000e5c:	ffc3ffff 	.word	0xffc3ffff
 8000e60:	fdffffff 	.word	0xfdffffff
 8000e64:	fffe0219 	.word	0xfffe0219
 8000e68:	fffffc03 	.word	0xfffffc03

08000e6c <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e78:	2317      	movs	r3, #23
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2204      	movs	r2, #4
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d15e      	bne.n	8000f4a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2250      	movs	r2, #80	; 0x50
 8000e90:	5c9b      	ldrb	r3, [r3, r2]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d101      	bne.n	8000e9a <HAL_ADC_Start_DMA+0x2e>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e05e      	b.n	8000f58 <HAL_ADC_Start_DMA+0xec>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2250      	movs	r2, #80	; 0x50
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2101      	movs	r1, #1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d007      	beq.n	8000eca <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000eba:	2317      	movs	r3, #23
 8000ebc:	18fc      	adds	r4, r7, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 f9af 	bl	8001224 <ADC_Enable>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000eca:	2317      	movs	r3, #23
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d13e      	bne.n	8000f52 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed8:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <HAL_ADC_Start_DMA+0xf4>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	0052      	lsls	r2, r2, #1
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2250      	movs	r2, #80	; 0x50
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_ADC_Start_DMA+0xf8>)
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_ADC_Start_DMA+0xfc>)
 8000f02:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_ADC_Start_DMA+0x100>)
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	221c      	movs	r2, #28
 8000f12:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2110      	movs	r1, #16
 8000f20:	430a      	orrs	r2, r1
 8000f22:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3340      	adds	r3, #64	; 0x40
 8000f2e:	0019      	movs	r1, r3
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f000 fbd0 	bl	80016d8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2104      	movs	r1, #4
 8000f44:	430a      	orrs	r2, r1
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	e003      	b.n	8000f52 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f4a:	2317      	movs	r3, #23
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	2202      	movs	r2, #2
 8000f50:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f52:	2317      	movs	r3, #23
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	781b      	ldrb	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b007      	add	sp, #28
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	fffff0fe 	.word	0xfffff0fe
 8000f64:	080012e5 	.word	0x080012e5
 8000f68:	08001399 	.word	0x08001399
 8000f6c:	080013b7 	.word	0x080013b7

08000f70 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2204      	movs	r2, #4
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d106      	bne.n	8000f94 <HAL_ADC_IRQHandler+0x24>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d00d      	beq.n	8000fb0 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d154      	bne.n	800104c <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d14d      	bne.n	800104c <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d106      	bne.n	8000fc8 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	23c0      	movs	r3, #192	; 0xc0
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d12e      	bne.n	8001034 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2220      	movs	r2, #32
 8000fda:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d129      	bne.n	8001034 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d122      	bne.n	8001034 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d110      	bne.n	800101c <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	210c      	movs	r1, #12
 8001006:	438a      	bics	r2, r1
 8001008:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100e:	4a35      	ldr	r2, [pc, #212]	; (80010e4 <HAL_ADC_IRQHandler+0x174>)
 8001010:	4013      	ands	r3, r2
 8001012:	2201      	movs	r2, #1
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
 800101a:	e00b      	b.n	8001034 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001020:	2220      	movs	r2, #32
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	2201      	movs	r2, #1
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff fa30 	bl	800049c <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d003      	beq.n	800104c <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	220c      	movs	r2, #12
 800104a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	4013      	ands	r3, r2
 8001056:	2b80      	cmp	r3, #128	; 0x80
 8001058:	d115      	bne.n	8001086 <HAL_ADC_IRQHandler+0x116>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	4013      	ands	r3, r2
 8001064:	2b80      	cmp	r3, #128	; 0x80
 8001066:	d10e      	bne.n	8001086 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	0252      	lsls	r2, r2, #9
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0018      	movs	r0, r3
 800107a:	f000 f83d 	bl	80010f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2210      	movs	r2, #16
 800108e:	4013      	ands	r3, r2
 8001090:	2b10      	cmp	r3, #16
 8001092:	d123      	bne.n	80010dc <HAL_ADC_IRQHandler+0x16c>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2210      	movs	r2, #16
 800109c:	4013      	ands	r3, r2
 800109e:	2b10      	cmp	r3, #16
 80010a0:	d11c      	bne.n	80010dc <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10d      	bne.n	80010d4 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010bc:	2202      	movs	r2, #2
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2210      	movs	r2, #16
 80010ca:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 f81a 	bl	8001108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2210      	movs	r2, #16
 80010da:	601a      	str	r2, [r3, #0]
  }
  
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	fffffefe 	.word	0xfffffefe

080010e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2250      	movs	r2, #80	; 0x50
 8001126:	5c9b      	ldrb	r3, [r3, r2]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x18>
 800112c:	2302      	movs	r3, #2
 800112e:	e06c      	b.n	800120a <HAL_ADC_ConfigChannel+0xf2>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2250      	movs	r2, #80	; 0x50
 8001134:	2101      	movs	r1, #1
 8001136:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2204      	movs	r2, #4
 8001140:	4013      	ands	r3, r2
 8001142:	d00b      	beq.n	800115c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001148:	2220      	movs	r2, #32
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2250      	movs	r2, #80	; 0x50
 8001154:	2100      	movs	r1, #0
 8001156:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e056      	b.n	800120a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a2c      	ldr	r2, [pc, #176]	; (8001214 <HAL_ADC_ConfigChannel+0xfc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d028      	beq.n	80011b8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	035b      	lsls	r3, r3, #13
 8001172:	0b5a      	lsrs	r2, r3, #13
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	02db      	lsls	r3, r3, #11
 8001184:	4013      	ands	r3, r2
 8001186:	d009      	beq.n	800119c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_ADC_ConfigChannel+0x100>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <HAL_ADC_ConfigChannel+0x100>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0409      	lsls	r1, r1, #16
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001196:	200a      	movs	r0, #10
 8001198:	f000 f928 	bl	80013ec <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	029b      	lsls	r3, r3, #10
 80011a4:	4013      	ands	r3, r2
 80011a6:	d02b      	beq.n	8001200 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_ADC_ConfigChannel+0x100>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_ADC_ConfigChannel+0x100>)
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	03c9      	lsls	r1, r1, #15
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e023      	b.n	8001200 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	035b      	lsls	r3, r3, #13
 80011c4:	0b5b      	lsrs	r3, r3, #13
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	400a      	ands	r2, r1
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	02db      	lsls	r3, r3, #11
 80011d8:	4013      	ands	r3, r2
 80011da:	d005      	beq.n	80011e8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_ADC_ConfigChannel+0x100>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_ADC_ConfigChannel+0x100>)
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <HAL_ADC_ConfigChannel+0x104>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	029b      	lsls	r3, r3, #10
 80011f0:	4013      	ands	r3, r2
 80011f2:	d005      	beq.n	8001200 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_ADC_ConfigChannel+0x100>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_ADC_ConfigChannel+0x100>)
 80011fa:	4909      	ldr	r1, [pc, #36]	; (8001220 <HAL_ADC_ConfigChannel+0x108>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2250      	movs	r2, #80	; 0x50
 8001204:	2100      	movs	r1, #0
 8001206:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	00001001 	.word	0x00001001
 8001218:	40012708 	.word	0x40012708
 800121c:	ff7fffff 	.word	0xff7fffff
 8001220:	ffbfffff 	.word	0xffbfffff

08001224 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2203      	movs	r2, #3
 8001238:	4013      	ands	r3, r2
 800123a:	2b01      	cmp	r3, #1
 800123c:	d108      	bne.n	8001250 <ADC_Enable+0x2c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	4013      	ands	r3, r2
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <ADC_Enable+0x2c>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <ADC_Enable+0x2e>
 8001250:	2300      	movs	r3, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d13f      	bne.n	80012d6 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <ADC_Enable+0xbc>)
 800125e:	4013      	ands	r3, r2
 8001260:	d00d      	beq.n	800127e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	2210      	movs	r2, #16
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	2201      	movs	r2, #1
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e02c      	b.n	80012d8 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800128e:	2001      	movs	r0, #1
 8001290:	f000 f8ac 	bl	80013ec <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001294:	f7ff fc6c 	bl	8000b70 <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800129c:	e014      	b.n	80012c8 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800129e:	f7ff fc67 	bl	8000b70 <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b0a      	cmp	r3, #10
 80012aa:	d90d      	bls.n	80012c8 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b0:	2210      	movs	r2, #16
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	2201      	movs	r2, #1
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e007      	b.n	80012d8 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d1e3      	bne.n	800129e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b004      	add	sp, #16
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	80000017 	.word	0x80000017

080012e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f6:	2250      	movs	r2, #80	; 0x50
 80012f8:	4013      	ands	r3, r2
 80012fa:	d141      	bne.n	8001380 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	431a      	orrs	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	23c0      	movs	r3, #192	; 0xc0
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d12e      	bne.n	8001376 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2220      	movs	r2, #32
 800131c:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800131e:	2b00      	cmp	r3, #0
 8001320:	d129      	bne.n	8001376 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2208      	movs	r2, #8
 800132a:	4013      	ands	r3, r2
 800132c:	2b08      	cmp	r3, #8
 800132e:	d122      	bne.n	8001376 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2204      	movs	r2, #4
 8001338:	4013      	ands	r3, r2
 800133a:	d110      	bne.n	800135e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	210c      	movs	r1, #12
 8001348:	438a      	bics	r2, r1
 800134a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	4a10      	ldr	r2, [pc, #64]	; (8001394 <ADC_DMAConvCplt+0xb0>)
 8001352:	4013      	ands	r3, r2
 8001354:	2201      	movs	r2, #1
 8001356:	431a      	orrs	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	655a      	str	r2, [r3, #84]	; 0x54
 800135c:	e00b      	b.n	8001376 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001362:	2220      	movs	r2, #32
 8001364:	431a      	orrs	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	2201      	movs	r2, #1
 8001370:	431a      	orrs	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff f88f 	bl	800049c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800137e:	e005      	b.n	800138c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	0010      	movs	r0, r2
 800138a:	4798      	blx	r3
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b004      	add	sp, #16
 8001392:	bd80      	pop	{r7, pc}
 8001394:	fffffefe 	.word	0xfffffefe

08001398 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fe9d 	bl	80010e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b004      	add	sp, #16
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	431a      	orrs	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	2204      	movs	r2, #4
 80013d6:	431a      	orrs	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	0018      	movs	r0, r3
 80013e0:	f7ff fe92 	bl	8001108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b004      	add	sp, #16
 80013ea:	bd80      	pop	{r7, pc}

080013ec <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <ADC_DelayMicroSecond+0x38>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	490b      	ldr	r1, [pc, #44]	; (8001428 <ADC_DelayMicroSecond+0x3c>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7fe fe84 	bl	8000108 <__udivsi3>
 8001400:	0003      	movs	r3, r0
 8001402:	001a      	movs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4353      	muls	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800140a:	e002      	b.n	8001412 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3b01      	subs	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f9      	bne.n	800140c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b004      	add	sp, #16
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	20000000 	.word	0x20000000
 8001428:	000f4240 	.word	0x000f4240

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	0002      	movs	r2, r0
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b7f      	cmp	r3, #127	; 0x7f
 800143e:	d809      	bhi.n	8001454 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	001a      	movs	r2, r3
 8001446:	231f      	movs	r3, #31
 8001448:	401a      	ands	r2, r3
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_EnableIRQ+0x30>)
 800144c:	2101      	movs	r1, #1
 800144e:	4091      	lsls	r1, r2
 8001450:	000a      	movs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
  }
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	0002      	movs	r2, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b7f      	cmp	r3, #127	; 0x7f
 8001474:	d828      	bhi.n	80014c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001476:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <__NVIC_SetPriority+0xd4>)
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b25b      	sxtb	r3, r3
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	33c0      	adds	r3, #192	; 0xc0
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	589b      	ldr	r3, [r3, r2]
 8001486:	1dfa      	adds	r2, r7, #7
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	0011      	movs	r1, r2
 800148c:	2203      	movs	r2, #3
 800148e:	400a      	ands	r2, r1
 8001490:	00d2      	lsls	r2, r2, #3
 8001492:	21ff      	movs	r1, #255	; 0xff
 8001494:	4091      	lsls	r1, r2
 8001496:	000a      	movs	r2, r1
 8001498:	43d2      	mvns	r2, r2
 800149a:	401a      	ands	r2, r3
 800149c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	019b      	lsls	r3, r3, #6
 80014a2:	22ff      	movs	r2, #255	; 0xff
 80014a4:	401a      	ands	r2, r3
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	0018      	movs	r0, r3
 80014ac:	2303      	movs	r3, #3
 80014ae:	4003      	ands	r3, r0
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b4:	481f      	ldr	r0, [pc, #124]	; (8001534 <__NVIC_SetPriority+0xd4>)
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	430a      	orrs	r2, r1
 80014c0:	33c0      	adds	r3, #192	; 0xc0
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014c6:	e031      	b.n	800152c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c8:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <__NVIC_SetPriority+0xd8>)
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	0019      	movs	r1, r3
 80014d0:	230f      	movs	r3, #15
 80014d2:	400b      	ands	r3, r1
 80014d4:	3b08      	subs	r3, #8
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3306      	adds	r3, #6
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	18d3      	adds	r3, r2, r3
 80014de:	3304      	adds	r3, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1dfa      	adds	r2, r7, #7
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	0011      	movs	r1, r2
 80014e8:	2203      	movs	r2, #3
 80014ea:	400a      	ands	r2, r1
 80014ec:	00d2      	lsls	r2, r2, #3
 80014ee:	21ff      	movs	r1, #255	; 0xff
 80014f0:	4091      	lsls	r1, r2
 80014f2:	000a      	movs	r2, r1
 80014f4:	43d2      	mvns	r2, r2
 80014f6:	401a      	ands	r2, r3
 80014f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	22ff      	movs	r2, #255	; 0xff
 8001500:	401a      	ands	r2, r3
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	0018      	movs	r0, r3
 8001508:	2303      	movs	r3, #3
 800150a:	4003      	ands	r3, r0
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <__NVIC_SetPriority+0xd8>)
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	001c      	movs	r4, r3
 8001518:	230f      	movs	r3, #15
 800151a:	4023      	ands	r3, r4
 800151c:	3b08      	subs	r3, #8
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	430a      	orrs	r2, r1
 8001522:	3306      	adds	r3, #6
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	18c3      	adds	r3, r0, r3
 8001528:	3304      	adds	r3, #4
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b003      	add	sp, #12
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1e5a      	subs	r2, r3, #1
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	045b      	lsls	r3, r3, #17
 800154c:	429a      	cmp	r2, r3
 800154e:	d301      	bcc.n	8001554 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001550:	2301      	movs	r3, #1
 8001552:	e010      	b.n	8001576 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <SysTick_Config+0x44>)
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	3a01      	subs	r2, #1
 800155a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155c:	2301      	movs	r3, #1
 800155e:	425b      	negs	r3, r3
 8001560:	2103      	movs	r1, #3
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff ff7c 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x44>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x44>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	210f      	movs	r1, #15
 8001590:	187b      	adds	r3, r7, r1
 8001592:	1c02      	adds	r2, r0, #0
 8001594:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	187b      	adds	r3, r7, r1
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b25b      	sxtb	r3, r3
 800159e:	0011      	movs	r1, r2
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	0002      	movs	r2, r0
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff ff33 	bl	800142c <__NVIC_EnableIRQ>
}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff ffaf 	bl	800153c <SysTick_Config>
 80015de:	0003      	movs	r3, r0
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e061      	b.n	80016be <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <HAL_DMA_Init+0xe0>)
 8001600:	4694      	mov	ip, r2
 8001602:	4463      	add	r3, ip
 8001604:	2114      	movs	r1, #20
 8001606:	0018      	movs	r0, r3
 8001608:	f7fe fd7e 	bl	8000108 <__udivsi3>
 800160c:	0003      	movs	r3, r0
 800160e:	009a      	lsls	r2, r3, #2
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a2d      	ldr	r2, [pc, #180]	; (80016cc <HAL_DMA_Init+0xe4>)
 8001618:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2225      	movs	r2, #37	; 0x25
 800161e:	2102      	movs	r1, #2
 8001620:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4a28      	ldr	r2, [pc, #160]	; (80016d0 <HAL_DMA_Init+0xe8>)
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800163a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	01db      	lsls	r3, r3, #7
 8001670:	429a      	cmp	r2, r3
 8001672:	d018      	beq.n	80016a6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_DMA_Init+0xec>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	211c      	movs	r1, #28
 800167e:	400b      	ands	r3, r1
 8001680:	210f      	movs	r1, #15
 8001682:	4099      	lsls	r1, r3
 8001684:	000b      	movs	r3, r1
 8001686:	43d9      	mvns	r1, r3
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_DMA_Init+0xec>)
 800168a:	400a      	ands	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_DMA_Init+0xec>)
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	201c      	movs	r0, #28
 800169c:	4003      	ands	r3, r0
 800169e:	409a      	lsls	r2, r3
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_DMA_Init+0xec>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2225      	movs	r2, #37	; 0x25
 80016b0:	2101      	movs	r1, #1
 80016b2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2224      	movs	r2, #36	; 0x24
 80016b8:	2100      	movs	r1, #0
 80016ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	bffdfff8 	.word	0xbffdfff8
 80016cc:	40020000 	.word	0x40020000
 80016d0:	ffff800f 	.word	0xffff800f
 80016d4:	400200a8 	.word	0x400200a8

080016d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e6:	2317      	movs	r3, #23
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2224      	movs	r2, #36	; 0x24
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_DMA_Start_IT+0x24>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e04f      	b.n	800179c <HAL_DMA_Start_IT+0xc4>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2224      	movs	r2, #36	; 0x24
 8001700:	2101      	movs	r1, #1
 8001702:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2225      	movs	r2, #37	; 0x25
 8001708:	5c9b      	ldrb	r3, [r3, r2]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d13a      	bne.n	8001786 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2225      	movs	r2, #37	; 0x25
 8001714:	2102      	movs	r1, #2
 8001716:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	438a      	bics	r2, r1
 800172c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 f8e3 	bl	8001900 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	2b00      	cmp	r3, #0
 8001740:	d008      	beq.n	8001754 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	210e      	movs	r1, #14
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e00f      	b.n	8001774 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2104      	movs	r1, #4
 8001760:	438a      	bics	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	210a      	movs	r1, #10
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e007      	b.n	8001796 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2224      	movs	r2, #36	; 0x24
 800178a:	2100      	movs	r1, #0
 800178c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800178e:	2317      	movs	r3, #23
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001796:	2317      	movs	r3, #23
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b006      	add	sp, #24
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c0:	221c      	movs	r2, #28
 80017c2:	4013      	ands	r3, r2
 80017c4:	2204      	movs	r2, #4
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	d026      	beq.n	800181e <HAL_DMA_IRQHandler+0x7a>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2204      	movs	r2, #4
 80017d4:	4013      	ands	r3, r2
 80017d6:	d022      	beq.n	800181e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2220      	movs	r2, #32
 80017e0:	4013      	ands	r3, r2
 80017e2:	d107      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2104      	movs	r1, #4
 80017f0:	438a      	bics	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	221c      	movs	r2, #28
 80017fa:	401a      	ands	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2104      	movs	r1, #4
 8001802:	4091      	lsls	r1, r2
 8001804:	000a      	movs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	2b00      	cmp	r3, #0
 800180e:	d100      	bne.n	8001812 <HAL_DMA_IRQHandler+0x6e>
 8001810:	e071      	b.n	80018f6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	0010      	movs	r0, r2
 800181a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800181c:	e06b      	b.n	80018f6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	221c      	movs	r2, #28
 8001824:	4013      	ands	r3, r2
 8001826:	2202      	movs	r2, #2
 8001828:	409a      	lsls	r2, r3
 800182a:	0013      	movs	r3, r2
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4013      	ands	r3, r2
 8001830:	d02d      	beq.n	800188e <HAL_DMA_IRQHandler+0xea>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2202      	movs	r2, #2
 8001836:	4013      	ands	r3, r2
 8001838:	d029      	beq.n	800188e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2220      	movs	r2, #32
 8001842:	4013      	ands	r3, r2
 8001844:	d10b      	bne.n	800185e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	210a      	movs	r1, #10
 8001852:	438a      	bics	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2225      	movs	r2, #37	; 0x25
 800185a:	2101      	movs	r1, #1
 800185c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	221c      	movs	r2, #28
 8001864:	401a      	ands	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	2102      	movs	r1, #2
 800186c:	4091      	lsls	r1, r2
 800186e:	000a      	movs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2224      	movs	r2, #36	; 0x24
 8001876:	2100      	movs	r1, #0
 8001878:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	2b00      	cmp	r3, #0
 8001880:	d039      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	0010      	movs	r0, r2
 800188a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800188c:	e033      	b.n	80018f6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	221c      	movs	r2, #28
 8001894:	4013      	ands	r3, r2
 8001896:	2208      	movs	r2, #8
 8001898:	409a      	lsls	r2, r3
 800189a:	0013      	movs	r3, r2
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4013      	ands	r3, r2
 80018a0:	d02a      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x154>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2208      	movs	r2, #8
 80018a6:	4013      	ands	r3, r2
 80018a8:	d026      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	210e      	movs	r1, #14
 80018b6:	438a      	bics	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	221c      	movs	r2, #28
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2101      	movs	r1, #1
 80018c8:	4091      	lsls	r1, r2
 80018ca:	000a      	movs	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2225      	movs	r2, #37	; 0x25
 80018d8:	2101      	movs	r1, #1
 80018da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2224      	movs	r2, #36	; 0x24
 80018e0:	2100      	movs	r1, #0
 80018e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	0010      	movs	r0, r2
 80018f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46c0      	nop			; (mov r8, r8)
}
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b004      	add	sp, #16
 80018fe:	bd80      	pop	{r7, pc}

08001900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	221c      	movs	r2, #28
 8001914:	401a      	ands	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	2101      	movs	r1, #1
 800191c:	4091      	lsls	r1, r2
 800191e:	000a      	movs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b10      	cmp	r3, #16
 8001930:	d108      	bne.n	8001944 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001942:	e007      	b.n	8001954 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	60da      	str	r2, [r3, #12]
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b004      	add	sp, #16
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001972:	e14f      	b.n	8001c14 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4091      	lsls	r1, r2
 800197e:	000a      	movs	r2, r1
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d100      	bne.n	800198c <HAL_GPIO_Init+0x30>
 800198a:	e140      	b.n	8001c0e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d00b      	beq.n	80019ac <HAL_GPIO_Init+0x50>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d007      	beq.n	80019ac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a0:	2b11      	cmp	r3, #17
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b12      	cmp	r3, #18
 80019aa:	d130      	bne.n	8001a0e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	409a      	lsls	r2, r3
 80019ba:	0013      	movs	r3, r2
 80019bc:	43da      	mvns	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	409a      	lsls	r2, r3
 80019ce:	0013      	movs	r3, r2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e2:	2201      	movs	r2, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	2201      	movs	r2, #1
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0xf2>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b12      	cmp	r3, #18
 8001a4c:	d123      	bne.n	8001a96 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	58d3      	ldr	r3, [r2, r3]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2207      	movs	r2, #7
 8001a60:	4013      	ands	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	409a      	lsls	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2107      	movs	r1, #7
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	6939      	ldr	r1, [r7, #16]
 8001a94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	055b      	lsls	r3, r3, #21
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d100      	bne.n	8001ad8 <HAL_GPIO_Init+0x17c>
 8001ad6:	e09a      	b.n	8001c0e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad8:	4b54      	ldr	r3, [pc, #336]	; (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae4:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_GPIO_Init+0x2d4>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	589b      	ldr	r3, [r3, r2]
 8001af0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2203      	movs	r2, #3
 8001af6:	4013      	ands	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	409a      	lsls	r2, r3
 8001afe:	0013      	movs	r3, r2
 8001b00:	43da      	mvns	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	23a0      	movs	r3, #160	; 0xa0
 8001b0c:	05db      	lsls	r3, r3, #23
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d019      	beq.n	8001b46 <HAL_GPIO_Init+0x1ea>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <HAL_GPIO_Init+0x2d8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0x1e6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <HAL_GPIO_Init+0x2dc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00d      	beq.n	8001b3e <HAL_GPIO_Init+0x1e2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a45      	ldr	r2, [pc, #276]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d007      	beq.n	8001b3a <HAL_GPIO_Init+0x1de>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a44      	ldr	r2, [pc, #272]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_GPIO_Init+0x1da>
 8001b32:	2305      	movs	r3, #5
 8001b34:	e008      	b.n	8001b48 <HAL_GPIO_Init+0x1ec>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x1ec>
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e004      	b.n	8001b48 <HAL_GPIO_Init+0x1ec>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_Init+0x1ec>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x1ec>
 8001b46:	2300      	movs	r3, #0
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	4093      	lsls	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b58:	4935      	ldr	r1, [pc, #212]	; (8001c30 <HAL_GPIO_Init+0x2d4>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	035b      	lsls	r3, r3, #13
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43da      	mvns	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	039b      	lsls	r3, r3, #14
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	1e13      	subs	r3, r2, #0
 8001c1e:	d000      	beq.n	8001c22 <HAL_GPIO_Init+0x2c6>
 8001c20:	e6a8      	b.n	8001974 <HAL_GPIO_Init+0x18>
  }
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b006      	add	sp, #24
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	50000400 	.word	0x50000400
 8001c38:	50000800 	.word	0x50000800
 8001c3c:	50000c00 	.word	0x50000c00
 8001c40:	50001c00 	.word	0x50001c00
 8001c44:	40010400 	.word	0x40010400

08001c48 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	0008      	movs	r0, r1
 8001c52:	0011      	movs	r1, r2
 8001c54:	1cbb      	adds	r3, r7, #2
 8001c56:	1c02      	adds	r2, r0, #0
 8001c58:	801a      	strh	r2, [r3, #0]
 8001c5a:	1c7b      	adds	r3, r7, #1
 8001c5c:	1c0a      	adds	r2, r1, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c60:	1c7b      	adds	r3, r7, #1
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c68:	1cbb      	adds	r3, r7, #2
 8001c6a:	881a      	ldrh	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c70:	e003      	b.n	8001c7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c72:	1cbb      	adds	r3, r7, #2
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	000a      	movs	r2, r1
 8001c8c:	1cbb      	adds	r3, r7, #2
 8001c8e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c96:	1cbb      	adds	r3, r7, #2
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	041a      	lsls	r2, r3, #16
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	1cb9      	adds	r1, r7, #2
 8001ca6:	8809      	ldrh	r1, [r1, #0]
 8001ca8:	400b      	ands	r3, r1
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b004      	add	sp, #16
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f000 fbaf 	bl	800242a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ccc:	4bcf      	ldr	r3, [pc, #828]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	220c      	movs	r2, #12
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd6:	4bcd      	ldr	r3, [pc, #820]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	025b      	lsls	r3, r3, #9
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d100      	bne.n	8001cee <HAL_RCC_OscConfig+0x36>
 8001cec:	e07e      	b.n	8001dec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d007      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d112      	bne.n	8001d20 <HAL_RCC_OscConfig+0x68>
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	025b      	lsls	r3, r3, #9
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10d      	bne.n	8001d20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	4bc1      	ldr	r3, [pc, #772]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	029b      	lsls	r3, r3, #10
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCC_OscConfig+0x5a>
 8001d10:	e06b      	b.n	8001dea <HAL_RCC_OscConfig+0x132>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d167      	bne.n	8001dea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f000 fb85 	bl	800242a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	025b      	lsls	r3, r3, #9
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_OscConfig+0x84>
 8001d2c:	4bb7      	ldr	r3, [pc, #732]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4bb6      	ldr	r3, [pc, #728]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0249      	lsls	r1, r1, #9
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e027      	b.n	8001d8c <HAL_RCC_OscConfig+0xd4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	23a0      	movs	r3, #160	; 0xa0
 8001d42:	02db      	lsls	r3, r3, #11
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d10e      	bne.n	8001d66 <HAL_RCC_OscConfig+0xae>
 8001d48:	4bb0      	ldr	r3, [pc, #704]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4baf      	ldr	r3, [pc, #700]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	02c9      	lsls	r1, r1, #11
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	4bad      	ldr	r3, [pc, #692]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4bac      	ldr	r3, [pc, #688]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	0249      	lsls	r1, r1, #9
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e012      	b.n	8001d8c <HAL_RCC_OscConfig+0xd4>
 8001d66:	4ba9      	ldr	r3, [pc, #676]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4ba8      	ldr	r3, [pc, #672]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d6c:	49a8      	ldr	r1, [pc, #672]	; (8002010 <HAL_RCC_OscConfig+0x358>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	4ba6      	ldr	r3, [pc, #664]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	025b      	lsls	r3, r3, #9
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4ba2      	ldr	r3, [pc, #648]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4ba1      	ldr	r3, [pc, #644]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001d86:	49a3      	ldr	r1, [pc, #652]	; (8002014 <HAL_RCC_OscConfig+0x35c>)
 8001d88:	400a      	ands	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe feec 	bl	8000b70 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d9c:	e009      	b.n	8001db2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9e:	f7fe fee7 	bl	8000b70 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	; 0x64
 8001daa:	d902      	bls.n	8001db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f000 fb3c 	bl	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001db2:	4b96      	ldr	r3, [pc, #600]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	029b      	lsls	r3, r3, #10
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d0ef      	beq.n	8001d9e <HAL_RCC_OscConfig+0xe6>
 8001dbe:	e015      	b.n	8001dec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fed6 	bl	8000b70 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dca:	f7fe fed1 	bl	8000b70 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b64      	cmp	r3, #100	; 0x64
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e326      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ddc:	4b8b      	ldr	r3, [pc, #556]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	029b      	lsls	r3, r3, #10
 8001de4:	4013      	ands	r3, r2
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x112>
 8001de8:	e000      	b.n	8001dec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d100      	bne.n	8001df8 <HAL_RCC_OscConfig+0x140>
 8001df6:	e08b      	b.n	8001f10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d13e      	bne.n	8001e88 <HAL_RCC_OscConfig+0x1d0>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d13b      	bne.n	8001e88 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e10:	4b7e      	ldr	r3, [pc, #504]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2204      	movs	r2, #4
 8001e16:	4013      	ands	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_RCC_OscConfig+0x16c>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e302      	b.n	800242a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b79      	ldr	r3, [pc, #484]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a7b      	ldr	r2, [pc, #492]	; (8002018 <HAL_RCC_OscConfig+0x360>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	021a      	lsls	r2, r3, #8
 8001e34:	4b75      	ldr	r3, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e3a:	4b74      	ldr	r3, [pc, #464]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2209      	movs	r2, #9
 8001e40:	4393      	bics	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	4b71      	ldr	r3, [pc, #452]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e4c:	f000 fc40 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8001e50:	0001      	movs	r1, r0
 8001e52:	4b6e      	ldr	r3, [pc, #440]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	220f      	movs	r2, #15
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	4a6f      	ldr	r2, [pc, #444]	; (800201c <HAL_RCC_OscConfig+0x364>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	000a      	movs	r2, r1
 8001e62:	40da      	lsrs	r2, r3
 8001e64:	4b6e      	ldr	r3, [pc, #440]	; (8002020 <HAL_RCC_OscConfig+0x368>)
 8001e66:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001e68:	4b6e      	ldr	r3, [pc, #440]	; (8002024 <HAL_RCC_OscConfig+0x36c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2513      	movs	r5, #19
 8001e6e:	197c      	adds	r4, r7, r5
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7fe fe37 	bl	8000ae4 <HAL_InitTick>
 8001e76:	0003      	movs	r3, r0
 8001e78:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e7a:	197b      	adds	r3, r7, r5
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d046      	beq.n	8001f10 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001e82:	197b      	adds	r3, r7, r5
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	e2d0      	b.n	800242a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d027      	beq.n	8001ede <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2209      	movs	r2, #9
 8001e94:	4393      	bics	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	4b5c      	ldr	r3, [pc, #368]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fe66 	bl	8000b70 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7fe fe61 	bl	8000b70 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e2b6      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d0f1      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a53      	ldr	r2, [pc, #332]	; (8002018 <HAL_RCC_OscConfig+0x360>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	021a      	lsls	r2, r3, #8
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	e018      	b.n	8001f10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ede:	4b4b      	ldr	r3, [pc, #300]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	438a      	bics	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fe41 	bl	8000b70 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fe3c 	bl	8000b70 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e291      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d1f1      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	4013      	ands	r3, r2
 8001f18:	d100      	bne.n	8001f1c <HAL_RCC_OscConfig+0x264>
 8001f1a:	e0a1      	b.n	8002060 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d140      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x282>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e277      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a3a      	ldr	r2, [pc, #232]	; (8002028 <HAL_RCC_OscConfig+0x370>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	0a19      	lsrs	r1, r3, #8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	061a      	lsls	r2, r3, #24
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	0b5b      	lsrs	r3, r3, #13
 8001f68:	3301      	adds	r3, #1
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	0212      	lsls	r2, r2, #8
 8001f6e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	210f      	movs	r1, #15
 8001f78:	400b      	ands	r3, r1
 8001f7a:	4928      	ldr	r1, [pc, #160]	; (800201c <HAL_RCC_OscConfig+0x364>)
 8001f7c:	5ccb      	ldrb	r3, [r1, r3]
 8001f7e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x368>)
 8001f82:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x36c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2513      	movs	r5, #19
 8001f8a:	197c      	adds	r4, r7, r5
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7fe fda9 	bl	8000ae4 <HAL_InitTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f96:	197b      	adds	r3, r7, r5
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d060      	beq.n	8002060 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001f9e:	197b      	adds	r3, r7, r5
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	e242      	b.n	800242a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03f      	beq.n	800202c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	0049      	lsls	r1, r1, #1
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe fdd9 	bl	8000b70 <HAL_GetTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc4:	f7fe fdd4 	bl	8000b70 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e229      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_RCC_OscConfig+0x370>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	0a19      	lsrs	r1, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	061a      	lsls	r2, r3, #24
 8002004:	4b01      	ldr	r3, [pc, #4]	; (800200c <HAL_RCC_OscConfig+0x354>)
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	e029      	b.n	8002060 <HAL_RCC_OscConfig+0x3a8>
 800200c:	40021000 	.word	0x40021000
 8002010:	fffeffff 	.word	0xfffeffff
 8002014:	fffbffff 	.word	0xfffbffff
 8002018:	ffffe0ff 	.word	0xffffe0ff
 800201c:	08002d0c 	.word	0x08002d0c
 8002020:	20000000 	.word	0x20000000
 8002024:	20000004 	.word	0x20000004
 8002028:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800202c:	4bbd      	ldr	r3, [pc, #756]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4bbc      	ldr	r3, [pc, #752]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002032:	49bd      	ldr	r1, [pc, #756]	; (8002328 <HAL_RCC_OscConfig+0x670>)
 8002034:	400a      	ands	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7fe fd9a 	bl	8000b70 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002042:	f7fe fd95 	bl	8000b70 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1ea      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002054:	4bb3      	ldr	r3, [pc, #716]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2208      	movs	r2, #8
 8002066:	4013      	ands	r3, r2
 8002068:	d036      	beq.n	80020d8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d019      	beq.n	80020a6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4bac      	ldr	r3, [pc, #688]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002076:	4bab      	ldr	r3, [pc, #684]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002078:	2101      	movs	r1, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe fd77 	bl	8000b70 <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002088:	f7fe fd72 	bl	8000b70 <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1c7      	b.n	800242a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800209a:	4ba2      	ldr	r3, [pc, #648]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 800209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d0f1      	beq.n	8002088 <HAL_RCC_OscConfig+0x3d0>
 80020a4:	e018      	b.n	80020d8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a6:	4b9f      	ldr	r3, [pc, #636]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80020a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020aa:	4b9e      	ldr	r3, [pc, #632]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80020ac:	2101      	movs	r1, #1
 80020ae:	438a      	bics	r2, r1
 80020b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7fe fd5d 	bl	8000b70 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020bc:	f7fe fd58 	bl	8000b70 <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1ad      	b.n	800242a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020ce:	4b95      	ldr	r3, [pc, #596]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80020d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d1f1      	bne.n	80020bc <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2204      	movs	r2, #4
 80020de:	4013      	ands	r3, r2
 80020e0:	d100      	bne.n	80020e4 <HAL_RCC_OscConfig+0x42c>
 80020e2:	e0ae      	b.n	8002242 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e4:	2027      	movs	r0, #39	; 0x27
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ec:	4b8d      	ldr	r3, [pc, #564]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80020ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	055b      	lsls	r3, r3, #21
 80020f4:	4013      	ands	r3, r2
 80020f6:	d109      	bne.n	800210c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	4b8a      	ldr	r3, [pc, #552]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80020fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020fc:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	0549      	lsls	r1, r1, #21
 8002102:	430a      	orrs	r2, r1
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002106:	183b      	adds	r3, r7, r0
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b87      	ldr	r3, [pc, #540]	; (800232c <HAL_RCC_OscConfig+0x674>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d11a      	bne.n	800214e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002118:	4b84      	ldr	r3, [pc, #528]	; (800232c <HAL_RCC_OscConfig+0x674>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b83      	ldr	r3, [pc, #524]	; (800232c <HAL_RCC_OscConfig+0x674>)
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	0049      	lsls	r1, r1, #1
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fd23 	bl	8000b70 <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002130:	f7fe fd1e 	bl	8000b70 <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e173      	b.n	800242a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b7a      	ldr	r3, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x674>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4013      	ands	r3, r2
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	429a      	cmp	r2, r3
 8002158:	d107      	bne.n	800216a <HAL_RCC_OscConfig+0x4b2>
 800215a:	4b72      	ldr	r3, [pc, #456]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 800215c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800215e:	4b71      	ldr	r3, [pc, #452]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	430a      	orrs	r2, r1
 8002166:	651a      	str	r2, [r3, #80]	; 0x50
 8002168:	e031      	b.n	80021ce <HAL_RCC_OscConfig+0x516>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x4d4>
 8002172:	4b6c      	ldr	r3, [pc, #432]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002176:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002178:	496b      	ldr	r1, [pc, #428]	; (8002328 <HAL_RCC_OscConfig+0x670>)
 800217a:	400a      	ands	r2, r1
 800217c:	651a      	str	r2, [r3, #80]	; 0x50
 800217e:	4b69      	ldr	r3, [pc, #420]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002182:	4b68      	ldr	r3, [pc, #416]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002184:	496a      	ldr	r1, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x678>)
 8002186:	400a      	ands	r2, r1
 8002188:	651a      	str	r2, [r3, #80]	; 0x50
 800218a:	e020      	b.n	80021ce <HAL_RCC_OscConfig+0x516>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	23a0      	movs	r3, #160	; 0xa0
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	429a      	cmp	r2, r3
 8002196:	d10e      	bne.n	80021b6 <HAL_RCC_OscConfig+0x4fe>
 8002198:	4b62      	ldr	r3, [pc, #392]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 800219a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	00c9      	lsls	r1, r1, #3
 80021a2:	430a      	orrs	r2, r1
 80021a4:	651a      	str	r2, [r3, #80]	; 0x50
 80021a6:	4b5f      	ldr	r3, [pc, #380]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80021a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021aa:	4b5e      	ldr	r3, [pc, #376]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0049      	lsls	r1, r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x516>
 80021b6:	4b5b      	ldr	r3, [pc, #364]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80021b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80021bc:	495a      	ldr	r1, [pc, #360]	; (8002328 <HAL_RCC_OscConfig+0x670>)
 80021be:	400a      	ands	r2, r1
 80021c0:	651a      	str	r2, [r3, #80]	; 0x50
 80021c2:	4b58      	ldr	r3, [pc, #352]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80021c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c6:	4b57      	ldr	r3, [pc, #348]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80021c8:	4959      	ldr	r1, [pc, #356]	; (8002330 <HAL_RCC_OscConfig+0x678>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe fccb 	bl	8000b70 <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021de:	e009      	b.n	80021f4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7fe fcc6 	bl	8000b70 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	4a52      	ldr	r2, [pc, #328]	; (8002334 <HAL_RCC_OscConfig+0x67c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e11a      	b.n	800242a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f4:	4b4b      	ldr	r3, [pc, #300]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80021f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d0ef      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7fe fcb5 	bl	8000b70 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800220a:	e009      	b.n	8002220 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7fe fcb0 	bl	8000b70 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	4a47      	ldr	r2, [pc, #284]	; (8002334 <HAL_RCC_OscConfig+0x67c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e104      	b.n	800242a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002220:	4b40      	ldr	r3, [pc, #256]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4013      	ands	r3, r2
 800222a:	d1ef      	bne.n	800220c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800222c:	2327      	movs	r3, #39	; 0x27
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800223a:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 800223c:	493e      	ldr	r1, [pc, #248]	; (8002338 <HAL_RCC_OscConfig+0x680>)
 800223e:	400a      	ands	r2, r1
 8002240:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2220      	movs	r2, #32
 8002248:	4013      	ands	r3, r2
 800224a:	d049      	beq.n	80022e0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d026      	beq.n	80022a2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	4b32      	ldr	r3, [pc, #200]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 800225a:	2101      	movs	r1, #1
 800225c:	430a      	orrs	r2, r1
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	4b30      	ldr	r3, [pc, #192]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002264:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002266:	2101      	movs	r1, #1
 8002268:	430a      	orrs	r2, r1
 800226a:	635a      	str	r2, [r3, #52]	; 0x34
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_RCC_OscConfig+0x684>)
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCC_OscConfig+0x684>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0189      	lsls	r1, r1, #6
 8002276:	430a      	orrs	r2, r1
 8002278:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fc79 	bl	8000b70 <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002284:	f7fe fc74 	bl	8000b70 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0c9      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2202      	movs	r2, #2
 800229c:	4013      	ands	r3, r2
 800229e:	d0f1      	beq.n	8002284 <HAL_RCC_OscConfig+0x5cc>
 80022a0:	e01e      	b.n	80022e0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	438a      	bics	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <HAL_RCC_OscConfig+0x684>)
 80022b0:	6a1a      	ldr	r2, [r3, #32]
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_RCC_OscConfig+0x684>)
 80022b4:	4922      	ldr	r1, [pc, #136]	; (8002340 <HAL_RCC_OscConfig+0x688>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fc59 	bl	8000b70 <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c4:	f7fe fc54 	bl	8000b70 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0a9      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2202      	movs	r2, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d1f1      	bne.n	80022c4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d100      	bne.n	80022ea <HAL_RCC_OscConfig+0x632>
 80022e8:	e09e      	b.n	8002428 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d100      	bne.n	80022f2 <HAL_RCC_OscConfig+0x63a>
 80022f0:	e077      	b.n	80023e2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d158      	bne.n	80023ac <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_OscConfig+0x66c>)
 8002300:	4910      	ldr	r1, [pc, #64]	; (8002344 <HAL_RCC_OscConfig+0x68c>)
 8002302:	400a      	ands	r2, r1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7fe fc33 	bl	8000b70 <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800230e:	e01b      	b.n	8002348 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe fc2e 	bl	8000b70 <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d914      	bls.n	8002348 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e083      	b.n	800242a <HAL_RCC_OscConfig+0x772>
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40021000 	.word	0x40021000
 8002328:	fffffeff 	.word	0xfffffeff
 800232c:	40007000 	.word	0x40007000
 8002330:	fffffbff 	.word	0xfffffbff
 8002334:	00001388 	.word	0x00001388
 8002338:	efffffff 	.word	0xefffffff
 800233c:	40010000 	.word	0x40010000
 8002340:	ffffdfff 	.word	0xffffdfff
 8002344:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002348:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	049b      	lsls	r3, r3, #18
 8002350:	4013      	ands	r3, r2
 8002352:	d1dd      	bne.n	8002310 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002354:	4b37      	ldr	r3, [pc, #220]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a37      	ldr	r2, [pc, #220]	; (8002438 <HAL_RCC_OscConfig+0x780>)
 800235a:	4013      	ands	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	431a      	orrs	r2, r3
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 8002370:	430a      	orrs	r2, r1
 8002372:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0449      	lsls	r1, r1, #17
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe fbf5 	bl	8000b70 <HAL_GetTick>
 8002386:	0003      	movs	r3, r0
 8002388:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fbf0 	bl	8000b70 <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e045      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800239e:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	049b      	lsls	r3, r3, #18
 80023a6:	4013      	ands	r3, r2
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x6d4>
 80023aa:	e03d      	b.n	8002428 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 80023b2:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_RCC_OscConfig+0x784>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fbda 	bl	8000b70 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe fbd5 	bl	8000b70 <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e02a      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	049b      	lsls	r3, r3, #18
 80023dc:	4013      	ands	r3, r2
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x70a>
 80023e0:	e022      	b.n	8002428 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e01d      	b.n	800242a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_RCC_OscConfig+0x77c>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	025b      	lsls	r3, r3, #9
 80023fa:	401a      	ands	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	429a      	cmp	r2, r3
 8002402:	d10f      	bne.n	8002424 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	23f0      	movs	r3, #240	; 0xf0
 8002408:	039b      	lsls	r3, r3, #14
 800240a:	401a      	ands	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	23c0      	movs	r3, #192	; 0xc0
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b00a      	add	sp, #40	; 0x28
 8002430:	bdb0      	pop	{r4, r5, r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40021000 	.word	0x40021000
 8002438:	ff02ffff 	.word	0xff02ffff
 800243c:	feffffff 	.word	0xfeffffff

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e128      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b96      	ldr	r3, [pc, #600]	; (80026b0 <HAL_RCC_ClockConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d91e      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b93      	ldr	r3, [pc, #588]	; (80026b0 <HAL_RCC_ClockConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	4b90      	ldr	r3, [pc, #576]	; (80026b0 <HAL_RCC_ClockConfig+0x270>)
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002474:	f7fe fb7c 	bl	8000b70 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247c:	e009      	b.n	8002492 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f7fe fb77 	bl	8000b70 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	4a8a      	ldr	r2, [pc, #552]	; (80026b4 <HAL_RCC_ClockConfig+0x274>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e109      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b87      	ldr	r3, [pc, #540]	; (80026b0 <HAL_RCC_ClockConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2201      	movs	r2, #1
 8002498:	4013      	ands	r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024aa:	4b83      	ldr	r3, [pc, #524]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	22f0      	movs	r2, #240	; 0xf0
 80024b0:	4393      	bics	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b7f      	ldr	r3, [pc, #508]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4013      	ands	r3, r2
 80024c6:	d100      	bne.n	80024ca <HAL_RCC_ClockConfig+0x8a>
 80024c8:	e089      	b.n	80025de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024d2:	4b79      	ldr	r3, [pc, #484]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	4013      	ands	r3, r2
 80024dc:	d120      	bne.n	8002520 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0e1      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024ea:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	049b      	lsls	r3, r3, #18
 80024f2:	4013      	ands	r3, r2
 80024f4:	d114      	bne.n	8002520 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0d5      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d106      	bne.n	8002510 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002502:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2204      	movs	r2, #4
 8002508:	4013      	ands	r3, r2
 800250a:	d109      	bne.n	8002520 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0ca      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002510:	4b69      	ldr	r3, [pc, #420]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4013      	ands	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0c2      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002520:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2203      	movs	r2, #3
 8002526:	4393      	bics	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4b62      	ldr	r3, [pc, #392]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002534:	f7fe fb1c 	bl	8000b70 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d111      	bne.n	8002568 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002544:	e009      	b.n	800255a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002546:	f7fe fb13 	bl	8000b70 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_RCC_ClockConfig+0x274>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e0a5      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800255a:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	220c      	movs	r2, #12
 8002560:	4013      	ands	r3, r2
 8002562:	2b08      	cmp	r3, #8
 8002564:	d1ef      	bne.n	8002546 <HAL_RCC_ClockConfig+0x106>
 8002566:	e03a      	b.n	80025de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d111      	bne.n	8002594 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002570:	e009      	b.n	8002586 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002572:	f7fe fafd 	bl	8000b70 <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	4a4d      	ldr	r2, [pc, #308]	; (80026b4 <HAL_RCC_ClockConfig+0x274>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e08f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002586:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	220c      	movs	r2, #12
 800258c:	4013      	ands	r3, r2
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d1ef      	bne.n	8002572 <HAL_RCC_ClockConfig+0x132>
 8002592:	e024      	b.n	80025de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d11b      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800259c:	e009      	b.n	80025b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259e:	f7fe fae7 	bl	8000b70 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	4a42      	ldr	r2, [pc, #264]	; (80026b4 <HAL_RCC_ClockConfig+0x274>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e079      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	220c      	movs	r2, #12
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d1ef      	bne.n	800259e <HAL_RCC_ClockConfig+0x15e>
 80025be:	e00e      	b.n	80025de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fad6 	bl	8000b70 <HAL_GetTick>
 80025c4:	0002      	movs	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	4a3a      	ldr	r2, [pc, #232]	; (80026b4 <HAL_RCC_ClockConfig+0x274>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e068      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025d4:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	220c      	movs	r2, #12
 80025da:	4013      	ands	r3, r2
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025de:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_RCC_ClockConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d21e      	bcs.n	800262a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_ClockConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4393      	bics	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <HAL_RCC_ClockConfig+0x270>)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fab7 	bl	8000b70 <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	e009      	b.n	800261c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7fe fab2 	bl	8000b70 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <HAL_RCC_ClockConfig+0x274>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e044      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCC_ClockConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2201      	movs	r2, #1
 8002622:	4013      	ands	r3, r2
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d1ee      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2204      	movs	r2, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a20      	ldr	r2, [pc, #128]	; (80026bc <HAL_RCC_ClockConfig+0x27c>)
 800263a:	4013      	ands	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2208      	movs	r2, #8
 800264e:	4013      	ands	r3, r2
 8002650:	d00a      	beq.n	8002668 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002652:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4a1a      	ldr	r2, [pc, #104]	; (80026c0 <HAL_RCC_ClockConfig+0x280>)
 8002658:	4013      	ands	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	00da      	lsls	r2, r3, #3
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002668:	f000 f832 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800266c:	0001      	movs	r1, r0
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	220f      	movs	r2, #15
 8002676:	4013      	ands	r3, r2
 8002678:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_RCC_ClockConfig+0x284>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	000a      	movs	r2, r1
 800267e:	40da      	lsrs	r2, r3
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_ClockConfig+0x288>)
 8002682:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_RCC_ClockConfig+0x28c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	250b      	movs	r5, #11
 800268a:	197c      	adds	r4, r7, r5
 800268c:	0018      	movs	r0, r3
 800268e:	f7fe fa29 	bl	8000ae4 <HAL_InitTick>
 8002692:	0003      	movs	r3, r0
 8002694:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002696:	197b      	adds	r3, r7, r5
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800269e:	197b      	adds	r3, r7, r5
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	40022000 	.word	0x40022000
 80026b4:	00001388 	.word	0x00001388
 80026b8:	40021000 	.word	0x40021000
 80026bc:	fffff8ff 	.word	0xfffff8ff
 80026c0:	ffffc7ff 	.word	0xffffc7ff
 80026c4:	08002d0c 	.word	0x08002d0c
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000004 	.word	0x20000004

080026d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	b08e      	sub	sp, #56	; 0x38
 80026d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80026d6:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026de:	230c      	movs	r3, #12
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d014      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x40>
 80026e6:	d900      	bls.n	80026ea <HAL_RCC_GetSysClockFreq+0x1a>
 80026e8:	e07b      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x112>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x24>
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d00b      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x3a>
 80026f2:	e076      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026f4:	4b44      	ldr	r3, [pc, #272]	; (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2210      	movs	r2, #16
 80026fa:	4013      	ands	r3, r2
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002702:	e07c      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002704:	4b42      	ldr	r3, [pc, #264]	; (8002810 <HAL_RCC_GetSysClockFreq+0x140>)
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002708:	e079      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800270a:	4b42      	ldr	r3, [pc, #264]	; (8002814 <HAL_RCC_GetSysClockFreq+0x144>)
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800270e:	e076      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	0c9a      	lsrs	r2, r3, #18
 8002714:	230f      	movs	r3, #15
 8002716:	401a      	ands	r2, r3
 8002718:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_RCC_GetSysClockFreq+0x148>)
 800271a:	5c9b      	ldrb	r3, [r3, r2]
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	0d9a      	lsrs	r2, r3, #22
 8002722:	2303      	movs	r3, #3
 8002724:	4013      	ands	r3, r2
 8002726:	3301      	adds	r3, #1
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800272a:	4b37      	ldr	r3, [pc, #220]	; (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	025b      	lsls	r3, r3, #9
 8002732:	4013      	ands	r3, r2
 8002734:	d01a      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	4a35      	ldr	r2, [pc, #212]	; (8002814 <HAL_RCC_GetSysClockFreq+0x144>)
 8002740:	2300      	movs	r3, #0
 8002742:	69b8      	ldr	r0, [r7, #24]
 8002744:	69f9      	ldr	r1, [r7, #28]
 8002746:	f7fd fd8b 	bl	8000260 <__aeabi_lmul>
 800274a:	0002      	movs	r2, r0
 800274c:	000b      	movs	r3, r1
 800274e:	0010      	movs	r0, r2
 8002750:	0019      	movs	r1, r3
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f7fd fd5f 	bl	8000220 <__aeabi_uldivmod>
 8002762:	0002      	movs	r2, r0
 8002764:	000b      	movs	r3, r1
 8002766:	0013      	movs	r3, r2
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
 800276a:	e037      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2210      	movs	r2, #16
 8002772:	4013      	ands	r3, r2
 8002774:	d01a      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4a23      	ldr	r2, [pc, #140]	; (800280c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002780:	2300      	movs	r3, #0
 8002782:	68b8      	ldr	r0, [r7, #8]
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	f7fd fd6b 	bl	8000260 <__aeabi_lmul>
 800278a:	0002      	movs	r2, r0
 800278c:	000b      	movs	r3, r1
 800278e:	0010      	movs	r0, r2
 8002790:	0019      	movs	r1, r3
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f7fd fd3f 	bl	8000220 <__aeabi_uldivmod>
 80027a2:	0002      	movs	r2, r0
 80027a4:	000b      	movs	r3, r1
 80027a6:	0013      	movs	r3, r2
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
 80027aa:	e017      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	0018      	movs	r0, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	0019      	movs	r1, r3
 80027b4:	4a16      	ldr	r2, [pc, #88]	; (8002810 <HAL_RCC_GetSysClockFreq+0x140>)
 80027b6:	2300      	movs	r3, #0
 80027b8:	f7fd fd52 	bl	8000260 <__aeabi_lmul>
 80027bc:	0002      	movs	r2, r0
 80027be:	000b      	movs	r3, r1
 80027c0:	0010      	movs	r0, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	001c      	movs	r4, r3
 80027c8:	2300      	movs	r3, #0
 80027ca:	001d      	movs	r5, r3
 80027cc:	0022      	movs	r2, r4
 80027ce:	002b      	movs	r3, r5
 80027d0:	f7fd fd26 	bl	8000220 <__aeabi_uldivmod>
 80027d4:	0002      	movs	r2, r0
 80027d6:	000b      	movs	r3, r1
 80027d8:	0013      	movs	r3, r2
 80027da:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80027dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027e0:	e00d      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0b5b      	lsrs	r3, r3, #13
 80027e8:	2207      	movs	r2, #7
 80027ea:	4013      	ands	r3, r2
 80027ec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	3301      	adds	r3, #1
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	0212      	lsls	r2, r2, #8
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027fc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b00e      	add	sp, #56	; 0x38
 8002806:	bdb0      	pop	{r4, r5, r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	003d0900 	.word	0x003d0900
 8002810:	00f42400 	.word	0x00f42400
 8002814:	007a1200 	.word	0x007a1200
 8002818:	08002d1c 	.word	0x08002d1c

0800281c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e032      	b.n	8002894 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2239      	movs	r2, #57	; 0x39
 8002832:	5c9b      	ldrb	r3, [r3, r2]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d107      	bne.n	800284a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2238      	movs	r2, #56	; 0x38
 800283e:	2100      	movs	r1, #0
 8002840:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f7fe f8a1 	bl	800098c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2239      	movs	r2, #57	; 0x39
 800284e:	2102      	movs	r1, #2
 8002850:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	0019      	movs	r1, r3
 800285c:	0010      	movs	r0, r2
 800285e:	f000 f971 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223e      	movs	r2, #62	; 0x3e
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	223a      	movs	r2, #58	; 0x3a
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	223b      	movs	r2, #59	; 0x3b
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	223c      	movs	r2, #60	; 0x3c
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	223d      	movs	r2, #61	; 0x3d
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2239      	movs	r2, #57	; 0x39
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b002      	add	sp, #8
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2239      	movs	r2, #57	; 0x39
 80028a8:	5c9b      	ldrb	r3, [r3, r2]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d001      	beq.n	80028b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e02e      	b.n	8002912 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2239      	movs	r2, #57	; 0x39
 80028b8:	2102      	movs	r1, #2
 80028ba:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	05db      	lsls	r3, r3, #23
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d009      	beq.n	80028dc <HAL_TIM_Base_Start+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a13      	ldr	r2, [pc, #76]	; (800291c <HAL_TIM_Base_Start+0x80>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_TIM_Base_Start+0x40>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a12      	ldr	r2, [pc, #72]	; (8002920 <HAL_TIM_Base_Start+0x84>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2207      	movs	r2, #7
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d010      	beq.n	8002910 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	e007      	b.n	8002910 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2101      	movs	r1, #1
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b004      	add	sp, #16
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	40010800 	.word	0x40010800
 8002920:	40011400 	.word	0x40011400

08002924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2202      	movs	r2, #2
 8002934:	4013      	ands	r3, r2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d124      	bne.n	8002984 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2202      	movs	r2, #2
 8002942:	4013      	ands	r3, r2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d11d      	bne.n	8002984 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2203      	movs	r2, #3
 800294e:	4252      	negs	r2, r2
 8002950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2203      	movs	r2, #3
 8002960:	4013      	ands	r3, r2
 8002962:	d004      	beq.n	800296e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 f8d4 	bl	8002b14 <HAL_TIM_IC_CaptureCallback>
 800296c:	e007      	b.n	800297e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 f8c7 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0018      	movs	r0, r3
 800297a:	f000 f8d3 	bl	8002b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2204      	movs	r2, #4
 800298c:	4013      	ands	r3, r2
 800298e:	2b04      	cmp	r3, #4
 8002990:	d125      	bne.n	80029de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2204      	movs	r2, #4
 800299a:	4013      	ands	r3, r2
 800299c:	2b04      	cmp	r3, #4
 800299e:	d11e      	bne.n	80029de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2205      	movs	r2, #5
 80029a6:	4252      	negs	r2, r2
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	23c0      	movs	r3, #192	; 0xc0
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4013      	ands	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 f8a7 	bl	8002b14 <HAL_TIM_IC_CaptureCallback>
 80029c6:	e007      	b.n	80029d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f89a 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f8a6 	bl	8002b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2208      	movs	r2, #8
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d124      	bne.n	8002a36 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2208      	movs	r2, #8
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d11d      	bne.n	8002a36 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2209      	movs	r2, #9
 8002a00:	4252      	negs	r2, r2
 8002a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2204      	movs	r2, #4
 8002a08:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2203      	movs	r2, #3
 8002a12:	4013      	ands	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 f87b 	bl	8002b14 <HAL_TIM_IC_CaptureCallback>
 8002a1e:	e007      	b.n	8002a30 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 f86e 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f87a 	bl	8002b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d125      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d11e      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2211      	movs	r2, #17
 8002a58:	4252      	negs	r2, r2
 8002a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2208      	movs	r2, #8
 8002a60:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	23c0      	movs	r3, #192	; 0xc0
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 f84e 	bl	8002b14 <HAL_TIM_IC_CaptureCallback>
 8002a78:	e007      	b.n	8002a8a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f841 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 f84d 	bl	8002b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10f      	bne.n	8002abe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d108      	bne.n	8002abe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 f81b 	bl	8002af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2240      	movs	r2, #64	; 0x40
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d10f      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2240      	movs	r2, #64	; 0x40
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d108      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2241      	movs	r2, #65	; 0x41
 8002ae0:	4252      	negs	r2, r2
 8002ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 f824 	bl	8002b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b002      	add	sp, #8
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	05db      	lsls	r3, r3, #23
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0x2a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <TIM_Base_SetConfig+0x9c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0x2a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <TIM_Base_SetConfig+0xa0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2270      	movs	r2, #112	; 0x70
 8002b72:	4393      	bics	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	05db      	lsls	r3, r3, #23
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d007      	beq.n	8002b9a <TIM_Base_SetConfig+0x56>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a14      	ldr	r2, [pc, #80]	; (8002be0 <TIM_Base_SetConfig+0x9c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d003      	beq.n	8002b9a <TIM_Base_SetConfig+0x56>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <TIM_Base_SetConfig+0xa0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d108      	bne.n	8002bac <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <TIM_Base_SetConfig+0xa4>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	4393      	bics	r3, r2
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	615a      	str	r2, [r3, #20]
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b004      	add	sp, #16
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40010800 	.word	0x40010800
 8002be4:	40011400 	.word	0x40011400
 8002be8:	fffffcff 	.word	0xfffffcff

08002bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2238      	movs	r2, #56	; 0x38
 8002bfa:	5c9b      	ldrb	r3, [r3, r2]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e042      	b.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2238      	movs	r2, #56	; 0x38
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2239      	movs	r2, #57	; 0x39
 8002c10:	2102      	movs	r1, #2
 8002c12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2270      	movs	r2, #112	; 0x70
 8002c28:	4393      	bics	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	05db      	lsls	r3, r3, #23
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d009      	beq.n	8002c5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d10c      	bne.n	8002c78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2280      	movs	r2, #128	; 0x80
 8002c62:	4393      	bics	r3, r2
 8002c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2239      	movs	r2, #57	; 0x39
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2238      	movs	r2, #56	; 0x38
 8002c84:	2100      	movs	r1, #0
 8002c86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b004      	add	sp, #16
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	40010800 	.word	0x40010800
 8002c98:	40011400 	.word	0x40011400

08002c9c <__libc_init_array>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	2600      	movs	r6, #0
 8002ca0:	4d0c      	ldr	r5, [pc, #48]	; (8002cd4 <__libc_init_array+0x38>)
 8002ca2:	4c0d      	ldr	r4, [pc, #52]	; (8002cd8 <__libc_init_array+0x3c>)
 8002ca4:	1b64      	subs	r4, r4, r5
 8002ca6:	10a4      	asrs	r4, r4, #2
 8002ca8:	42a6      	cmp	r6, r4
 8002caa:	d109      	bne.n	8002cc0 <__libc_init_array+0x24>
 8002cac:	2600      	movs	r6, #0
 8002cae:	f000 f821 	bl	8002cf4 <_init>
 8002cb2:	4d0a      	ldr	r5, [pc, #40]	; (8002cdc <__libc_init_array+0x40>)
 8002cb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ce0 <__libc_init_array+0x44>)
 8002cb6:	1b64      	subs	r4, r4, r5
 8002cb8:	10a4      	asrs	r4, r4, #2
 8002cba:	42a6      	cmp	r6, r4
 8002cbc:	d105      	bne.n	8002cca <__libc_init_array+0x2e>
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	00b3      	lsls	r3, r6, #2
 8002cc2:	58eb      	ldr	r3, [r5, r3]
 8002cc4:	4798      	blx	r3
 8002cc6:	3601      	adds	r6, #1
 8002cc8:	e7ee      	b.n	8002ca8 <__libc_init_array+0xc>
 8002cca:	00b3      	lsls	r3, r6, #2
 8002ccc:	58eb      	ldr	r3, [r5, r3]
 8002cce:	4798      	blx	r3
 8002cd0:	3601      	adds	r6, #1
 8002cd2:	e7f2      	b.n	8002cba <__libc_init_array+0x1e>
 8002cd4:	08002d30 	.word	0x08002d30
 8002cd8:	08002d30 	.word	0x08002d30
 8002cdc:	08002d30 	.word	0x08002d30
 8002ce0:	08002d34 	.word	0x08002d34

08002ce4 <memset>:
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	1882      	adds	r2, r0, r2
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d100      	bne.n	8002cee <memset+0xa>
 8002cec:	4770      	bx	lr
 8002cee:	7019      	strb	r1, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	e7f9      	b.n	8002ce8 <memset+0x4>

08002cf4 <_init>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr

08002d00 <_fini>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d06:	bc08      	pop	{r3}
 8002d08:	469e      	mov	lr, r3
 8002d0a:	4770      	bx	lr
